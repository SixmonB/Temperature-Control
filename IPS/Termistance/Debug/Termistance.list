
Termistance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08008c68  08008c68  00018c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090a0  080090a0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  080090a0  080090a0  000190a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090a8  080090a8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090ac  080090ac  000190ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080090b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200001ec  0800929c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  0800929c  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010380  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002222  00000000  00000000  0003059c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000327c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00033648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188f1  00000000  00000000  000343f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c68  00000000  00000000  0004cce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bef7  00000000  00000000  0005d951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a0  00000000  00000000  000f9898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c4c 	.word	0x08008c4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08008c4c 	.word	0x08008c4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 ff86 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f840 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 f9ea 	bl	8001340 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 f9be 	bl	80012ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f70:	f000 f8a4 	bl	80010bc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f74:	f000 f8f4 	bl	8001160 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f78:	f000 f940 	bl	80011fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <main+0x70>)
 8000f7e:	f002 fc7f 	bl	8003880 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8000f82:	2100      	movs	r1, #0
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <main+0x74>)
 8000f86:	f002 fd37 	bl	80039f8 <HAL_TIM_PWM_Start_IT>
  pulse_width = htim4.Init.Period * duty/100;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <main+0x74>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <main+0x78>)
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <main+0x7c>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <main+0x80>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse_width);
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <main+0x80>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <main+0x74>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fba:	ee17 2a90 	vmov	r2, s15
 8000fbe:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_UART_Receive_IT(&huart2, receive_buffer, 3);
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <main+0x84>)
 8000fc4:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <main+0x88>)
 8000fc6:	f003 fcfc 	bl	80049c2 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <main+0x6e>
 8000fcc:	20000250 	.word	0x20000250
 8000fd0:	20000298 	.word	0x20000298
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	51eb851f 	.word	0x51eb851f
 8000fdc:	20000348 	.word	0x20000348
 8000fe0:	2000034c 	.word	0x2000034c
 8000fe4:	200002e0 	.word	0x200002e0

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2230      	movs	r2, #48	; 0x30
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 fcaa 	bl	8005950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <SystemClock_Config+0xcc>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <SystemClock_Config+0xcc>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <SystemClock_Config+0xcc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <SystemClock_Config+0xd0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <SystemClock_Config+0xd0>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <SystemClock_Config+0xd0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104c:	2310      	movs	r3, #16
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001050:	2302      	movs	r3, #2
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001054:	2300      	movs	r3, #0
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001058:	2310      	movs	r3, #16
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800105c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001060:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001062:	2304      	movs	r3, #4
 8001064:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001066:	2304      	movs	r3, #4
 8001068:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	4618      	mov	r0, r3
 8001070:	f001 ff1e 	bl	8002eb0 <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800107a:	f000 fc5b 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2302      	movs	r3, #2
 8001084:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2102      	movs	r1, #2
 800109a:	4618      	mov	r0, r3
 800109c:	f002 f980 	bl	80033a0 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010a6:	f000 fc45 	bl	8001934 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC1_Init+0x98>)
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <MX_ADC1_Init+0x9c>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC1_Init+0x98>)
 80010d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC1_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_ADC1_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_ADC1_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC1_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_ADC1_Init+0x98>)
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_ADC1_Init+0xa0>)
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC1_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_ADC1_Init+0x98>)
 800110a:	2201      	movs	r2, #1
 800110c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_ADC1_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC1_Init+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC1_Init+0x98>)
 800111e:	f000 ff19 	bl	8001f54 <HAL_ADC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001128:	f000 fc04 	bl	8001934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_ADC1_Init+0x98>)
 800113e:	f001 f93d 	bl	80023bc <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001148:	f000 fbf4 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000208 	.word	0x20000208
 8001158:	40012000 	.word	0x40012000
 800115c:	0f000001 	.word	0x0f000001

08001160 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM3_Init+0x94>)
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <MX_TIM3_Init+0x98>)
 8001180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001184:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001188:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM3_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001192:	f241 3288 	movw	r2, #5000	; 0x1388
 8001196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_TIM3_Init+0x94>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a4:	4813      	ldr	r0, [pc, #76]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a6:	f002 fb1b 	bl	80037e0 <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011b0:	f000 fbc0 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011c2:	f002 fee1 	bl	8003f88 <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011cc:	f000 fbb2 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011de:	f003 fa8f 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011e8:	f000 fba4 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000250 	.word	0x20000250
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	; 0x38
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]
 800122a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <MX_TIM4_Init+0xe8>)
 800122e:	4a2e      	ldr	r2, [pc, #184]	; (80012e8 <MX_TIM4_Init+0xec>)
 8001230:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_TIM4_Init+0xe8>)
 8001234:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001238:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_TIM4_Init+0xe8>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <MX_TIM4_Init+0xe8>)
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_TIM4_Init+0xe8>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <MX_TIM4_Init+0xe8>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001254:	4823      	ldr	r0, [pc, #140]	; (80012e4 <MX_TIM4_Init+0xe8>)
 8001256:	f002 fac3 	bl	80037e0 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001260:	f000 fb68 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	; (80012e4 <MX_TIM4_Init+0xe8>)
 8001272:	f002 fe89 	bl	8003f88 <HAL_TIM_ConfigClockSource>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800127c:	f000 fb5a 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001280:	4818      	ldr	r0, [pc, #96]	; (80012e4 <MX_TIM4_Init+0xe8>)
 8001282:	f002 fb5f 	bl	8003944 <HAL_TIM_PWM_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800128c:	f000 fb52 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4619      	mov	r1, r3
 800129e:	4811      	ldr	r0, [pc, #68]	; (80012e4 <MX_TIM4_Init+0xe8>)
 80012a0:	f003 fa2e 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012aa:	f000 fb43 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ae:	2360      	movs	r3, #96	; 0x60
 80012b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4807      	ldr	r0, [pc, #28]	; (80012e4 <MX_TIM4_Init+0xe8>)
 80012c6:	f002 fd9d 	bl	8003e04 <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80012d0:	f000 fb30 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <MX_TIM4_Init+0xe8>)
 80012d6:	f000 fbed 	bl	8001ab4 <HAL_TIM_MspPostInit>

}
 80012da:	bf00      	nop
 80012dc:	3738      	adds	r7, #56	; 0x38
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000298 	.word	0x20000298
 80012e8:	40000800 	.word	0x40000800

080012ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <MX_USART2_UART_Init+0x50>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001324:	f003 fa6e 	bl	8004804 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132e:	f000 fb01 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200002e0 	.word	0x200002e0
 800133c:	40004400 	.word	0x40004400

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <MX_GPIO_Init+0xf8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a36      	ldr	r2, [pc, #216]	; (8001438 <MX_GPIO_Init+0xf8>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <MX_GPIO_Init+0xf8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <MX_GPIO_Init+0xf8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a2f      	ldr	r2, [pc, #188]	; (8001438 <MX_GPIO_Init+0xf8>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <MX_GPIO_Init+0xf8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <MX_GPIO_Init+0xf8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a28      	ldr	r2, [pc, #160]	; (8001438 <MX_GPIO_Init+0xf8>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_GPIO_Init+0xf8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_GPIO_Init+0xf8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <MX_GPIO_Init+0xf8>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_GPIO_Init+0xf8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2120      	movs	r1, #32
 80013ca:	481c      	ldr	r0, [pc, #112]	; (800143c <MX_GPIO_Init+0xfc>)
 80013cc:	f001 fd56 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2120      	movs	r1, #32
 80013d4:	481a      	ldr	r0, [pc, #104]	; (8001440 <MX_GPIO_Init+0x100>)
 80013d6:	f001 fd51 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_GPIO_Init+0x104>)
 80013f2:	f001 fbbf 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013f6:	2320      	movs	r3, #32
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	480b      	ldr	r0, [pc, #44]	; (800143c <MX_GPIO_Init+0xfc>)
 800140e:	f001 fbb1 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001412:	2320      	movs	r3, #32
 8001414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_GPIO_Init+0x100>)
 800142a:	f001 fba3 	bl	8002b74 <HAL_GPIO_Init>

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40020800 	.word	0x40020800

08001448 <Correcteur_PI>:

/* USER CODE BEGIN 4 */

void Correcteur_PI(float Temperature){
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float Te = 0.5;

	static int I = 0;


	float Error = cmd_temp - Temperature;
 8001452:	4b8b      	ldr	r3, [pc, #556]	; (8001680 <Correcteur_PI+0x238>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800145e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001466:	edc7 7a04 	vstr	s15, [r7, #16]

	int WORK = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]

	if (WORK)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d054      	beq.n	800151e <Correcteur_PI+0xd6>
	{
		Vmoy = (0.5*Error) - (0.498*E_last) + S_last;
 8001474:	6938      	ldr	r0, [r7, #16]
 8001476:	f7ff f86f 	bl	8000558 <__aeabi_f2d>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b81      	ldr	r3, [pc, #516]	; (8001684 <Correcteur_PI+0x23c>)
 8001480:	f7ff f8c2 	bl	8000608 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4614      	mov	r4, r2
 800148a:	461d      	mov	r5, r3
 800148c:	4b7e      	ldr	r3, [pc, #504]	; (8001688 <Correcteur_PI+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f861 	bl	8000558 <__aeabi_f2d>
 8001496:	a378      	add	r3, pc, #480	; (adr r3, 8001678 <Correcteur_PI+0x230>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f8b4 	bl	8000608 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4620      	mov	r0, r4
 80014a6:	4629      	mov	r1, r5
 80014a8:	f7fe fef6 	bl	8000298 <__aeabi_dsub>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4614      	mov	r4, r2
 80014b2:	461d      	mov	r5, r3
 80014b4:	4b75      	ldr	r3, [pc, #468]	; (800168c <Correcteur_PI+0x244>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f84d 	bl	8000558 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4620      	mov	r0, r4
 80014c4:	4629      	mov	r1, r5
 80014c6:	f7fe fee9 	bl	800029c <__adddf3>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb71 	bl	8000bb8 <__aeabi_d2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a6d      	ldr	r2, [pc, #436]	; (8001690 <Correcteur_PI+0x248>)
 80014da:	6013      	str	r3, [r2, #0]
		E_last = Error;
 80014dc:	4a6a      	ldr	r2, [pc, #424]	; (8001688 <Correcteur_PI+0x240>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	6013      	str	r3, [r2, #0]
		S_last = Vmoy;
 80014e2:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <Correcteur_PI+0x248>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a69      	ldr	r2, [pc, #420]	; (800168c <Correcteur_PI+0x244>)
 80014e8:	6013      	str	r3, [r2, #0]

		if (Vmoy < 0)
 80014ea:	4b69      	ldr	r3, [pc, #420]	; (8001690 <Correcteur_PI+0x248>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	d503      	bpl.n	8001502 <Correcteur_PI+0xba>
			Vmoy = 0.0;
 80014fa:	4b65      	ldr	r3, [pc, #404]	; (8001690 <Correcteur_PI+0x248>)
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
		if (Vmoy > 20)
 8001502:	4b63      	ldr	r3, [pc, #396]	; (8001690 <Correcteur_PI+0x248>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800150c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	dd63      	ble.n	80015de <Correcteur_PI+0x196>
			Vmoy = 20.0;
 8001516:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <Correcteur_PI+0x248>)
 8001518:	4a5e      	ldr	r2, [pc, #376]	; (8001694 <Correcteur_PI+0x24c>)
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e05f      	b.n	80015de <Correcteur_PI+0x196>
	}
	else
	{
		int KP = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
		if (Error > 2 || Error < -2)
 8001522:	edd7 7a04 	vldr	s15, [r7, #16]
 8001526:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	dc08      	bgt.n	8001546 <Correcteur_PI+0xfe>
 8001534:	edd7 7a04 	vldr	s15, [r7, #16]
 8001538:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800153c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	d502      	bpl.n	800154c <Correcteur_PI+0x104>
			KP = 5;
 8001546:	2305      	movs	r3, #5
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e001      	b.n	8001550 <Correcteur_PI+0x108>
		else
			KP = 2;
 800154c:	2302      	movs	r3, #2
 800154e:	617b      	str	r3, [r7, #20]
		int KI = 0.3;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]

		I+=Te*Error;
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <Correcteur_PI+0x250>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001560:	4b4e      	ldr	r3, [pc, #312]	; (800169c <Correcteur_PI+0x254>)
 8001562:	edd3 6a00 	vldr	s13, [r3]
 8001566:	edd7 7a04 	vldr	s15, [r7, #16]
 800156a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001576:	ee17 2a90 	vmov	r2, s15
 800157a:	4b47      	ldr	r3, [pc, #284]	; (8001698 <Correcteur_PI+0x250>)
 800157c:	601a      	str	r2, [r3, #0]
		Vmoy=KP*Error+KI*I;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	ee07 3a90 	vmov	s15, r3
 8001584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001588:	edd7 7a04 	vldr	s15, [r7, #16]
 800158c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001590:	4b41      	ldr	r3, [pc, #260]	; (8001698 <Correcteur_PI+0x250>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	ee07 3a90 	vmov	s15, r3
 800159e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a6:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <Correcteur_PI+0x248>)
 80015a8:	edc3 7a00 	vstr	s15, [r3]

		if (Vmoy < 0)
 80015ac:	4b38      	ldr	r3, [pc, #224]	; (8001690 <Correcteur_PI+0x248>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ba:	d503      	bpl.n	80015c4 <Correcteur_PI+0x17c>
			Vmoy = 0.0;
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <Correcteur_PI+0x248>)
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
		if (Vmoy >= 20)
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <Correcteur_PI+0x248>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80015ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d6:	db02      	blt.n	80015de <Correcteur_PI+0x196>
			Vmoy = 20.0;
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <Correcteur_PI+0x248>)
 80015da:	4a2e      	ldr	r2, [pc, #184]	; (8001694 <Correcteur_PI+0x24c>)
 80015dc:	601a      	str	r2, [r3, #0]
	}
	//0.5 0.498

	pulse_width = (Vmoy/20.0 * htim4.Init.Period);
 80015de:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <Correcteur_PI+0x248>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffb8 	bl	8000558 <__aeabi_f2d>
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <Correcteur_PI+0x258>)
 80015ee:	f7ff f935 	bl	800085c <__aeabi_ddiv>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4614      	mov	r4, r2
 80015f8:	461d      	mov	r5, r3
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <Correcteur_PI+0x25c>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff88 	bl	8000514 <__aeabi_ui2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	f7fe fffc 	bl	8000608 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff face 	bl	8000bb8 <__aeabi_d2f>
 800161c:	4603      	mov	r3, r0
 800161e:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <Correcteur_PI+0x260>)
 8001620:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse_width);
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <Correcteur_PI+0x260>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <Correcteur_PI+0x25c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001630:	ee17 2a90 	vmov	r2, s15
 8001634:	635a      	str	r2, [r3, #52]	; 0x34

	sprintf(str, "%f", Vmoy);
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <Correcteur_PI+0x248>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff8c 	bl	8000558 <__aeabi_f2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4919      	ldr	r1, [pc, #100]	; (80016ac <Correcteur_PI+0x264>)
 8001646:	481a      	ldr	r0, [pc, #104]	; (80016b0 <Correcteur_PI+0x268>)
 8001648:	f004 fdf4 	bl	8006234 <siprintf>
	// str is Tension value after correction
	HAL_UART_Transmit(&huart2, (uint8_t *) "V;", 2, 10); // tension identifier
 800164c:	230a      	movs	r3, #10
 800164e:	2202      	movs	r2, #2
 8001650:	4918      	ldr	r1, [pc, #96]	; (80016b4 <Correcteur_PI+0x26c>)
 8001652:	4819      	ldr	r0, [pc, #100]	; (80016b8 <Correcteur_PI+0x270>)
 8001654:	f003 f923 	bl	800489e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, 7,10);// Sending in normal mode
 8001658:	230a      	movs	r3, #10
 800165a:	2207      	movs	r2, #7
 800165c:	4914      	ldr	r1, [pc, #80]	; (80016b0 <Correcteur_PI+0x268>)
 800165e:	4816      	ldr	r0, [pc, #88]	; (80016b8 <Correcteur_PI+0x270>)
 8001660:	f003 f91d 	bl	800489e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, new_line, 3, 10);
 8001664:	230a      	movs	r3, #10
 8001666:	2203      	movs	r2, #3
 8001668:	4914      	ldr	r1, [pc, #80]	; (80016bc <Correcteur_PI+0x274>)
 800166a:	4813      	ldr	r0, [pc, #76]	; (80016b8 <Correcteur_PI+0x270>)
 800166c:	f003 f917 	bl	800489e <HAL_UART_Transmit>
  }
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bdb0      	pop	{r4, r5, r7, pc}
 8001678:	645a1cac 	.word	0x645a1cac
 800167c:	3fdfdf3b 	.word	0x3fdfdf3b
 8001680:	20000008 	.word	0x20000008
 8001684:	3fe00000 	.word	0x3fe00000
 8001688:	20000350 	.word	0x20000350
 800168c:	20000354 	.word	0x20000354
 8001690:	2000033c 	.word	0x2000033c
 8001694:	41a00000 	.word	0x41a00000
 8001698:	20000358 	.word	0x20000358
 800169c:	2000000c 	.word	0x2000000c
 80016a0:	40340000 	.word	0x40340000
 80016a4:	20000298 	.word	0x20000298
 80016a8:	20000348 	.word	0x20000348
 80016ac:	08008c68 	.word	0x08008c68
 80016b0:	20000340 	.word	0x20000340
 80016b4:	08008c6c 	.word	0x08008c6c
 80016b8:	200002e0 	.word	0x200002e0
 80016bc:	20000000 	.word	0x20000000

080016c0 <HAL_TIM_PeriodElapsedCallback>:
 * ADC1 in PIN A0 (use 3.3 V power)
 * TIM 3
 * UART 2 with st-link
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim3)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a5d      	ldr	r2, [pc, #372]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	f040 809c 	bne.w	800180a <HAL_TIM_PeriodElapsedCallback+0x14a>
	{
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
	HAL_ADC_Start(&hadc1);
 80016d2:	485c      	ldr	r0, [pc, #368]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80016d4:	f000 fc82 	bl	8001fdc <HAL_ADC_Start>
	analog_value = HAL_ADC_GetValue(&hadc1);
 80016d8:	485a      	ldr	r0, [pc, #360]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80016da:	f000 fe43 	bl	8002364 <HAL_ADC_GetValue>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b59      	ldr	r3, [pc, #356]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80016e4:	801a      	strh	r2, [r3, #0]
	tension = analog_value * tension_in/4095;
 80016e6:	4b58      	ldr	r3, [pc, #352]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff22 	bl	8000534 <__aeabi_i2d>
 80016f0:	a349      	add	r3, pc, #292	; (adr r3, 8001818 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7fe ff87 	bl	8000608 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	a347      	add	r3, pc, #284	; (adr r3, 8001820 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7ff f8a8 	bl	800085c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff fa50 	bl	8000bb8 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	4a4c      	ldr	r2, [pc, #304]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800171c:	6013      	str	r3, [r2, #0]
	//Recuperation de Vm * 2
	Vm = tension;
 800171e:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a4b      	ldr	r2, [pc, #300]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001724:	6013      	str	r3, [r2, #0]
	//Calcul de Rc
	Rc = (-R25*(Vm-5))/(Vm+5);
 8001726:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001734:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001854 <HAL_TIM_PeriodElapsedCallback+0x194>
 8001738:	ee67 6a87 	vmul.f32	s13, s15, s14
 800173c:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800174a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800174e:	4b42      	ldr	r3, [pc, #264]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001750:	edc3 7a00 	vstr	s15, [r3]
	//Calcul de R25/Rc
	Rapport = Rc/R25;
 8001754:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001756:	ed93 7a00 	vldr	s14, [r3]
 800175a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800185c <HAL_TIM_PeriodElapsedCallback+0x19c>
 800175e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001764:	edc3 7a00 	vstr	s15, [r3]
	//Valeur temperature suivant rapport resistance
	Temp = 10.7426+73.4722*exp(-1.79131*Rapport);
 8001768:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fef3 	bl	8000558 <__aeabi_f2d>
 8001772:	a32d      	add	r3, pc, #180	; (adr r3, 8001828 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7fe ff46 	bl	8000608 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	ec43 2b17 	vmov	d7, r2, r3
 8001784:	eeb0 0a47 	vmov.f32	s0, s14
 8001788:	eef0 0a67 	vmov.f32	s1, s15
 800178c:	f007 f858 	bl	8008840 <exp>
 8001790:	ec51 0b10 	vmov	r0, r1, d0
 8001794:	a326      	add	r3, pc, #152	; (adr r3, 8001830 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff35 	bl	8000608 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	a324      	add	r3, pc, #144	; (adr r3, 8001838 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe fd76 	bl	800029c <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f9fe 	bl	8000bb8 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a29      	ldr	r2, [pc, #164]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017c0:	6013      	str	r3, [r2, #0]
	//Envoie dans le PI de la temperature
	Correcteur_PI(Temp);
 80017c2:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	eeb0 0a67 	vmov.f32	s0, s15
 80017cc:	f7ff fe3c 	bl	8001448 <Correcteur_PI>
	/*gcvt(tension, 6, str);
	HAL_UART_Transmit(&huart2, (uint8_t *)str, 7,10);// Sending in normal mode
	HAL_UART_Transmit(&huart2, tension_unit, 4, 10);*/
	sprintf(str, "%f", Temp);
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe febf 	bl	8000558 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4922      	ldr	r1, [pc, #136]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80017e0:	4822      	ldr	r0, [pc, #136]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80017e2:	f004 fd27 	bl	8006234 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) "T;", 2, 10); // temperature identifier
 80017e6:	230a      	movs	r3, #10
 80017e8:	2202      	movs	r2, #2
 80017ea:	4921      	ldr	r1, [pc, #132]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80017ec:	4821      	ldr	r0, [pc, #132]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80017ee:	f003 f856 	bl	800489e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, 7,10);// Sending in normal mode
 80017f2:	230a      	movs	r3, #10
 80017f4:	2207      	movs	r2, #7
 80017f6:	491d      	ldr	r1, [pc, #116]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80017f8:	481e      	ldr	r0, [pc, #120]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80017fa:	f003 f850 	bl	800489e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, new_line, 3, 10);
 80017fe:	230a      	movs	r3, #10
 8001800:	2203      	movs	r2, #3
 8001802:	491d      	ldr	r1, [pc, #116]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001804:	481b      	ldr	r0, [pc, #108]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001806:	f003 f84a 	bl	800489e <HAL_UART_Transmit>
	}
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	66666666 	.word	0x66666666
 800181c:	400a6666 	.word	0x400a6666
 8001820:	00000000 	.word	0x00000000
 8001824:	40affe00 	.word	0x40affe00
 8001828:	acaff6d3 	.word	0xacaff6d3
 800182c:	bffca934 	.word	0xbffca934
 8001830:	86594af5 	.word	0x86594af5
 8001834:	40525e38 	.word	0x40525e38
 8001838:	113404ea 	.word	0x113404ea
 800183c:	40257c36 	.word	0x40257c36
 8001840:	20000250 	.word	0x20000250
 8001844:	20000208 	.word	0x20000208
 8001848:	20000324 	.word	0x20000324
 800184c:	20000328 	.word	0x20000328
 8001850:	2000032c 	.word	0x2000032c
 8001854:	c23c0000 	.word	0xc23c0000
 8001858:	20000330 	.word	0x20000330
 800185c:	423c0000 	.word	0x423c0000
 8001860:	20000334 	.word	0x20000334
 8001864:	20000338 	.word	0x20000338
 8001868:	08008c68 	.word	0x08008c68
 800186c:	20000340 	.word	0x20000340
 8001870:	08008c70 	.word	0x08008c70
 8001874:	200002e0 	.word	0x200002e0
 8001878:	20000000 	.word	0x20000000

0800187c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	int flag = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
	// msg is to convert the char values from the received message to string so as to adapt to the atoi arguments
	char msg[3] = { receive_buffer[1], receive_buffer[2], '\0'};
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_UART_RxCpltCallback+0xa8>)
 800188a:	785b      	ldrb	r3, [r3, #1]
 800188c:	723b      	strb	r3, [r7, #8]
 800188e:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_UART_RxCpltCallback+0xa8>)
 8001890:	789b      	ldrb	r3, [r3, #2]
 8001892:	727b      	strb	r3, [r7, #9]
 8001894:	2300      	movs	r3, #0
 8001896:	72bb      	strb	r3, [r7, #10]
	switch(receive_buffer[0]){
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_UART_RxCpltCallback+0xa8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b46      	cmp	r3, #70	; 0x46
 800189e:	d004      	beq.n	80018aa <HAL_UART_RxCpltCallback+0x2e>
 80018a0:	2b54      	cmp	r3, #84	; 0x54
 80018a2:	d105      	bne.n	80018b0 <HAL_UART_RxCpltCallback+0x34>
	// sending messages in format Fxx/Txx for fan or temperature command
	// correct parsing and variable update

	case 'T':
		flag = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
		break;
 80018a8:	e003      	b.n	80018b2 <HAL_UART_RxCpltCallback+0x36>
	case 'F':
		flag = 2;
 80018aa:	2302      	movs	r3, #2
 80018ac:	60fb      	str	r3, [r7, #12]
		break;
 80018ae:	e000      	b.n	80018b2 <HAL_UART_RxCpltCallback+0x36>
	default:
		break;
 80018b0:	bf00      	nop
	}
	if(flag == 1){
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d108      	bne.n	80018ca <HAL_UART_RxCpltCallback+0x4e>
		cmd_temp = atoi(msg);
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	4618      	mov	r0, r3
 80018be:	f004 f819 	bl	80058f4 <atoi>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_UART_RxCpltCallback+0xac>)
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e01d      	b.n	8001906 <HAL_UART_RxCpltCallback+0x8a>
	}
	else if(flag == 2){
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d11a      	bne.n	8001906 <HAL_UART_RxCpltCallback+0x8a>
		if(atoi(msg) == 1){
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4618      	mov	r0, r3
 80018d6:	f004 f80d 	bl	80058f4 <atoi>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d105      	bne.n	80018ec <HAL_UART_RxCpltCallback+0x70>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	2120      	movs	r1, #32
 80018e4:	4811      	ldr	r0, [pc, #68]	; (800192c <HAL_UART_RxCpltCallback+0xb0>)
 80018e6:	f001 fac9 	bl	8002e7c <HAL_GPIO_WritePin>
 80018ea:	e00c      	b.n	8001906 <HAL_UART_RxCpltCallback+0x8a>
		}
		else if(atoi(msg) == 0){
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 ffff 	bl	80058f4 <atoi>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d104      	bne.n	8001906 <HAL_UART_RxCpltCallback+0x8a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2120      	movs	r1, #32
 8001900:	480a      	ldr	r0, [pc, #40]	; (800192c <HAL_UART_RxCpltCallback+0xb0>)
 8001902:	f001 fabb 	bl	8002e7c <HAL_GPIO_WritePin>
		}
	}

	HAL_UART_Transmit(&huart2,receive_buffer, sizeof(receive_buffer), 10);
 8001906:	230a      	movs	r3, #10
 8001908:	2203      	movs	r2, #3
 800190a:	4906      	ldr	r1, [pc, #24]	; (8001924 <HAL_UART_RxCpltCallback+0xa8>)
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <HAL_UART_RxCpltCallback+0xb4>)
 800190e:	f002 ffc6 	bl	800489e <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, receive_buffer, 3);
 8001912:	2203      	movs	r2, #3
 8001914:	4903      	ldr	r1, [pc, #12]	; (8001924 <HAL_UART_RxCpltCallback+0xa8>)
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <HAL_UART_RxCpltCallback+0xb4>)
 8001918:	f003 f853 	bl	80049c2 <HAL_UART_Receive_IT>
    //printf("Command received %s", fan);
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000034c 	.word	0x2000034c
 8001928:	20000008 	.word	0x20000008
 800192c:	40020400 	.word	0x40020400
 8001930:	200002e0 	.word	0x200002e0

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193c:	e7fe      	b.n	800193c <Error_Handler+0x8>
	...

08001940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_MspInit+0x4c>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_MspInit+0x4c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_MspInit+0x4c>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800197e:	2007      	movs	r0, #7
 8001980:	f001 f824 	bl	80029cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <HAL_ADC_MspInit+0x8c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12f      	bne.n	8001a12 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_ADC_MspInit+0x90>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_ADC_MspInit+0x90>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_ADC_MspInit+0x90>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_ADC_MspInit+0x90>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_ADC_MspInit+0x90>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_ADC_MspInit+0x90>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ea:	2301      	movs	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ee:	2303      	movs	r3, #3
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4809      	ldr	r0, [pc, #36]	; (8001a24 <HAL_ADC_MspInit+0x94>)
 80019fe:	f001 f8b9 	bl	8002b74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2012      	movs	r0, #18
 8001a08:	f000 ffeb 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a0c:	2012      	movs	r0, #18
 8001a0e:	f001 f804 	bl	8002a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40012000 	.word	0x40012000
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_TIM_Base_MspInit+0x80>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d116      	bne.n	8001a68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_TIM_Base_MspInit+0x84>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <HAL_TIM_Base_MspInit+0x84>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_TIM_Base_MspInit+0x84>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201d      	movs	r0, #29
 8001a5c:	f000 ffc1 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a60:	201d      	movs	r0, #29
 8001a62:	f000 ffda 	bl	8002a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a66:	e01a      	b.n	8001a9e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_TIM_Base_MspInit+0x88>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d115      	bne.n	8001a9e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_TIM_Base_MspInit+0x84>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_TIM_Base_MspInit+0x84>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_TIM_Base_MspInit+0x84>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	201e      	movs	r0, #30
 8001a94:	f000 ffa5 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a98:	201e      	movs	r0, #30
 8001a9a:	f000 ffbe 	bl	8002a1a <HAL_NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40000800 	.word	0x40000800

08001ab4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <HAL_TIM_MspPostInit+0x68>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d11d      	bne.n	8001b12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_TIM_MspPostInit+0x6c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_TIM_MspPostInit+0x6c>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_TIM_MspPostInit+0x6c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001af2:	2340      	movs	r3, #64	; 0x40
 8001af4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <HAL_TIM_MspPostInit+0x70>)
 8001b0e:	f001 f831 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40000800 	.word	0x40000800
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020400 	.word	0x40020400

08001b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <HAL_UART_MspInit+0x94>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d133      	bne.n	8001bb2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <HAL_UART_MspInit+0x98>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <HAL_UART_MspInit+0x98>)
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_UART_MspInit+0x98>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_UART_MspInit+0x98>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_UART_MspInit+0x98>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_UART_MspInit+0x98>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b82:	230c      	movs	r3, #12
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b92:	2307      	movs	r3, #7
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <HAL_UART_MspInit+0x9c>)
 8001b9e:	f000 ffe9 	bl	8002b74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2026      	movs	r0, #38	; 0x26
 8001ba8:	f000 ff1b 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bac:	2026      	movs	r0, #38	; 0x26
 8001bae:	f000 ff34 	bl	8002a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40004400 	.word	0x40004400
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler+0x4>

08001bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c14:	f000 f97e 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <ADC_IRQHandler+0x10>)
 8001c22:	f000 fa8f 	bl	8002144 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000208 	.word	0x20000208

08001c30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <TIM3_IRQHandler+0x10>)
 8001c36:	f001 ffdd 	bl	8003bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000250 	.word	0x20000250

08001c44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM4_IRQHandler+0x10>)
 8001c4a:	f001 ffd3 	bl	8003bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000298 	.word	0x20000298

08001c58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <USART2_IRQHandler+0x10>)
 8001c5e:	f002 fee1 	bl	8004a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200002e0 	.word	0x200002e0

08001c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
	return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_kill>:

int _kill(int pid, int sig)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c86:	f003 fe39 	bl	80058fc <__errno>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2216      	movs	r2, #22
 8001c8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_exit>:

void _exit (int status)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffe7 	bl	8001c7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cae:	e7fe      	b.n	8001cae <_exit+0x12>

08001cb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e00a      	b.n	8001cd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cc2:	f3af 8000 	nop.w
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	b2ca      	uxtb	r2, r1
 8001cd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dbf0      	blt.n	8001cc2 <_read+0x12>
	}

return len;
 8001ce0:	687b      	ldr	r3, [r7, #4]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e009      	b.n	8001d10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbf1      	blt.n	8001cfc <_write+0x12>
	}
	return len;
 8001d18:	687b      	ldr	r3, [r7, #4]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_close>:

int _close(int file)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
	return -1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_isatty>:

int _isatty(int file)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	return 1;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <_sbrk+0x5c>)
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <_sbrk+0x60>)
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <_sbrk+0x64>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <_sbrk+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d207      	bcs.n	8001dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dbc:	f003 fd9e 	bl	80058fc <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e009      	b.n	8001de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <_sbrk+0x64>)
 8001ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20020000 	.word	0x20020000
 8001dec:	00000400 	.word	0x00000400
 8001df0:	2000035c 	.word	0x2000035c
 8001df4:	20000378 	.word	0x20000378

08001df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e38:	4c0b      	ldr	r4, [pc, #44]	; (8001e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e46:	f7ff ffd7 	bl	8001df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f003 fd5d 	bl	8005908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7ff f885 	bl	8000f5c <main>
  bx  lr    
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001e60:	080090b0 	.word	0x080090b0
  ldr r2, =_sbss
 8001e64:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001e68:	20000374 	.word	0x20000374

08001e6c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <DMA1_Stream0_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_Init+0x40>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_Init+0x40>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_Init+0x40>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 fd97 	bl	80029cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fd4c 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fdaf 	bl	8002a36 <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f000 fd77 	bl	80029e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000010 	.word	0x20000010
 8001f0c:	20000018 	.word	0x20000018
 8001f10:	20000014 	.word	0x20000014

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000018 	.word	0x20000018
 8001f38:	20000360 	.word	0x20000360

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000360 	.word	0x20000360

08001f54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e033      	b.n	8001fd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fd0c 	bl	8001990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f9a:	f023 0302 	bic.w	r3, r3, #2
 8001f9e:	f043 0202 	orr.w	r2, r3, #2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fb3a 	bl	8002620 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f023 0303 	bic.w	r3, r3, #3
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fc2:	e001      	b.n	8001fc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Start+0x1a>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e097      	b.n	8002126 <HAL_ADC_Start+0x14a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d018      	beq.n	800203e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800201c:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_ADC_Start+0x158>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a45      	ldr	r2, [pc, #276]	; (8002138 <HAL_ADC_Start+0x15c>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9a      	lsrs	r2, r3, #18
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002030:	e002      	b.n	8002038 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3b01      	subs	r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f9      	bne.n	8002032 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d15f      	bne.n	800210c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002076:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208a:	d106      	bne.n	800209a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	f023 0206 	bic.w	r2, r3, #6
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	645a      	str	r2, [r3, #68]	; 0x44
 8002098:	e002      	b.n	80020a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020a8:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_ADC_Start+0x160>)
 80020aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10f      	bne.n	80020e2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d129      	bne.n	8002124 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	e020      	b.n	8002124 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_ADC_Start+0x164>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d11b      	bne.n	8002124 <HAL_ADC_Start+0x148>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d114      	bne.n	8002124 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	e00b      	b.n	8002124 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f043 0210 	orr.w	r2, r3, #16
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000010 	.word	0x20000010
 8002138:	431bde83 	.word	0x431bde83
 800213c:	40012300 	.word	0x40012300
 8002140:	40012000 	.word	0x40012000

08002144 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d049      	beq.n	800220e <HAL_ADC_IRQHandler+0xca>
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d046      	beq.n	800220e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d12b      	bne.n	80021fe <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d127      	bne.n	80021fe <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d119      	bne.n	80021fe <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0220 	bic.w	r2, r2, #32
 80021d8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8bd 	bl	800237e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0212 	mvn.w	r2, #18
 800220c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d057      	beq.n	80022d4 <HAL_ADC_IRQHandler+0x190>
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d054      	beq.n	80022d4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d139      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002256:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002268:	2b00      	cmp	r3, #0
 800226a:	d12b      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002276:	2b00      	cmp	r3, #0
 8002278:	d124      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11d      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d119      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800229e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 faa7 	bl	8002818 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 020c 	mvn.w	r2, #12
 80022d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d017      	beq.n	800231a <HAL_ADC_IRQHandler+0x1d6>
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d014      	beq.n	800231a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d10d      	bne.n	800231a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f841 	bl	8002392 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0201 	mvn.w	r2, #1
 8002318:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002328:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d015      	beq.n	800235c <HAL_ADC_IRQHandler+0x218>
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d012      	beq.n	800235c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f043 0202 	orr.w	r2, r3, #2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f06f 0220 	mvn.w	r2, #32
 800234a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f82a 	bl	80023a6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f06f 0220 	mvn.w	r2, #32
 800235a:	601a      	str	r2, [r3, #0]
  }
}
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1c>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e113      	b.n	8002600 <HAL_ADC_ConfigChannel+0x244>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b09      	cmp	r3, #9
 80023e6:	d925      	bls.n	8002434 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68d9      	ldr	r1, [r3, #12]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	3b1e      	subs	r3, #30
 80023fe:	2207      	movs	r2, #7
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43da      	mvns	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	400a      	ands	r2, r1
 800240c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68d9      	ldr	r1, [r3, #12]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	4618      	mov	r0, r3
 8002420:	4603      	mov	r3, r0
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4403      	add	r3, r0
 8002426:	3b1e      	subs	r3, #30
 8002428:	409a      	lsls	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	e022      	b.n	800247a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6919      	ldr	r1, [r3, #16]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	2207      	movs	r2, #7
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	400a      	ands	r2, r1
 8002456:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6919      	ldr	r1, [r3, #16]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	4603      	mov	r3, r0
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4403      	add	r3, r0
 8002470:	409a      	lsls	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b06      	cmp	r3, #6
 8002480:	d824      	bhi.n	80024cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b05      	subs	r3, #5
 8002494:	221f      	movs	r2, #31
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	400a      	ands	r2, r1
 80024a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	3b05      	subs	r3, #5
 80024be:	fa00 f203 	lsl.w	r2, r0, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
 80024ca:	e04c      	b.n	8002566 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d824      	bhi.n	800251e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	3b23      	subs	r3, #35	; 0x23
 80024e6:	221f      	movs	r2, #31
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43da      	mvns	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	400a      	ands	r2, r1
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	4618      	mov	r0, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	3b23      	subs	r3, #35	; 0x23
 8002510:	fa00 f203 	lsl.w	r2, r0, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
 800251c:	e023      	b.n	8002566 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b41      	subs	r3, #65	; 0x41
 8002530:	221f      	movs	r2, #31
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	400a      	ands	r2, r1
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	4618      	mov	r0, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b41      	subs	r3, #65	; 0x41
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_ADC_ConfigChannel+0x250>)
 8002568:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a28      	ldr	r2, [pc, #160]	; (8002610 <HAL_ADC_ConfigChannel+0x254>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d10f      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1d8>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b12      	cmp	r3, #18
 800257a:	d10b      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_ADC_ConfigChannel+0x254>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12b      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x23a>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_ADC_ConfigChannel+0x258>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d003      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0x1f4>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b11      	cmp	r3, #17
 80025ae:	d122      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_ADC_ConfigChannel+0x258>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_ADC_ConfigChannel+0x25c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a11      	ldr	r2, [pc, #68]	; (800261c <HAL_ADC_ConfigChannel+0x260>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	0c9a      	lsrs	r2, r3, #18
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f9      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40012300 	.word	0x40012300
 8002610:	40012000 	.word	0x40012000
 8002614:	10000012 	.word	0x10000012
 8002618:	20000010 	.word	0x20000010
 800261c:	431bde83 	.word	0x431bde83

08002620 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002628:	4b79      	ldr	r3, [pc, #484]	; (8002810 <ADC_Init+0x1f0>)
 800262a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	021a      	lsls	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	4a58      	ldr	r2, [pc, #352]	; (8002814 <ADC_Init+0x1f4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d022      	beq.n	80026fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	e00f      	b.n	800271e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800270c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800271c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0202 	bic.w	r2, r2, #2
 800272c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7e1b      	ldrb	r3, [r3, #24]
 8002738:	005a      	lsls	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800276a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	3b01      	subs	r3, #1
 8002778:	035a      	lsls	r2, r3, #13
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	e007      	b.n	8002794 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002792:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	051a      	lsls	r2, r3, #20
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027d6:	025a      	lsls	r2, r3, #9
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	029a      	lsls	r2, r3, #10
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40012300 	.word	0x40012300
 8002814:	0f000001 	.word	0x0f000001

08002818 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285e:	4a04      	ldr	r2, [pc, #16]	; (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	60d3      	str	r3, [r2, #12]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <__NVIC_GetPriorityGrouping+0x18>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	f003 0307 	and.w	r3, r3, #7
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	db0b      	blt.n	80028ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4907      	ldr	r1, [pc, #28]	; (80028c8 <__NVIC_EnableIRQ+0x38>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2001      	movs	r0, #1
 80028b2:	fa00 f202 	lsl.w	r2, r0, r2
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	; (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	; (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
         );
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002998:	d301      	bcc.n	800299e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299a:	2301      	movs	r3, #1
 800299c:	e00f      	b.n	80029be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <SysTick_Config+0x40>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a6:	210f      	movs	r1, #15
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	f7ff ff8e 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <SysTick_Config+0x40>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <SysTick_Config+0x40>)
 80029b8:	2207      	movs	r2, #7
 80029ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff29 	bl	800282c <__NVIC_SetPriorityGrouping>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f4:	f7ff ff3e 	bl	8002874 <__NVIC_GetPriorityGrouping>
 80029f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	6978      	ldr	r0, [r7, #20]
 8002a00:	f7ff ff8e 	bl	8002920 <NVIC_EncodePriority>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff5d 	bl	80028cc <__NVIC_SetPriority>
}
 8002a12:	bf00      	nop
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	4603      	mov	r3, r0
 8002a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff31 	bl	8002890 <__NVIC_EnableIRQ>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ffa2 	bl	8002988 <SysTick_Config>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff fa6e 	bl	8001f3c <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d008      	beq.n	8002a80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e052      	b.n	8002b26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0216 	bic.w	r2, r2, #22
 8002a8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <HAL_DMA_Abort+0x62>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0208 	bic.w	r2, r2, #8
 8002abe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad0:	e013      	b.n	8002afa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ad2:	f7ff fa33 	bl	8001f3c <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d90c      	bls.n	8002afa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e015      	b.n	8002b26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e4      	bne.n	8002ad2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	223f      	movs	r2, #63	; 0x3f
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d004      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e00c      	b.n	8002b66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2205      	movs	r2, #5
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e159      	b.n	8002e44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b90:	2201      	movs	r2, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	f040 8148 	bne.w	8002e3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d005      	beq.n	8002bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d130      	bne.n	8002c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 0201 	and.w	r2, r3, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d017      	beq.n	8002c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d123      	bne.n	8002cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	08da      	lsrs	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3208      	adds	r2, #8
 8002c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	08da      	lsrs	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3208      	adds	r2, #8
 8002cb2:	69b9      	ldr	r1, [r7, #24]
 8002cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80a2 	beq.w	8002e3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_GPIO_Init+0x2e8>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a56      	ldr	r2, [pc, #344]	; (8002e5c <HAL_GPIO_Init+0x2e8>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b54      	ldr	r3, [pc, #336]	; (8002e5c <HAL_GPIO_Init+0x2e8>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d16:	4a52      	ldr	r2, [pc, #328]	; (8002e60 <HAL_GPIO_Init+0x2ec>)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a49      	ldr	r2, [pc, #292]	; (8002e64 <HAL_GPIO_Init+0x2f0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d019      	beq.n	8002d76 <HAL_GPIO_Init+0x202>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a48      	ldr	r2, [pc, #288]	; (8002e68 <HAL_GPIO_Init+0x2f4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0x1fe>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a47      	ldr	r2, [pc, #284]	; (8002e6c <HAL_GPIO_Init+0x2f8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00d      	beq.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a46      	ldr	r2, [pc, #280]	; (8002e70 <HAL_GPIO_Init+0x2fc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x1f6>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a45      	ldr	r2, [pc, #276]	; (8002e74 <HAL_GPIO_Init+0x300>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_GPIO_Init+0x1f2>
 8002d62:	2304      	movs	r3, #4
 8002d64:	e008      	b.n	8002d78 <HAL_GPIO_Init+0x204>
 8002d66:	2307      	movs	r3, #7
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x204>
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e004      	b.n	8002d78 <HAL_GPIO_Init+0x204>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_Init+0x204>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x204>
 8002d76:	2300      	movs	r3, #0
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f002 0203 	and.w	r2, r2, #3
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4093      	lsls	r3, r2
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d88:	4935      	ldr	r1, [pc, #212]	; (8002e60 <HAL_GPIO_Init+0x2ec>)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d96:	4b38      	ldr	r3, [pc, #224]	; (8002e78 <HAL_GPIO_Init+0x304>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dba:	4a2f      	ldr	r2, [pc, #188]	; (8002e78 <HAL_GPIO_Init+0x304>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc0:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_GPIO_Init+0x304>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de4:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <HAL_GPIO_Init+0x304>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dea:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_GPIO_Init+0x304>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	; (8002e78 <HAL_GPIO_Init+0x304>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <HAL_GPIO_Init+0x304>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e38:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <HAL_GPIO_Init+0x304>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3301      	adds	r3, #1
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	f67f aea2 	bls.w	8002b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40013800 	.word	0x40013800
 8002e64:	40020000 	.word	0x40020000
 8002e68:	40020400 	.word	0x40020400
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40020c00 	.word	0x40020c00
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40013c00 	.word	0x40013c00

08002e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e98:	e003      	b.n	8002ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	041a      	lsls	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e267      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d075      	beq.n	8002fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ece:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eda:	4b85      	ldr	r3, [pc, #532]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d112      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee6:	4b82      	ldr	r3, [pc, #520]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef2:	d10b      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	4b7e      	ldr	r3, [pc, #504]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05b      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x108>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d157      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e242      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_OscConfig+0x74>
 8002f16:	4b76      	ldr	r3, [pc, #472]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a75      	ldr	r2, [pc, #468]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e01d      	b.n	8002f60 <HAL_RCC_OscConfig+0xb0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x98>
 8002f2e:	4b70      	ldr	r3, [pc, #448]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6f      	ldr	r2, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b6d      	ldr	r3, [pc, #436]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6c      	ldr	r2, [pc, #432]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0xb0>
 8002f48:	4b69      	ldr	r3, [pc, #420]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a68      	ldr	r2, [pc, #416]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a65      	ldr	r2, [pc, #404]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe ffe8 	bl	8001f3c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe ffe4 	bl	8001f3c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e207      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b5b      	ldr	r3, [pc, #364]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0xc0>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe ffd4 	bl	8001f3c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe ffd0 	bl	8001f3c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e1f3      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	4b51      	ldr	r3, [pc, #324]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0xe8>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d063      	beq.n	800308e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fc6:	4b4a      	ldr	r3, [pc, #296]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd2:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d11c      	bne.n	8003018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fde:	4b44      	ldr	r3, [pc, #272]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d116      	bne.n	8003018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_OscConfig+0x152>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e1c7      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003002:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4937      	ldr	r1, [pc, #220]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	e03a      	b.n	800308e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003020:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <HAL_RCC_OscConfig+0x244>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe ff89 	bl	8001f3c <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302e:	f7fe ff85 	bl	8001f3c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e1a8      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003040:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304c:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4925      	ldr	r1, [pc, #148]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e015      	b.n	800308e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCC_OscConfig+0x244>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe ff68 	bl	8001f3c <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003070:	f7fe ff64 	bl	8001f3c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e187      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d036      	beq.n	8003108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_RCC_OscConfig+0x248>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe ff48 	bl	8001f3c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe ff44 	bl	8001f3c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e167      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_OscConfig+0x240>)
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x200>
 80030ce:	e01b      	b.n	8003108 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_OscConfig+0x248>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fe ff31 	bl	8001f3c <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030dc:	e00e      	b.n	80030fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030de:	f7fe ff2d 	bl	8001f3c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d907      	bls.n	80030fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e150      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	42470000 	.word	0x42470000
 80030f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	4b88      	ldr	r3, [pc, #544]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80030fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ea      	bne.n	80030de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8097 	beq.w	8003244 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311a:	4b81      	ldr	r3, [pc, #516]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	4b7d      	ldr	r3, [pc, #500]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a7c      	ldr	r2, [pc, #496]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b7a      	ldr	r3, [pc, #488]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4b77      	ldr	r3, [pc, #476]	; (8003324 <HAL_RCC_OscConfig+0x474>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d118      	bne.n	8003184 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003152:	4b74      	ldr	r3, [pc, #464]	; (8003324 <HAL_RCC_OscConfig+0x474>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a73      	ldr	r2, [pc, #460]	; (8003324 <HAL_RCC_OscConfig+0x474>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7fe feed 	bl	8001f3c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7fe fee9 	bl	8001f3c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e10c      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_OscConfig+0x474>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x2ea>
 800318c:	4b64      	ldr	r3, [pc, #400]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	4a63      	ldr	r2, [pc, #396]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	; 0x70
 8003198:	e01c      	b.n	80031d4 <HAL_RCC_OscConfig+0x324>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0x30c>
 80031a2:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	4a5e      	ldr	r2, [pc, #376]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	6713      	str	r3, [r2, #112]	; 0x70
 80031ae:	4b5c      	ldr	r3, [pc, #368]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4a5b      	ldr	r2, [pc, #364]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0x324>
 80031bc:	4b58      	ldr	r3, [pc, #352]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	4a57      	ldr	r2, [pc, #348]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	6713      	str	r3, [r2, #112]	; 0x70
 80031c8:	4b55      	ldr	r3, [pc, #340]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	4a54      	ldr	r2, [pc, #336]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80031ce:	f023 0304 	bic.w	r3, r3, #4
 80031d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fe feae 	bl	8001f3c <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e4:	f7fe feaa 	bl	8001f3c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0cb      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	4b49      	ldr	r3, [pc, #292]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0ee      	beq.n	80031e4 <HAL_RCC_OscConfig+0x334>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7fe fe98 	bl	8001f3c <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7fe fe94 	bl	8001f3c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0b5      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003226:	4b3e      	ldr	r3, [pc, #248]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ee      	bne.n	8003210 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003232:	7dfb      	ldrb	r3, [r7, #23]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b39      	ldr	r3, [pc, #228]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	4a38      	ldr	r2, [pc, #224]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 800323e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003242:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80a1 	beq.w	8003390 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800324e:	4b34      	ldr	r3, [pc, #208]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b08      	cmp	r3, #8
 8003258:	d05c      	beq.n	8003314 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d141      	bne.n	80032e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003262:	4b31      	ldr	r3, [pc, #196]	; (8003328 <HAL_RCC_OscConfig+0x478>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fe68 	bl	8001f3c <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fe64 	bl	8001f3c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e087      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003282:	4b27      	ldr	r3, [pc, #156]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	3b01      	subs	r3, #1
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	491b      	ldr	r1, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_RCC_OscConfig+0x478>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe fe3d 	bl	8001f3c <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fe fe39 	bl	8001f3c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e05c      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x416>
 80032e4:	e054      	b.n	8003390 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_RCC_OscConfig+0x478>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fe26 	bl	8001f3c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fe fe22 	bl	8001f3c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e045      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_RCC_OscConfig+0x470>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x444>
 8003312:	e03d      	b.n	8003390 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e038      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
 8003320:	40023800 	.word	0x40023800
 8003324:	40007000 	.word	0x40007000
 8003328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x4ec>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d028      	beq.n	800338c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d121      	bne.n	800338c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d11a      	bne.n	800338c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800335c:	4013      	ands	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003364:	4293      	cmp	r3, r2
 8003366:	d111      	bne.n	800338c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	3b01      	subs	r3, #1
 8003376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d107      	bne.n	800338c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800

080033a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0cc      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b4:	4b68      	ldr	r3, [pc, #416]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d90c      	bls.n	80033dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b65      	ldr	r3, [pc, #404]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b63      	ldr	r3, [pc, #396]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b8      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d020      	beq.n	800342a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a58      	ldr	r2, [pc, #352]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003418:	4b50      	ldr	r3, [pc, #320]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	494d      	ldr	r1, [pc, #308]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d044      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d119      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e07f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d003      	beq.n	800345e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345a:	2b03      	cmp	r3, #3
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345e:	4b3f      	ldr	r3, [pc, #252]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e067      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347e:	4b37      	ldr	r3, [pc, #220]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4934      	ldr	r1, [pc, #208]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003490:	f7fe fd54 	bl	8001f3c <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	e00a      	b.n	80034ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f7fe fd50 	bl	8001f3c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e04f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	4b2b      	ldr	r3, [pc, #172]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 020c 	and.w	r2, r3, #12
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	429a      	cmp	r2, r3
 80034be:	d1eb      	bne.n	8003498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d20c      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b22      	ldr	r3, [pc, #136]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e032      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4916      	ldr	r1, [pc, #88]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	490e      	ldr	r1, [pc, #56]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003526:	f000 f821 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800352a:	4602      	mov	r2, r0
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	490a      	ldr	r1, [pc, #40]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	5ccb      	ldrb	r3, [r1, r3]
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe fcb4 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023c00 	.word	0x40023c00
 800355c:	40023800 	.word	0x40023800
 8003560:	08008c74 	.word	0x08008c74
 8003564:	20000010 	.word	0x20000010
 8003568:	20000014 	.word	0x20000014

0800356c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003570:	b094      	sub	sp, #80	; 0x50
 8003572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	647b      	str	r3, [r7, #68]	; 0x44
 8003578:	2300      	movs	r3, #0
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357c:	2300      	movs	r3, #0
 800357e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003584:	4b79      	ldr	r3, [pc, #484]	; (800376c <HAL_RCC_GetSysClockFreq+0x200>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d00d      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x40>
 8003590:	2b08      	cmp	r3, #8
 8003592:	f200 80e1 	bhi.w	8003758 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x34>
 800359a:	2b04      	cmp	r3, #4
 800359c:	d003      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800359e:	e0db      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a0:	4b73      	ldr	r3, [pc, #460]	; (8003770 <HAL_RCC_GetSysClockFreq+0x204>)
 80035a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035a4:	e0db      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035a6:	4b73      	ldr	r3, [pc, #460]	; (8003774 <HAL_RCC_GetSysClockFreq+0x208>)
 80035a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035aa:	e0d8      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ac:	4b6f      	ldr	r3, [pc, #444]	; (800376c <HAL_RCC_GetSysClockFreq+0x200>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b6:	4b6d      	ldr	r3, [pc, #436]	; (800376c <HAL_RCC_GetSysClockFreq+0x200>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d063      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c2:	4b6a      	ldr	r3, [pc, #424]	; (800376c <HAL_RCC_GetSysClockFreq+0x200>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	099b      	lsrs	r3, r3, #6
 80035c8:	2200      	movs	r2, #0
 80035ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80035cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
 80035d6:	2300      	movs	r3, #0
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
 80035da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035de:	4622      	mov	r2, r4
 80035e0:	462b      	mov	r3, r5
 80035e2:	f04f 0000 	mov.w	r0, #0
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	0159      	lsls	r1, r3, #5
 80035ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f0:	0150      	lsls	r0, r2, #5
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4621      	mov	r1, r4
 80035f8:	1a51      	subs	r1, r2, r1
 80035fa:	6139      	str	r1, [r7, #16]
 80035fc:	4629      	mov	r1, r5
 80035fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003610:	4659      	mov	r1, fp
 8003612:	018b      	lsls	r3, r1, #6
 8003614:	4651      	mov	r1, sl
 8003616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800361a:	4651      	mov	r1, sl
 800361c:	018a      	lsls	r2, r1, #6
 800361e:	4651      	mov	r1, sl
 8003620:	ebb2 0801 	subs.w	r8, r2, r1
 8003624:	4659      	mov	r1, fp
 8003626:	eb63 0901 	sbc.w	r9, r3, r1
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800363a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800363e:	4690      	mov	r8, r2
 8003640:	4699      	mov	r9, r3
 8003642:	4623      	mov	r3, r4
 8003644:	eb18 0303 	adds.w	r3, r8, r3
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	462b      	mov	r3, r5
 800364c:	eb49 0303 	adc.w	r3, r9, r3
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800365e:	4629      	mov	r1, r5
 8003660:	024b      	lsls	r3, r1, #9
 8003662:	4621      	mov	r1, r4
 8003664:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003668:	4621      	mov	r1, r4
 800366a:	024a      	lsls	r2, r1, #9
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003672:	2200      	movs	r2, #0
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
 8003676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003678:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800367c:	f7fd faec 	bl	8000c58 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4613      	mov	r3, r2
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003688:	e058      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368a:	4b38      	ldr	r3, [pc, #224]	; (800376c <HAL_RCC_GetSysClockFreq+0x200>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	099b      	lsrs	r3, r3, #6
 8003690:	2200      	movs	r2, #0
 8003692:	4618      	mov	r0, r3
 8003694:	4611      	mov	r1, r2
 8003696:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	2300      	movs	r3, #0
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036a4:	4642      	mov	r2, r8
 80036a6:	464b      	mov	r3, r9
 80036a8:	f04f 0000 	mov.w	r0, #0
 80036ac:	f04f 0100 	mov.w	r1, #0
 80036b0:	0159      	lsls	r1, r3, #5
 80036b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b6:	0150      	lsls	r0, r2, #5
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4641      	mov	r1, r8
 80036be:	ebb2 0a01 	subs.w	sl, r2, r1
 80036c2:	4649      	mov	r1, r9
 80036c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036dc:	ebb2 040a 	subs.w	r4, r2, sl
 80036e0:	eb63 050b 	sbc.w	r5, r3, fp
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	00eb      	lsls	r3, r5, #3
 80036ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f2:	00e2      	lsls	r2, r4, #3
 80036f4:	4614      	mov	r4, r2
 80036f6:	461d      	mov	r5, r3
 80036f8:	4643      	mov	r3, r8
 80036fa:	18e3      	adds	r3, r4, r3
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	464b      	mov	r3, r9
 8003700:	eb45 0303 	adc.w	r3, r5, r3
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003712:	4629      	mov	r1, r5
 8003714:	028b      	lsls	r3, r1, #10
 8003716:	4621      	mov	r1, r4
 8003718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800371c:	4621      	mov	r1, r4
 800371e:	028a      	lsls	r2, r1, #10
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003726:	2200      	movs	r2, #0
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	61fa      	str	r2, [r7, #28]
 800372c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003730:	f7fd fa92 	bl	8000c58 <__aeabi_uldivmod>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4613      	mov	r3, r2
 800373a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_GetSysClockFreq+0x200>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	3301      	adds	r3, #1
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800374c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800374e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003756:	e002      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_RCC_GetSysClockFreq+0x204>)
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800375c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003760:	4618      	mov	r0, r3
 8003762:	3750      	adds	r7, #80	; 0x50
 8003764:	46bd      	mov	sp, r7
 8003766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800
 8003770:	00f42400 	.word	0x00f42400
 8003774:	007a1200 	.word	0x007a1200

08003778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_RCC_GetHCLKFreq+0x14>)
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000010 	.word	0x20000010

08003790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003794:	f7ff fff0 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	0a9b      	lsrs	r3, r3, #10
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4903      	ldr	r1, [pc, #12]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40023800 	.word	0x40023800
 80037b4:	08008c84 	.word	0x08008c84

080037b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037bc:	f7ff ffdc 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0b5b      	lsrs	r3, r3, #13
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4903      	ldr	r1, [pc, #12]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800
 80037dc:	08008c84 	.word	0x08008c84

080037e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e041      	b.n	8003876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fe f90e 	bl	8001a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f000 fca2 	bl	8004168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d001      	beq.n	8003898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e044      	b.n	8003922 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <HAL_TIM_Base_Start_IT+0xb0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d018      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x6c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d013      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x6c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <HAL_TIM_Base_Start_IT+0xb4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00e      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x6c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a19      	ldr	r2, [pc, #100]	; (8003938 <HAL_TIM_Base_Start_IT+0xb8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x6c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a17      	ldr	r2, [pc, #92]	; (800393c <HAL_TIM_Base_Start_IT+0xbc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x6c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a16      	ldr	r2, [pc, #88]	; (8003940 <HAL_TIM_Base_Start_IT+0xc0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d111      	bne.n	8003910 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d010      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390e:	e007      	b.n	8003920 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40010000 	.word	0x40010000
 8003934:	40000400 	.word	0x40000400
 8003938:	40000800 	.word	0x40000800
 800393c:	40000c00 	.word	0x40000c00
 8003940:	40014000 	.word	0x40014000

08003944 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e041      	b.n	80039da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f839 	bl	80039e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f000 fbf0 	bl	8004168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_TIM_PWM_Start_IT+0x28>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e022      	b.n	8003a66 <HAL_TIM_PWM_Start_IT+0x6e>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d109      	bne.n	8003a3a <HAL_TIM_PWM_Start_IT+0x42>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	e015      	b.n	8003a66 <HAL_TIM_PWM_Start_IT+0x6e>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d109      	bne.n	8003a54 <HAL_TIM_PWM_Start_IT+0x5c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e008      	b.n	8003a66 <HAL_TIM_PWM_Start_IT+0x6e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0b3      	b.n	8003bd6 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_PWM_Start_IT+0x86>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a7c:	e013      	b.n	8003aa6 <HAL_TIM_PWM_Start_IT+0xae>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_PWM_Start_IT+0x96>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8c:	e00b      	b.n	8003aa6 <HAL_TIM_PWM_Start_IT+0xae>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_PWM_Start_IT+0xa6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a9c:	e003      	b.n	8003aa6 <HAL_TIM_PWM_Start_IT+0xae>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b0c      	cmp	r3, #12
 8003aaa:	d841      	bhi.n	8003b30 <HAL_TIM_PWM_Start_IT+0x138>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ae9 	.word	0x08003ae9
 8003ab8:	08003b31 	.word	0x08003b31
 8003abc:	08003b31 	.word	0x08003b31
 8003ac0:	08003b31 	.word	0x08003b31
 8003ac4:	08003afb 	.word	0x08003afb
 8003ac8:	08003b31 	.word	0x08003b31
 8003acc:	08003b31 	.word	0x08003b31
 8003ad0:	08003b31 	.word	0x08003b31
 8003ad4:	08003b0d 	.word	0x08003b0d
 8003ad8:	08003b31 	.word	0x08003b31
 8003adc:	08003b31 	.word	0x08003b31
 8003ae0:	08003b31 	.word	0x08003b31
 8003ae4:	08003b1f 	.word	0x08003b1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0202 	orr.w	r2, r2, #2
 8003af6:	60da      	str	r2, [r3, #12]
      break;
 8003af8:	e01d      	b.n	8003b36 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0204 	orr.w	r2, r2, #4
 8003b08:	60da      	str	r2, [r3, #12]
      break;
 8003b0a:	e014      	b.n	8003b36 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0208 	orr.w	r2, r2, #8
 8003b1a:	60da      	str	r2, [r3, #12]
      break;
 8003b1c:	e00b      	b.n	8003b36 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0210 	orr.w	r2, r2, #16
 8003b2c:	60da      	str	r2, [r3, #12]
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d14b      	bne.n	8003bd4 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2201      	movs	r2, #1
 8003b42:	6839      	ldr	r1, [r7, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fdb5 	bl	80046b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d107      	bne.n	8003b64 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1d      	ldr	r2, [pc, #116]	; (8003be0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d018      	beq.n	8003ba0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b76:	d013      	beq.n	8003ba0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a16      	ldr	r2, [pc, #88]	; (8003bec <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d111      	bne.n	8003bc4 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d010      	beq.n	8003bd4 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc2:	e007      	b.n	8003bd4 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40014000 	.word	0x40014000

08003bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0202 	mvn.w	r2, #2
 8003c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa77 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa69 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fa7a 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d122      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0204 	mvn.w	r2, #4
 8003c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fa4d 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8003c90:	e005      	b.n	8003c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fa3f 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fa50 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d122      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0208 	mvn.w	r2, #8
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2204      	movs	r2, #4
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fa23 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa15 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fa26 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d122      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d11b      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0210 	mvn.w	r2, #16
 8003d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2208      	movs	r2, #8
 8003d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f9f9 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8003d38:	e005      	b.n	8003d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f9eb 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f9fc 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d10e      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d107      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0201 	mvn.w	r2, #1
 8003d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd fca4 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	2b80      	cmp	r3, #128	; 0x80
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d107      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fd26 	bl	80047f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b40      	cmp	r3, #64	; 0x40
 8003db0:	d10e      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d107      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9c1 	bl	8004152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d10e      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d107      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0220 	mvn.w	r2, #32
 8003df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fcf0 	bl	80047dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0ae      	b.n	8003f80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	f200 809f 	bhi.w	8003f70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e32:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003f71 	.word	0x08003f71
 8003e40:	08003f71 	.word	0x08003f71
 8003e44:	08003f71 	.word	0x08003f71
 8003e48:	08003ead 	.word	0x08003ead
 8003e4c:	08003f71 	.word	0x08003f71
 8003e50:	08003f71 	.word	0x08003f71
 8003e54:	08003f71 	.word	0x08003f71
 8003e58:	08003eef 	.word	0x08003eef
 8003e5c:	08003f71 	.word	0x08003f71
 8003e60:	08003f71 	.word	0x08003f71
 8003e64:	08003f71 	.word	0x08003f71
 8003e68:	08003f2f 	.word	0x08003f2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f9f8 	bl	8004268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0208 	orr.w	r2, r2, #8
 8003e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6999      	ldr	r1, [r3, #24]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	619a      	str	r2, [r3, #24]
      break;
 8003eaa:	e064      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fa3e 	bl	8004334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6999      	ldr	r1, [r3, #24]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	021a      	lsls	r2, r3, #8
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	619a      	str	r2, [r3, #24]
      break;
 8003eec:	e043      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fa89 	bl	800440c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0208 	orr.w	r2, r2, #8
 8003f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0204 	bic.w	r2, r2, #4
 8003f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	61da      	str	r2, [r3, #28]
      break;
 8003f2c:	e023      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fad3 	bl	80044e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69d9      	ldr	r1, [r3, #28]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	021a      	lsls	r2, r3, #8
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	61da      	str	r2, [r3, #28]
      break;
 8003f6e:	e002      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
      break;
 8003f74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e0b4      	b.n	800410e <HAL_TIM_ConfigClockSource+0x186>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fdc:	d03e      	beq.n	800405c <HAL_TIM_ConfigClockSource+0xd4>
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	f200 8087 	bhi.w	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fea:	f000 8086 	beq.w	80040fa <HAL_TIM_ConfigClockSource+0x172>
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff2:	d87f      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b70      	cmp	r3, #112	; 0x70
 8003ff6:	d01a      	beq.n	800402e <HAL_TIM_ConfigClockSource+0xa6>
 8003ff8:	2b70      	cmp	r3, #112	; 0x70
 8003ffa:	d87b      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b60      	cmp	r3, #96	; 0x60
 8003ffe:	d050      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004000:	2b60      	cmp	r3, #96	; 0x60
 8004002:	d877      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b50      	cmp	r3, #80	; 0x50
 8004006:	d03c      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0xfa>
 8004008:	2b50      	cmp	r3, #80	; 0x50
 800400a:	d873      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b40      	cmp	r3, #64	; 0x40
 800400e:	d058      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d86f      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b30      	cmp	r3, #48	; 0x30
 8004016:	d064      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004018:	2b30      	cmp	r3, #48	; 0x30
 800401a:	d86b      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b20      	cmp	r3, #32
 800401e:	d060      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004020:	2b20      	cmp	r3, #32
 8004022:	d867      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d05c      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004028:	2b10      	cmp	r3, #16
 800402a:	d05a      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15a>
 800402c:	e062      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6899      	ldr	r1, [r3, #8]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f000 fb19 	bl	8004674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	609a      	str	r2, [r3, #8]
      break;
 800405a:	e04f      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6899      	ldr	r1, [r3, #8]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f000 fb02 	bl	8004674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800407e:	609a      	str	r2, [r3, #8]
      break;
 8004080:	e03c      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	461a      	mov	r2, r3
 8004090:	f000 fa76 	bl	8004580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2150      	movs	r1, #80	; 0x50
 800409a:	4618      	mov	r0, r3
 800409c:	f000 facf 	bl	800463e <TIM_ITRx_SetConfig>
      break;
 80040a0:	e02c      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f000 fa95 	bl	80045de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2160      	movs	r1, #96	; 0x60
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fabf 	bl	800463e <TIM_ITRx_SetConfig>
      break;
 80040c0:	e01c      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6859      	ldr	r1, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f000 fa56 	bl	8004580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2140      	movs	r1, #64	; 0x40
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 faaf 	bl	800463e <TIM_ITRx_SetConfig>
      break;
 80040e0:	e00c      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4619      	mov	r1, r3
 80040ec:	4610      	mov	r0, r2
 80040ee:	f000 faa6 	bl	800463e <TIM_ITRx_SetConfig>
      break;
 80040f2:	e003      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
      break;
 80040f8:	e000      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a34      	ldr	r2, [pc, #208]	; (800424c <TIM_Base_SetConfig+0xe4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d00f      	beq.n	80041a0 <TIM_Base_SetConfig+0x38>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004186:	d00b      	beq.n	80041a0 <TIM_Base_SetConfig+0x38>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a31      	ldr	r2, [pc, #196]	; (8004250 <TIM_Base_SetConfig+0xe8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d007      	beq.n	80041a0 <TIM_Base_SetConfig+0x38>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a30      	ldr	r2, [pc, #192]	; (8004254 <TIM_Base_SetConfig+0xec>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_Base_SetConfig+0x38>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <TIM_Base_SetConfig+0xf0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d108      	bne.n	80041b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a25      	ldr	r2, [pc, #148]	; (800424c <TIM_Base_SetConfig+0xe4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d01b      	beq.n	80041f2 <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d017      	beq.n	80041f2 <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a22      	ldr	r2, [pc, #136]	; (8004250 <TIM_Base_SetConfig+0xe8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a21      	ldr	r2, [pc, #132]	; (8004254 <TIM_Base_SetConfig+0xec>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00f      	beq.n	80041f2 <TIM_Base_SetConfig+0x8a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a20      	ldr	r2, [pc, #128]	; (8004258 <TIM_Base_SetConfig+0xf0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_Base_SetConfig+0x8a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1f      	ldr	r2, [pc, #124]	; (800425c <TIM_Base_SetConfig+0xf4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_Base_SetConfig+0x8a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <TIM_Base_SetConfig+0xf8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_Base_SetConfig+0x8a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <TIM_Base_SetConfig+0xfc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d108      	bne.n	8004204 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a08      	ldr	r2, [pc, #32]	; (800424c <TIM_Base_SetConfig+0xe4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d103      	bne.n	8004238 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	615a      	str	r2, [r3, #20]
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40014000 	.word	0x40014000
 8004260:	40014400 	.word	0x40014400
 8004264:	40014800 	.word	0x40014800

08004268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 0302 	bic.w	r3, r3, #2
 80042b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <TIM_OC1_SetConfig+0xc8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d10c      	bne.n	80042de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0308 	bic.w	r3, r3, #8
 80042ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a13      	ldr	r2, [pc, #76]	; (8004330 <TIM_OC1_SetConfig+0xc8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d111      	bne.n	800430a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	621a      	str	r2, [r3, #32]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40010000 	.word	0x40010000

08004334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0210 	bic.w	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0320 	bic.w	r3, r3, #32
 800437e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a1e      	ldr	r2, [pc, #120]	; (8004408 <TIM_OC2_SetConfig+0xd4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10d      	bne.n	80043b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a15      	ldr	r2, [pc, #84]	; (8004408 <TIM_OC2_SetConfig+0xd4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d113      	bne.n	80043e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000

0800440c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1d      	ldr	r2, [pc, #116]	; (80044dc <TIM_OC3_SetConfig+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d10d      	bne.n	8004486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <TIM_OC3_SetConfig+0xd0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d113      	bne.n	80044b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800449c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40010000 	.word	0x40010000

080044e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800452a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	031b      	lsls	r3, r3, #12
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a10      	ldr	r2, [pc, #64]	; (800457c <TIM_OC4_SetConfig+0x9c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d109      	bne.n	8004554 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	019b      	lsls	r3, r3, #6
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40010000 	.word	0x40010000

08004580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0201 	bic.w	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f023 030a 	bic.w	r3, r3, #10
 80045bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045de:	b480      	push	{r7}
 80045e0:	b087      	sub	sp, #28
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0210 	bic.w	r2, r3, #16
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	031b      	lsls	r3, r3, #12
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800461a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800463e:	b480      	push	{r7}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	f043 0307 	orr.w	r3, r3, #7
 8004660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800468e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	021a      	lsls	r2, r3, #8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	431a      	orrs	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4313      	orrs	r3, r2
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	609a      	str	r2, [r3, #8]
}
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2201      	movs	r2, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	401a      	ands	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e050      	b.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d018      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004764:	d013      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d10c      	bne.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4313      	orrs	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800
 80047d4:	40000c00 	.word	0x40000c00
 80047d8:	40014000 	.word	0x40014000

080047dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e03f      	b.n	8004896 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd f97c 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fddf 	bl	800540c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800487c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b08a      	sub	sp, #40	; 0x28
 80048a2:	af02      	add	r7, sp, #8
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d17c      	bne.n	80049b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_UART_Transmit+0x2c>
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e075      	b.n	80049ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Transmit+0x3e>
 80048d8:	2302      	movs	r3, #2
 80048da:	e06e      	b.n	80049ba <HAL_UART_Transmit+0x11c>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2221      	movs	r2, #33	; 0x21
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048f2:	f7fd fb23 	bl	8001f3c <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	88fa      	ldrh	r2, [r7, #6]
 8004902:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490c:	d108      	bne.n	8004920 <HAL_UART_Transmit+0x82>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d104      	bne.n	8004920 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e003      	b.n	8004928 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004930:	e02a      	b.n	8004988 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2200      	movs	r2, #0
 800493a:	2180      	movs	r1, #128	; 0x80
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fb1f 	bl	8004f80 <UART_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e036      	b.n	80049ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	3302      	adds	r3, #2
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	e007      	b.n	800497a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	3301      	adds	r3, #1
 8004978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1cf      	bne.n	8004932 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2200      	movs	r2, #0
 800499a:	2140      	movs	r1, #64	; 0x40
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 faef 	bl	8004f80 <UART_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e006      	b.n	80049ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	4613      	mov	r3, r2
 80049ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d11d      	bne.n	8004a18 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_UART_Receive_IT+0x26>
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e016      	b.n	8004a1a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Receive_IT+0x38>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e00f      	b.n	8004a1a <HAL_UART_Receive_IT+0x58>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fb24 	bl	800505c <UART_Start_Receive_IT>
 8004a14:	4603      	mov	r3, r0
 8004a16:	e000      	b.n	8004a1a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b0ba      	sub	sp, #232	; 0xe8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10f      	bne.n	8004a8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <HAL_UART_IRQHandler+0x66>
 8004a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fc07 	bl	8005296 <UART_Receive_IT>
      return;
 8004a88:	e256      	b.n	8004f38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80de 	beq.w	8004c50 <HAL_UART_IRQHandler+0x22c>
 8004a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80d1 	beq.w	8004c50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xae>
 8004aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f043 0201 	orr.w	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <HAL_UART_IRQHandler+0xd2>
 8004ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f043 0202 	orr.w	r2, r3, #2
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_UART_IRQHandler+0xf6>
 8004b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0204 	orr.w	r2, r3, #4
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d011      	beq.n	8004b4a <HAL_UART_IRQHandler+0x126>
 8004b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d105      	bne.n	8004b3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f043 0208 	orr.w	r2, r3, #8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 81ed 	beq.w	8004f2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_UART_IRQHandler+0x14e>
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fb92 	bl	8005296 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	bf0c      	ite	eq
 8004b80:	2301      	moveq	r3, #1
 8004b82:	2300      	movne	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <HAL_UART_IRQHandler+0x17a>
 8004b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d04f      	beq.n	8004c3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa9a 	bl	80050d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d141      	bne.n	8004c36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3314      	adds	r3, #20
 8004bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3314      	adds	r3, #20
 8004bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1d9      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d013      	beq.n	8004c2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	4a7d      	ldr	r2, [pc, #500]	; (8004e00 <HAL_UART_IRQHandler+0x3dc>)
 8004c0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fd ff8b 	bl	8002b2e <HAL_DMA_Abort_IT>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d016      	beq.n	8004c4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2c:	e00e      	b.n	8004c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f990 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	e00a      	b.n	8004c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f98c 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	e006      	b.n	8004c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f988 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c4a:	e170      	b.n	8004f2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	bf00      	nop
    return;
 8004c4e:	e16e      	b.n	8004f2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	f040 814a 	bne.w	8004eee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8143 	beq.w	8004eee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 813c 	beq.w	8004eee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	f040 80b4 	bne.w	8004e04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ca8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8140 	beq.w	8004f32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	f080 8139 	bcs.w	8004f32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd2:	f000 8088 	beq.w	8004de6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1d9      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3314      	adds	r3, #20
 8004d28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3314      	adds	r3, #20
 8004d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e1      	bne.n	8004d22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3314      	adds	r3, #20
 8004d64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3314      	adds	r3, #20
 8004d7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e3      	bne.n	8004d5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db6:	f023 0310 	bic.w	r3, r3, #16
 8004dba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004dc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e3      	bne.n	8004da4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fd fe34 	bl	8002a4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f8b6 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dfc:	e099      	b.n	8004f32 <HAL_UART_IRQHandler+0x50e>
 8004dfe:	bf00      	nop
 8004e00:	0800519f 	.word	0x0800519f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 808b 	beq.w	8004f36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8086 	beq.w	8004f36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e4e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e3      	bne.n	8004e2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3314      	adds	r3, #20
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	623b      	str	r3, [r7, #32]
   return(result);
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3314      	adds	r3, #20
 8004e82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e86:	633a      	str	r2, [r7, #48]	; 0x30
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e3      	bne.n	8004e62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330c      	adds	r3, #12
 8004eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0310 	bic.w	r3, r3, #16
 8004ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ecc:	61fa      	str	r2, [r7, #28]
 8004ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	69b9      	ldr	r1, [r7, #24]
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e3      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f83e 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eec:	e023      	b.n	8004f36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_UART_IRQHandler+0x4ea>
 8004efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f95d 	bl	80051c6 <UART_Transmit_IT>
    return;
 8004f0c:	e014      	b.n	8004f38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00e      	beq.n	8004f38 <HAL_UART_IRQHandler+0x514>
 8004f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f99d 	bl	8005266 <UART_EndTransmit_IT>
    return;
 8004f2c:	e004      	b.n	8004f38 <HAL_UART_IRQHandler+0x514>
    return;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <HAL_UART_IRQHandler+0x514>
      return;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <HAL_UART_IRQHandler+0x514>
      return;
 8004f36:	bf00      	nop
  }
}
 8004f38:	37e8      	adds	r7, #232	; 0xe8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop

08004f40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b090      	sub	sp, #64	; 0x40
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f90:	e050      	b.n	8005034 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f98:	d04c      	beq.n	8005034 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa0:	f7fc ffcc 	bl	8001f3c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d241      	bcs.n	8005034 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fd0:	637a      	str	r2, [r7, #52]	; 0x34
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3314      	adds	r3, #20
 8004fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3314      	adds	r3, #20
 8005002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005004:	623a      	str	r2, [r7, #32]
 8005006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	69f9      	ldr	r1, [r7, #28]
 800500a:	6a3a      	ldr	r2, [r7, #32]
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	61bb      	str	r3, [r7, #24]
   return(result);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e5      	bne.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e00f      	b.n	8005054 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4013      	ands	r3, r2
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	429a      	cmp	r2, r3
 8005050:	d09f      	beq.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3740      	adds	r7, #64	; 0x40
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	88fa      	ldrh	r2, [r7, #6]
 800507a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2222      	movs	r2, #34	; 0x22
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0220 	orr.w	r2, r2, #32
 80050c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b095      	sub	sp, #84	; 0x54
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005100:	643a      	str	r2, [r7, #64]	; 0x40
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e5      	bne.n	80050e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3314      	adds	r3, #20
 800511a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	61fb      	str	r3, [r7, #28]
   return(result);
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	64bb      	str	r3, [r7, #72]	; 0x48
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3314      	adds	r3, #20
 8005132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800513a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	2b01      	cmp	r3, #1
 800514e:	d119      	bne.n	8005184 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	330c      	adds	r3, #12
 8005156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f023 0310 	bic.w	r3, r3, #16
 8005166:	647b      	str	r3, [r7, #68]	; 0x44
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005170:	61ba      	str	r2, [r7, #24]
 8005172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	6979      	ldr	r1, [r7, #20]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	613b      	str	r3, [r7, #16]
   return(result);
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e5      	bne.n	8005150 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005192:	bf00      	nop
 8005194:	3754      	adds	r7, #84	; 0x54
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff fecb 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b21      	cmp	r3, #33	; 0x21
 80051d8:	d13e      	bne.n	8005258 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e2:	d114      	bne.n	800520e <UART_Transmit_IT+0x48>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d110      	bne.n	800520e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005200:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	1c9a      	adds	r2, r3, #2
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	621a      	str	r2, [r3, #32]
 800520c:	e008      	b.n	8005220 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	1c59      	adds	r1, r3, #1
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6211      	str	r1, [r2, #32]
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29b      	uxth	r3, r3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4619      	mov	r1, r3
 800522e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10f      	bne.n	8005254 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005242:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005252:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	e000      	b.n	800525a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800527c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fe5a 	bl	8004f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b08c      	sub	sp, #48	; 0x30
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b22      	cmp	r3, #34	; 0x22
 80052a8:	f040 80ab 	bne.w	8005402 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b4:	d117      	bne.n	80052e6 <UART_Receive_IT+0x50>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d113      	bne.n	80052e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	1c9a      	adds	r2, r3, #2
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28
 80052e4:	e026      	b.n	8005334 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f8:	d007      	beq.n	800530a <UART_Receive_IT+0x74>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <UART_Receive_IT+0x82>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e008      	b.n	800532a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005324:	b2da      	uxtb	r2, r3
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29b      	uxth	r3, r3
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	4619      	mov	r1, r3
 8005342:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005344:	2b00      	cmp	r3, #0
 8005346:	d15a      	bne.n	80053fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0220 	bic.w	r2, r2, #32
 8005356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005366:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	2b01      	cmp	r3, #1
 8005386:	d135      	bne.n	80053f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	330c      	adds	r3, #12
 8005394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	613b      	str	r3, [r7, #16]
   return(result);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f023 0310 	bic.w	r3, r3, #16
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ae:	623a      	str	r2, [r7, #32]
 80053b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	69f9      	ldr	r1, [r7, #28]
 80053b4:	6a3a      	ldr	r2, [r7, #32]
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e5      	bne.n	800538e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d10a      	bne.n	80053e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fdbb 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
 80053f2:	e002      	b.n	80053fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7fc fa41 	bl	800187c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e002      	b.n	8005404 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	e000      	b.n	8005404 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005402:	2302      	movs	r3, #2
  }
}
 8005404:	4618      	mov	r0, r3
 8005406:	3730      	adds	r7, #48	; 0x30
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800540c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005410:	b0c0      	sub	sp, #256	; 0x100
 8005412:	af00      	add	r7, sp, #0
 8005414:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005428:	68d9      	ldr	r1, [r3, #12]
 800542a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	ea40 0301 	orr.w	r3, r0, r1
 8005434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	431a      	orrs	r2, r3
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	431a      	orrs	r2, r3
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005464:	f021 010c 	bic.w	r1, r1, #12
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005472:	430b      	orrs	r3, r1
 8005474:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005486:	6999      	ldr	r1, [r3, #24]
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	ea40 0301 	orr.w	r3, r0, r1
 8005492:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b8f      	ldr	r3, [pc, #572]	; (80056d8 <UART_SetConfig+0x2cc>)
 800549c:	429a      	cmp	r2, r3
 800549e:	d005      	beq.n	80054ac <UART_SetConfig+0xa0>
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b8d      	ldr	r3, [pc, #564]	; (80056dc <UART_SetConfig+0x2d0>)
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d104      	bne.n	80054b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054ac:	f7fe f984 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 80054b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054b4:	e003      	b.n	80054be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054b6:	f7fe f96b 	bl	8003790 <HAL_RCC_GetPCLK1Freq>
 80054ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c8:	f040 810c 	bne.w	80056e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054de:	4622      	mov	r2, r4
 80054e0:	462b      	mov	r3, r5
 80054e2:	1891      	adds	r1, r2, r2
 80054e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80054e6:	415b      	adcs	r3, r3
 80054e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054ee:	4621      	mov	r1, r4
 80054f0:	eb12 0801 	adds.w	r8, r2, r1
 80054f4:	4629      	mov	r1, r5
 80054f6:	eb43 0901 	adc.w	r9, r3, r1
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800550a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800550e:	4690      	mov	r8, r2
 8005510:	4699      	mov	r9, r3
 8005512:	4623      	mov	r3, r4
 8005514:	eb18 0303 	adds.w	r3, r8, r3
 8005518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800551c:	462b      	mov	r3, r5
 800551e:	eb49 0303 	adc.w	r3, r9, r3
 8005522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005532:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005536:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800553a:	460b      	mov	r3, r1
 800553c:	18db      	adds	r3, r3, r3
 800553e:	653b      	str	r3, [r7, #80]	; 0x50
 8005540:	4613      	mov	r3, r2
 8005542:	eb42 0303 	adc.w	r3, r2, r3
 8005546:	657b      	str	r3, [r7, #84]	; 0x54
 8005548:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800554c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005550:	f7fb fb82 	bl	8000c58 <__aeabi_uldivmod>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4b61      	ldr	r3, [pc, #388]	; (80056e0 <UART_SetConfig+0x2d4>)
 800555a:	fba3 2302 	umull	r2, r3, r3, r2
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	011c      	lsls	r4, r3, #4
 8005562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005566:	2200      	movs	r2, #0
 8005568:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800556c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005570:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005574:	4642      	mov	r2, r8
 8005576:	464b      	mov	r3, r9
 8005578:	1891      	adds	r1, r2, r2
 800557a:	64b9      	str	r1, [r7, #72]	; 0x48
 800557c:	415b      	adcs	r3, r3
 800557e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005580:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005584:	4641      	mov	r1, r8
 8005586:	eb12 0a01 	adds.w	sl, r2, r1
 800558a:	4649      	mov	r1, r9
 800558c:	eb43 0b01 	adc.w	fp, r3, r1
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800559c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a4:	4692      	mov	sl, r2
 80055a6:	469b      	mov	fp, r3
 80055a8:	4643      	mov	r3, r8
 80055aa:	eb1a 0303 	adds.w	r3, sl, r3
 80055ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055b2:	464b      	mov	r3, r9
 80055b4:	eb4b 0303 	adc.w	r3, fp, r3
 80055b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055d0:	460b      	mov	r3, r1
 80055d2:	18db      	adds	r3, r3, r3
 80055d4:	643b      	str	r3, [r7, #64]	; 0x40
 80055d6:	4613      	mov	r3, r2
 80055d8:	eb42 0303 	adc.w	r3, r2, r3
 80055dc:	647b      	str	r3, [r7, #68]	; 0x44
 80055de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055e6:	f7fb fb37 	bl	8000c58 <__aeabi_uldivmod>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4611      	mov	r1, r2
 80055f0:	4b3b      	ldr	r3, [pc, #236]	; (80056e0 <UART_SetConfig+0x2d4>)
 80055f2:	fba3 2301 	umull	r2, r3, r3, r1
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	2264      	movs	r2, #100	; 0x64
 80055fa:	fb02 f303 	mul.w	r3, r2, r3
 80055fe:	1acb      	subs	r3, r1, r3
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005606:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <UART_SetConfig+0x2d4>)
 8005608:	fba3 2302 	umull	r2, r3, r3, r2
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005614:	441c      	add	r4, r3
 8005616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561a:	2200      	movs	r2, #0
 800561c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005620:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005624:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005628:	4642      	mov	r2, r8
 800562a:	464b      	mov	r3, r9
 800562c:	1891      	adds	r1, r2, r2
 800562e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005630:	415b      	adcs	r3, r3
 8005632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005638:	4641      	mov	r1, r8
 800563a:	1851      	adds	r1, r2, r1
 800563c:	6339      	str	r1, [r7, #48]	; 0x30
 800563e:	4649      	mov	r1, r9
 8005640:	414b      	adcs	r3, r1
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005650:	4659      	mov	r1, fp
 8005652:	00cb      	lsls	r3, r1, #3
 8005654:	4651      	mov	r1, sl
 8005656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800565a:	4651      	mov	r1, sl
 800565c:	00ca      	lsls	r2, r1, #3
 800565e:	4610      	mov	r0, r2
 8005660:	4619      	mov	r1, r3
 8005662:	4603      	mov	r3, r0
 8005664:	4642      	mov	r2, r8
 8005666:	189b      	adds	r3, r3, r2
 8005668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800566c:	464b      	mov	r3, r9
 800566e:	460a      	mov	r2, r1
 8005670:	eb42 0303 	adc.w	r3, r2, r3
 8005674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005684:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005688:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800568c:	460b      	mov	r3, r1
 800568e:	18db      	adds	r3, r3, r3
 8005690:	62bb      	str	r3, [r7, #40]	; 0x28
 8005692:	4613      	mov	r3, r2
 8005694:	eb42 0303 	adc.w	r3, r2, r3
 8005698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800569a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800569e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056a2:	f7fb fad9 	bl	8000c58 <__aeabi_uldivmod>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <UART_SetConfig+0x2d4>)
 80056ac:	fba3 1302 	umull	r1, r3, r3, r2
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	2164      	movs	r1, #100	; 0x64
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	3332      	adds	r3, #50	; 0x32
 80056be:	4a08      	ldr	r2, [pc, #32]	; (80056e0 <UART_SetConfig+0x2d4>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	f003 0207 	and.w	r2, r3, #7
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4422      	add	r2, r4
 80056d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056d4:	e105      	b.n	80058e2 <UART_SetConfig+0x4d6>
 80056d6:	bf00      	nop
 80056d8:	40011000 	.word	0x40011000
 80056dc:	40011400 	.word	0x40011400
 80056e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056e8:	2200      	movs	r2, #0
 80056ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056f6:	4642      	mov	r2, r8
 80056f8:	464b      	mov	r3, r9
 80056fa:	1891      	adds	r1, r2, r2
 80056fc:	6239      	str	r1, [r7, #32]
 80056fe:	415b      	adcs	r3, r3
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
 8005702:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005706:	4641      	mov	r1, r8
 8005708:	1854      	adds	r4, r2, r1
 800570a:	4649      	mov	r1, r9
 800570c:	eb43 0501 	adc.w	r5, r3, r1
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	00eb      	lsls	r3, r5, #3
 800571a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800571e:	00e2      	lsls	r2, r4, #3
 8005720:	4614      	mov	r4, r2
 8005722:	461d      	mov	r5, r3
 8005724:	4643      	mov	r3, r8
 8005726:	18e3      	adds	r3, r4, r3
 8005728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800572c:	464b      	mov	r3, r9
 800572e:	eb45 0303 	adc.w	r3, r5, r3
 8005732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005742:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005752:	4629      	mov	r1, r5
 8005754:	008b      	lsls	r3, r1, #2
 8005756:	4621      	mov	r1, r4
 8005758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800575c:	4621      	mov	r1, r4
 800575e:	008a      	lsls	r2, r1, #2
 8005760:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005764:	f7fb fa78 	bl	8000c58 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4b60      	ldr	r3, [pc, #384]	; (80058f0 <UART_SetConfig+0x4e4>)
 800576e:	fba3 2302 	umull	r2, r3, r3, r2
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	011c      	lsls	r4, r3, #4
 8005776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800577a:	2200      	movs	r2, #0
 800577c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005780:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005784:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005788:	4642      	mov	r2, r8
 800578a:	464b      	mov	r3, r9
 800578c:	1891      	adds	r1, r2, r2
 800578e:	61b9      	str	r1, [r7, #24]
 8005790:	415b      	adcs	r3, r3
 8005792:	61fb      	str	r3, [r7, #28]
 8005794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005798:	4641      	mov	r1, r8
 800579a:	1851      	adds	r1, r2, r1
 800579c:	6139      	str	r1, [r7, #16]
 800579e:	4649      	mov	r1, r9
 80057a0:	414b      	adcs	r3, r1
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057b0:	4659      	mov	r1, fp
 80057b2:	00cb      	lsls	r3, r1, #3
 80057b4:	4651      	mov	r1, sl
 80057b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ba:	4651      	mov	r1, sl
 80057bc:	00ca      	lsls	r2, r1, #3
 80057be:	4610      	mov	r0, r2
 80057c0:	4619      	mov	r1, r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	4642      	mov	r2, r8
 80057c6:	189b      	adds	r3, r3, r2
 80057c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057cc:	464b      	mov	r3, r9
 80057ce:	460a      	mov	r2, r1
 80057d0:	eb42 0303 	adc.w	r3, r2, r3
 80057d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80057e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057f0:	4649      	mov	r1, r9
 80057f2:	008b      	lsls	r3, r1, #2
 80057f4:	4641      	mov	r1, r8
 80057f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057fa:	4641      	mov	r1, r8
 80057fc:	008a      	lsls	r2, r1, #2
 80057fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005802:	f7fb fa29 	bl	8000c58 <__aeabi_uldivmod>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4b39      	ldr	r3, [pc, #228]	; (80058f0 <UART_SetConfig+0x4e4>)
 800580c:	fba3 1302 	umull	r1, r3, r3, r2
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	2164      	movs	r1, #100	; 0x64
 8005814:	fb01 f303 	mul.w	r3, r1, r3
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	3332      	adds	r3, #50	; 0x32
 800581e:	4a34      	ldr	r2, [pc, #208]	; (80058f0 <UART_SetConfig+0x4e4>)
 8005820:	fba2 2303 	umull	r2, r3, r2, r3
 8005824:	095b      	lsrs	r3, r3, #5
 8005826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800582a:	441c      	add	r4, r3
 800582c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005830:	2200      	movs	r2, #0
 8005832:	673b      	str	r3, [r7, #112]	; 0x70
 8005834:	677a      	str	r2, [r7, #116]	; 0x74
 8005836:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800583a:	4642      	mov	r2, r8
 800583c:	464b      	mov	r3, r9
 800583e:	1891      	adds	r1, r2, r2
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	415b      	adcs	r3, r3
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800584a:	4641      	mov	r1, r8
 800584c:	1851      	adds	r1, r2, r1
 800584e:	6039      	str	r1, [r7, #0]
 8005850:	4649      	mov	r1, r9
 8005852:	414b      	adcs	r3, r1
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005862:	4659      	mov	r1, fp
 8005864:	00cb      	lsls	r3, r1, #3
 8005866:	4651      	mov	r1, sl
 8005868:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800586c:	4651      	mov	r1, sl
 800586e:	00ca      	lsls	r2, r1, #3
 8005870:	4610      	mov	r0, r2
 8005872:	4619      	mov	r1, r3
 8005874:	4603      	mov	r3, r0
 8005876:	4642      	mov	r2, r8
 8005878:	189b      	adds	r3, r3, r2
 800587a:	66bb      	str	r3, [r7, #104]	; 0x68
 800587c:	464b      	mov	r3, r9
 800587e:	460a      	mov	r2, r1
 8005880:	eb42 0303 	adc.w	r3, r2, r3
 8005884:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	663b      	str	r3, [r7, #96]	; 0x60
 8005890:	667a      	str	r2, [r7, #100]	; 0x64
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800589e:	4649      	mov	r1, r9
 80058a0:	008b      	lsls	r3, r1, #2
 80058a2:	4641      	mov	r1, r8
 80058a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a8:	4641      	mov	r1, r8
 80058aa:	008a      	lsls	r2, r1, #2
 80058ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058b0:	f7fb f9d2 	bl	8000c58 <__aeabi_uldivmod>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <UART_SetConfig+0x4e4>)
 80058ba:	fba3 1302 	umull	r1, r3, r3, r2
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	2164      	movs	r1, #100	; 0x64
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	3332      	adds	r3, #50	; 0x32
 80058cc:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <UART_SetConfig+0x4e4>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	f003 020f 	and.w	r2, r3, #15
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4422      	add	r2, r4
 80058e0:	609a      	str	r2, [r3, #8]
}
 80058e2:	bf00      	nop
 80058e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058e8:	46bd      	mov	sp, r7
 80058ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ee:	bf00      	nop
 80058f0:	51eb851f 	.word	0x51eb851f

080058f4 <atoi>:
 80058f4:	220a      	movs	r2, #10
 80058f6:	2100      	movs	r1, #0
 80058f8:	f000 bd3e 	b.w	8006378 <strtol>

080058fc <__errno>:
 80058fc:	4b01      	ldr	r3, [pc, #4]	; (8005904 <__errno+0x8>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	2000001c 	.word	0x2000001c

08005908 <__libc_init_array>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	4d0d      	ldr	r5, [pc, #52]	; (8005940 <__libc_init_array+0x38>)
 800590c:	4c0d      	ldr	r4, [pc, #52]	; (8005944 <__libc_init_array+0x3c>)
 800590e:	1b64      	subs	r4, r4, r5
 8005910:	10a4      	asrs	r4, r4, #2
 8005912:	2600      	movs	r6, #0
 8005914:	42a6      	cmp	r6, r4
 8005916:	d109      	bne.n	800592c <__libc_init_array+0x24>
 8005918:	4d0b      	ldr	r5, [pc, #44]	; (8005948 <__libc_init_array+0x40>)
 800591a:	4c0c      	ldr	r4, [pc, #48]	; (800594c <__libc_init_array+0x44>)
 800591c:	f003 f996 	bl	8008c4c <_init>
 8005920:	1b64      	subs	r4, r4, r5
 8005922:	10a4      	asrs	r4, r4, #2
 8005924:	2600      	movs	r6, #0
 8005926:	42a6      	cmp	r6, r4
 8005928:	d105      	bne.n	8005936 <__libc_init_array+0x2e>
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005930:	4798      	blx	r3
 8005932:	3601      	adds	r6, #1
 8005934:	e7ee      	b.n	8005914 <__libc_init_array+0xc>
 8005936:	f855 3b04 	ldr.w	r3, [r5], #4
 800593a:	4798      	blx	r3
 800593c:	3601      	adds	r6, #1
 800593e:	e7f2      	b.n	8005926 <__libc_init_array+0x1e>
 8005940:	080090a8 	.word	0x080090a8
 8005944:	080090a8 	.word	0x080090a8
 8005948:	080090a8 	.word	0x080090a8
 800594c:	080090ac 	.word	0x080090ac

08005950 <memset>:
 8005950:	4402      	add	r2, r0
 8005952:	4603      	mov	r3, r0
 8005954:	4293      	cmp	r3, r2
 8005956:	d100      	bne.n	800595a <memset+0xa>
 8005958:	4770      	bx	lr
 800595a:	f803 1b01 	strb.w	r1, [r3], #1
 800595e:	e7f9      	b.n	8005954 <memset+0x4>

08005960 <__cvt>:
 8005960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005964:	ec55 4b10 	vmov	r4, r5, d0
 8005968:	2d00      	cmp	r5, #0
 800596a:	460e      	mov	r6, r1
 800596c:	4619      	mov	r1, r3
 800596e:	462b      	mov	r3, r5
 8005970:	bfbb      	ittet	lt
 8005972:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005976:	461d      	movlt	r5, r3
 8005978:	2300      	movge	r3, #0
 800597a:	232d      	movlt	r3, #45	; 0x2d
 800597c:	700b      	strb	r3, [r1, #0]
 800597e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005980:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005984:	4691      	mov	r9, r2
 8005986:	f023 0820 	bic.w	r8, r3, #32
 800598a:	bfbc      	itt	lt
 800598c:	4622      	movlt	r2, r4
 800598e:	4614      	movlt	r4, r2
 8005990:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005994:	d005      	beq.n	80059a2 <__cvt+0x42>
 8005996:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800599a:	d100      	bne.n	800599e <__cvt+0x3e>
 800599c:	3601      	adds	r6, #1
 800599e:	2102      	movs	r1, #2
 80059a0:	e000      	b.n	80059a4 <__cvt+0x44>
 80059a2:	2103      	movs	r1, #3
 80059a4:	ab03      	add	r3, sp, #12
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	ab02      	add	r3, sp, #8
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	ec45 4b10 	vmov	d0, r4, r5
 80059b0:	4653      	mov	r3, sl
 80059b2:	4632      	mov	r2, r6
 80059b4:	f000 fd78 	bl	80064a8 <_dtoa_r>
 80059b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059bc:	4607      	mov	r7, r0
 80059be:	d102      	bne.n	80059c6 <__cvt+0x66>
 80059c0:	f019 0f01 	tst.w	r9, #1
 80059c4:	d022      	beq.n	8005a0c <__cvt+0xac>
 80059c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059ca:	eb07 0906 	add.w	r9, r7, r6
 80059ce:	d110      	bne.n	80059f2 <__cvt+0x92>
 80059d0:	783b      	ldrb	r3, [r7, #0]
 80059d2:	2b30      	cmp	r3, #48	; 0x30
 80059d4:	d10a      	bne.n	80059ec <__cvt+0x8c>
 80059d6:	2200      	movs	r2, #0
 80059d8:	2300      	movs	r3, #0
 80059da:	4620      	mov	r0, r4
 80059dc:	4629      	mov	r1, r5
 80059de:	f7fb f87b 	bl	8000ad8 <__aeabi_dcmpeq>
 80059e2:	b918      	cbnz	r0, 80059ec <__cvt+0x8c>
 80059e4:	f1c6 0601 	rsb	r6, r6, #1
 80059e8:	f8ca 6000 	str.w	r6, [sl]
 80059ec:	f8da 3000 	ldr.w	r3, [sl]
 80059f0:	4499      	add	r9, r3
 80059f2:	2200      	movs	r2, #0
 80059f4:	2300      	movs	r3, #0
 80059f6:	4620      	mov	r0, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	f7fb f86d 	bl	8000ad8 <__aeabi_dcmpeq>
 80059fe:	b108      	cbz	r0, 8005a04 <__cvt+0xa4>
 8005a00:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a04:	2230      	movs	r2, #48	; 0x30
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	454b      	cmp	r3, r9
 8005a0a:	d307      	bcc.n	8005a1c <__cvt+0xbc>
 8005a0c:	9b03      	ldr	r3, [sp, #12]
 8005a0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a10:	1bdb      	subs	r3, r3, r7
 8005a12:	4638      	mov	r0, r7
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	b004      	add	sp, #16
 8005a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a1c:	1c59      	adds	r1, r3, #1
 8005a1e:	9103      	str	r1, [sp, #12]
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e7f0      	b.n	8005a06 <__cvt+0xa6>

08005a24 <__exponent>:
 8005a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a26:	4603      	mov	r3, r0
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	bfb8      	it	lt
 8005a2c:	4249      	neglt	r1, r1
 8005a2e:	f803 2b02 	strb.w	r2, [r3], #2
 8005a32:	bfb4      	ite	lt
 8005a34:	222d      	movlt	r2, #45	; 0x2d
 8005a36:	222b      	movge	r2, #43	; 0x2b
 8005a38:	2909      	cmp	r1, #9
 8005a3a:	7042      	strb	r2, [r0, #1]
 8005a3c:	dd2a      	ble.n	8005a94 <__exponent+0x70>
 8005a3e:	f10d 0407 	add.w	r4, sp, #7
 8005a42:	46a4      	mov	ip, r4
 8005a44:	270a      	movs	r7, #10
 8005a46:	46a6      	mov	lr, r4
 8005a48:	460a      	mov	r2, r1
 8005a4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a4e:	fb07 1516 	mls	r5, r7, r6, r1
 8005a52:	3530      	adds	r5, #48	; 0x30
 8005a54:	2a63      	cmp	r2, #99	; 0x63
 8005a56:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a5e:	4631      	mov	r1, r6
 8005a60:	dcf1      	bgt.n	8005a46 <__exponent+0x22>
 8005a62:	3130      	adds	r1, #48	; 0x30
 8005a64:	f1ae 0502 	sub.w	r5, lr, #2
 8005a68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a6c:	1c44      	adds	r4, r0, #1
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4561      	cmp	r1, ip
 8005a72:	d30a      	bcc.n	8005a8a <__exponent+0x66>
 8005a74:	f10d 0209 	add.w	r2, sp, #9
 8005a78:	eba2 020e 	sub.w	r2, r2, lr
 8005a7c:	4565      	cmp	r5, ip
 8005a7e:	bf88      	it	hi
 8005a80:	2200      	movhi	r2, #0
 8005a82:	4413      	add	r3, r2
 8005a84:	1a18      	subs	r0, r3, r0
 8005a86:	b003      	add	sp, #12
 8005a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a92:	e7ed      	b.n	8005a70 <__exponent+0x4c>
 8005a94:	2330      	movs	r3, #48	; 0x30
 8005a96:	3130      	adds	r1, #48	; 0x30
 8005a98:	7083      	strb	r3, [r0, #2]
 8005a9a:	70c1      	strb	r1, [r0, #3]
 8005a9c:	1d03      	adds	r3, r0, #4
 8005a9e:	e7f1      	b.n	8005a84 <__exponent+0x60>

08005aa0 <_printf_float>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	ed2d 8b02 	vpush	{d8}
 8005aa8:	b08d      	sub	sp, #52	; 0x34
 8005aaa:	460c      	mov	r4, r1
 8005aac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	461f      	mov	r7, r3
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	f001 fae5 	bl	8007084 <_localeconv_r>
 8005aba:	f8d0 a000 	ldr.w	sl, [r0]
 8005abe:	4650      	mov	r0, sl
 8005ac0:	f7fa fb8e 	bl	80001e0 <strlen>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	9305      	str	r3, [sp, #20]
 8005acc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ad4:	3307      	adds	r3, #7
 8005ad6:	f023 0307 	bic.w	r3, r3, #7
 8005ada:	f103 0208 	add.w	r2, r3, #8
 8005ade:	f8c8 2000 	str.w	r2, [r8]
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005aea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005aee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005af2:	9307      	str	r3, [sp, #28]
 8005af4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005af8:	ee08 0a10 	vmov	s16, r0
 8005afc:	4b9f      	ldr	r3, [pc, #636]	; (8005d7c <_printf_float+0x2dc>)
 8005afe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b02:	f04f 32ff 	mov.w	r2, #4294967295
 8005b06:	f7fb f819 	bl	8000b3c <__aeabi_dcmpun>
 8005b0a:	bb88      	cbnz	r0, 8005b70 <_printf_float+0xd0>
 8005b0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b10:	4b9a      	ldr	r3, [pc, #616]	; (8005d7c <_printf_float+0x2dc>)
 8005b12:	f04f 32ff 	mov.w	r2, #4294967295
 8005b16:	f7fa fff3 	bl	8000b00 <__aeabi_dcmple>
 8005b1a:	bb48      	cbnz	r0, 8005b70 <_printf_float+0xd0>
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2300      	movs	r3, #0
 8005b20:	4640      	mov	r0, r8
 8005b22:	4649      	mov	r1, r9
 8005b24:	f7fa ffe2 	bl	8000aec <__aeabi_dcmplt>
 8005b28:	b110      	cbz	r0, 8005b30 <_printf_float+0x90>
 8005b2a:	232d      	movs	r3, #45	; 0x2d
 8005b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b30:	4b93      	ldr	r3, [pc, #588]	; (8005d80 <_printf_float+0x2e0>)
 8005b32:	4894      	ldr	r0, [pc, #592]	; (8005d84 <_printf_float+0x2e4>)
 8005b34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b38:	bf94      	ite	ls
 8005b3a:	4698      	movls	r8, r3
 8005b3c:	4680      	movhi	r8, r0
 8005b3e:	2303      	movs	r3, #3
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	9b05      	ldr	r3, [sp, #20]
 8005b44:	f023 0204 	bic.w	r2, r3, #4
 8005b48:	6022      	str	r2, [r4, #0]
 8005b4a:	f04f 0900 	mov.w	r9, #0
 8005b4e:	9700      	str	r7, [sp, #0]
 8005b50:	4633      	mov	r3, r6
 8005b52:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b54:	4621      	mov	r1, r4
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 f9d8 	bl	8005f0c <_printf_common>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	f040 8090 	bne.w	8005c82 <_printf_float+0x1e2>
 8005b62:	f04f 30ff 	mov.w	r0, #4294967295
 8005b66:	b00d      	add	sp, #52	; 0x34
 8005b68:	ecbd 8b02 	vpop	{d8}
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	4649      	mov	r1, r9
 8005b78:	f7fa ffe0 	bl	8000b3c <__aeabi_dcmpun>
 8005b7c:	b140      	cbz	r0, 8005b90 <_printf_float+0xf0>
 8005b7e:	464b      	mov	r3, r9
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfbc      	itt	lt
 8005b84:	232d      	movlt	r3, #45	; 0x2d
 8005b86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b8a:	487f      	ldr	r0, [pc, #508]	; (8005d88 <_printf_float+0x2e8>)
 8005b8c:	4b7f      	ldr	r3, [pc, #508]	; (8005d8c <_printf_float+0x2ec>)
 8005b8e:	e7d1      	b.n	8005b34 <_printf_float+0x94>
 8005b90:	6863      	ldr	r3, [r4, #4]
 8005b92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b96:	9206      	str	r2, [sp, #24]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	d13f      	bne.n	8005c1c <_printf_float+0x17c>
 8005b9c:	2306      	movs	r3, #6
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	9b05      	ldr	r3, [sp, #20]
 8005ba2:	6861      	ldr	r1, [r4, #4]
 8005ba4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9303      	str	r3, [sp, #12]
 8005bac:	ab0a      	add	r3, sp, #40	; 0x28
 8005bae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005bb2:	ab09      	add	r3, sp, #36	; 0x24
 8005bb4:	ec49 8b10 	vmov	d0, r8, r9
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	6022      	str	r2, [r4, #0]
 8005bbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f7ff fecd 	bl	8005960 <__cvt>
 8005bc6:	9b06      	ldr	r3, [sp, #24]
 8005bc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bca:	2b47      	cmp	r3, #71	; 0x47
 8005bcc:	4680      	mov	r8, r0
 8005bce:	d108      	bne.n	8005be2 <_printf_float+0x142>
 8005bd0:	1cc8      	adds	r0, r1, #3
 8005bd2:	db02      	blt.n	8005bda <_printf_float+0x13a>
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	dd41      	ble.n	8005c5e <_printf_float+0x1be>
 8005bda:	f1ab 0b02 	sub.w	fp, fp, #2
 8005bde:	fa5f fb8b 	uxtb.w	fp, fp
 8005be2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005be6:	d820      	bhi.n	8005c2a <_printf_float+0x18a>
 8005be8:	3901      	subs	r1, #1
 8005bea:	465a      	mov	r2, fp
 8005bec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bf0:	9109      	str	r1, [sp, #36]	; 0x24
 8005bf2:	f7ff ff17 	bl	8005a24 <__exponent>
 8005bf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf8:	1813      	adds	r3, r2, r0
 8005bfa:	2a01      	cmp	r2, #1
 8005bfc:	4681      	mov	r9, r0
 8005bfe:	6123      	str	r3, [r4, #16]
 8005c00:	dc02      	bgt.n	8005c08 <_printf_float+0x168>
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	07d2      	lsls	r2, r2, #31
 8005c06:	d501      	bpl.n	8005c0c <_printf_float+0x16c>
 8005c08:	3301      	adds	r3, #1
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d09c      	beq.n	8005b4e <_printf_float+0xae>
 8005c14:	232d      	movs	r3, #45	; 0x2d
 8005c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c1a:	e798      	b.n	8005b4e <_printf_float+0xae>
 8005c1c:	9a06      	ldr	r2, [sp, #24]
 8005c1e:	2a47      	cmp	r2, #71	; 0x47
 8005c20:	d1be      	bne.n	8005ba0 <_printf_float+0x100>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1bc      	bne.n	8005ba0 <_printf_float+0x100>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e7b9      	b.n	8005b9e <_printf_float+0xfe>
 8005c2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c2e:	d118      	bne.n	8005c62 <_printf_float+0x1c2>
 8005c30:	2900      	cmp	r1, #0
 8005c32:	6863      	ldr	r3, [r4, #4]
 8005c34:	dd0b      	ble.n	8005c4e <_printf_float+0x1ae>
 8005c36:	6121      	str	r1, [r4, #16]
 8005c38:	b913      	cbnz	r3, 8005c40 <_printf_float+0x1a0>
 8005c3a:	6822      	ldr	r2, [r4, #0]
 8005c3c:	07d0      	lsls	r0, r2, #31
 8005c3e:	d502      	bpl.n	8005c46 <_printf_float+0x1a6>
 8005c40:	3301      	adds	r3, #1
 8005c42:	440b      	add	r3, r1
 8005c44:	6123      	str	r3, [r4, #16]
 8005c46:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c48:	f04f 0900 	mov.w	r9, #0
 8005c4c:	e7de      	b.n	8005c0c <_printf_float+0x16c>
 8005c4e:	b913      	cbnz	r3, 8005c56 <_printf_float+0x1b6>
 8005c50:	6822      	ldr	r2, [r4, #0]
 8005c52:	07d2      	lsls	r2, r2, #31
 8005c54:	d501      	bpl.n	8005c5a <_printf_float+0x1ba>
 8005c56:	3302      	adds	r3, #2
 8005c58:	e7f4      	b.n	8005c44 <_printf_float+0x1a4>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e7f2      	b.n	8005c44 <_printf_float+0x1a4>
 8005c5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c64:	4299      	cmp	r1, r3
 8005c66:	db05      	blt.n	8005c74 <_printf_float+0x1d4>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	6121      	str	r1, [r4, #16]
 8005c6c:	07d8      	lsls	r0, r3, #31
 8005c6e:	d5ea      	bpl.n	8005c46 <_printf_float+0x1a6>
 8005c70:	1c4b      	adds	r3, r1, #1
 8005c72:	e7e7      	b.n	8005c44 <_printf_float+0x1a4>
 8005c74:	2900      	cmp	r1, #0
 8005c76:	bfd4      	ite	le
 8005c78:	f1c1 0202 	rsble	r2, r1, #2
 8005c7c:	2201      	movgt	r2, #1
 8005c7e:	4413      	add	r3, r2
 8005c80:	e7e0      	b.n	8005c44 <_printf_float+0x1a4>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	055a      	lsls	r2, r3, #21
 8005c86:	d407      	bmi.n	8005c98 <_printf_float+0x1f8>
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	4628      	mov	r0, r5
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	d12c      	bne.n	8005cf0 <_printf_float+0x250>
 8005c96:	e764      	b.n	8005b62 <_printf_float+0xc2>
 8005c98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c9c:	f240 80e0 	bls.w	8005e60 <_printf_float+0x3c0>
 8005ca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f7fa ff16 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d034      	beq.n	8005d1a <_printf_float+0x27a>
 8005cb0:	4a37      	ldr	r2, [pc, #220]	; (8005d90 <_printf_float+0x2f0>)
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	47b8      	blx	r7
 8005cba:	3001      	adds	r0, #1
 8005cbc:	f43f af51 	beq.w	8005b62 <_printf_float+0xc2>
 8005cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	db02      	blt.n	8005cce <_printf_float+0x22e>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	07d8      	lsls	r0, r3, #31
 8005ccc:	d510      	bpl.n	8005cf0 <_printf_float+0x250>
 8005cce:	ee18 3a10 	vmov	r3, s16
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	47b8      	blx	r7
 8005cda:	3001      	adds	r0, #1
 8005cdc:	f43f af41 	beq.w	8005b62 <_printf_float+0xc2>
 8005ce0:	f04f 0800 	mov.w	r8, #0
 8005ce4:	f104 091a 	add.w	r9, r4, #26
 8005ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cea:	3b01      	subs	r3, #1
 8005cec:	4543      	cmp	r3, r8
 8005cee:	dc09      	bgt.n	8005d04 <_printf_float+0x264>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	079b      	lsls	r3, r3, #30
 8005cf4:	f100 8105 	bmi.w	8005f02 <_printf_float+0x462>
 8005cf8:	68e0      	ldr	r0, [r4, #12]
 8005cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cfc:	4298      	cmp	r0, r3
 8005cfe:	bfb8      	it	lt
 8005d00:	4618      	movlt	r0, r3
 8005d02:	e730      	b.n	8005b66 <_printf_float+0xc6>
 8005d04:	2301      	movs	r3, #1
 8005d06:	464a      	mov	r2, r9
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b8      	blx	r7
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f43f af27 	beq.w	8005b62 <_printf_float+0xc2>
 8005d14:	f108 0801 	add.w	r8, r8, #1
 8005d18:	e7e6      	b.n	8005ce8 <_printf_float+0x248>
 8005d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dc39      	bgt.n	8005d94 <_printf_float+0x2f4>
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <_printf_float+0x2f0>)
 8005d22:	2301      	movs	r3, #1
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f af19 	beq.w	8005b62 <_printf_float+0xc2>
 8005d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d34:	4313      	orrs	r3, r2
 8005d36:	d102      	bne.n	8005d3e <_printf_float+0x29e>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	07d9      	lsls	r1, r3, #31
 8005d3c:	d5d8      	bpl.n	8005cf0 <_printf_float+0x250>
 8005d3e:	ee18 3a10 	vmov	r3, s16
 8005d42:	4652      	mov	r2, sl
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f43f af09 	beq.w	8005b62 <_printf_float+0xc2>
 8005d50:	f04f 0900 	mov.w	r9, #0
 8005d54:	f104 0a1a 	add.w	sl, r4, #26
 8005d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5a:	425b      	negs	r3, r3
 8005d5c:	454b      	cmp	r3, r9
 8005d5e:	dc01      	bgt.n	8005d64 <_printf_float+0x2c4>
 8005d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d62:	e792      	b.n	8005c8a <_printf_float+0x1ea>
 8005d64:	2301      	movs	r3, #1
 8005d66:	4652      	mov	r2, sl
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	f43f aef7 	beq.w	8005b62 <_printf_float+0xc2>
 8005d74:	f109 0901 	add.w	r9, r9, #1
 8005d78:	e7ee      	b.n	8005d58 <_printf_float+0x2b8>
 8005d7a:	bf00      	nop
 8005d7c:	7fefffff 	.word	0x7fefffff
 8005d80:	08008c90 	.word	0x08008c90
 8005d84:	08008c94 	.word	0x08008c94
 8005d88:	08008c9c 	.word	0x08008c9c
 8005d8c:	08008c98 	.word	0x08008c98
 8005d90:	08008ca0 	.word	0x08008ca0
 8005d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	bfa8      	it	ge
 8005d9c:	461a      	movge	r2, r3
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	4691      	mov	r9, r2
 8005da2:	dc37      	bgt.n	8005e14 <_printf_float+0x374>
 8005da4:	f04f 0b00 	mov.w	fp, #0
 8005da8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dac:	f104 021a 	add.w	r2, r4, #26
 8005db0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005db2:	9305      	str	r3, [sp, #20]
 8005db4:	eba3 0309 	sub.w	r3, r3, r9
 8005db8:	455b      	cmp	r3, fp
 8005dba:	dc33      	bgt.n	8005e24 <_printf_float+0x384>
 8005dbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	db3b      	blt.n	8005e3c <_printf_float+0x39c>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	07da      	lsls	r2, r3, #31
 8005dc8:	d438      	bmi.n	8005e3c <_printf_float+0x39c>
 8005dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dcc:	9a05      	ldr	r2, [sp, #20]
 8005dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dd0:	1a9a      	subs	r2, r3, r2
 8005dd2:	eba3 0901 	sub.w	r9, r3, r1
 8005dd6:	4591      	cmp	r9, r2
 8005dd8:	bfa8      	it	ge
 8005dda:	4691      	movge	r9, r2
 8005ddc:	f1b9 0f00 	cmp.w	r9, #0
 8005de0:	dc35      	bgt.n	8005e4e <_printf_float+0x3ae>
 8005de2:	f04f 0800 	mov.w	r8, #0
 8005de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dea:	f104 0a1a 	add.w	sl, r4, #26
 8005dee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	eba3 0309 	sub.w	r3, r3, r9
 8005df8:	4543      	cmp	r3, r8
 8005dfa:	f77f af79 	ble.w	8005cf0 <_printf_float+0x250>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4652      	mov	r2, sl
 8005e02:	4631      	mov	r1, r6
 8005e04:	4628      	mov	r0, r5
 8005e06:	47b8      	blx	r7
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f43f aeaa 	beq.w	8005b62 <_printf_float+0xc2>
 8005e0e:	f108 0801 	add.w	r8, r8, #1
 8005e12:	e7ec      	b.n	8005dee <_printf_float+0x34e>
 8005e14:	4613      	mov	r3, r2
 8005e16:	4631      	mov	r1, r6
 8005e18:	4642      	mov	r2, r8
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d1c0      	bne.n	8005da4 <_printf_float+0x304>
 8005e22:	e69e      	b.n	8005b62 <_printf_float+0xc2>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4631      	mov	r1, r6
 8005e28:	4628      	mov	r0, r5
 8005e2a:	9205      	str	r2, [sp, #20]
 8005e2c:	47b8      	blx	r7
 8005e2e:	3001      	adds	r0, #1
 8005e30:	f43f ae97 	beq.w	8005b62 <_printf_float+0xc2>
 8005e34:	9a05      	ldr	r2, [sp, #20]
 8005e36:	f10b 0b01 	add.w	fp, fp, #1
 8005e3a:	e7b9      	b.n	8005db0 <_printf_float+0x310>
 8005e3c:	ee18 3a10 	vmov	r3, s16
 8005e40:	4652      	mov	r2, sl
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d1be      	bne.n	8005dca <_printf_float+0x32a>
 8005e4c:	e689      	b.n	8005b62 <_printf_float+0xc2>
 8005e4e:	9a05      	ldr	r2, [sp, #20]
 8005e50:	464b      	mov	r3, r9
 8005e52:	4442      	add	r2, r8
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d1c1      	bne.n	8005de2 <_printf_float+0x342>
 8005e5e:	e680      	b.n	8005b62 <_printf_float+0xc2>
 8005e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e62:	2a01      	cmp	r2, #1
 8005e64:	dc01      	bgt.n	8005e6a <_printf_float+0x3ca>
 8005e66:	07db      	lsls	r3, r3, #31
 8005e68:	d538      	bpl.n	8005edc <_printf_float+0x43c>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b8      	blx	r7
 8005e74:	3001      	adds	r0, #1
 8005e76:	f43f ae74 	beq.w	8005b62 <_printf_float+0xc2>
 8005e7a:	ee18 3a10 	vmov	r3, s16
 8005e7e:	4652      	mov	r2, sl
 8005e80:	4631      	mov	r1, r6
 8005e82:	4628      	mov	r0, r5
 8005e84:	47b8      	blx	r7
 8005e86:	3001      	adds	r0, #1
 8005e88:	f43f ae6b 	beq.w	8005b62 <_printf_float+0xc2>
 8005e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e90:	2200      	movs	r2, #0
 8005e92:	2300      	movs	r3, #0
 8005e94:	f7fa fe20 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e98:	b9d8      	cbnz	r0, 8005ed2 <_printf_float+0x432>
 8005e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e9c:	f108 0201 	add.w	r2, r8, #1
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b8      	blx	r7
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d10e      	bne.n	8005eca <_printf_float+0x42a>
 8005eac:	e659      	b.n	8005b62 <_printf_float+0xc2>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	4652      	mov	r2, sl
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f ae52 	beq.w	8005b62 <_printf_float+0xc2>
 8005ebe:	f108 0801 	add.w	r8, r8, #1
 8005ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	4543      	cmp	r3, r8
 8005ec8:	dcf1      	bgt.n	8005eae <_printf_float+0x40e>
 8005eca:	464b      	mov	r3, r9
 8005ecc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ed0:	e6dc      	b.n	8005c8c <_printf_float+0x1ec>
 8005ed2:	f04f 0800 	mov.w	r8, #0
 8005ed6:	f104 0a1a 	add.w	sl, r4, #26
 8005eda:	e7f2      	b.n	8005ec2 <_printf_float+0x422>
 8005edc:	2301      	movs	r3, #1
 8005ede:	4642      	mov	r2, r8
 8005ee0:	e7df      	b.n	8005ea2 <_printf_float+0x402>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	464a      	mov	r2, r9
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4628      	mov	r0, r5
 8005eea:	47b8      	blx	r7
 8005eec:	3001      	adds	r0, #1
 8005eee:	f43f ae38 	beq.w	8005b62 <_printf_float+0xc2>
 8005ef2:	f108 0801 	add.w	r8, r8, #1
 8005ef6:	68e3      	ldr	r3, [r4, #12]
 8005ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005efa:	1a5b      	subs	r3, r3, r1
 8005efc:	4543      	cmp	r3, r8
 8005efe:	dcf0      	bgt.n	8005ee2 <_printf_float+0x442>
 8005f00:	e6fa      	b.n	8005cf8 <_printf_float+0x258>
 8005f02:	f04f 0800 	mov.w	r8, #0
 8005f06:	f104 0919 	add.w	r9, r4, #25
 8005f0a:	e7f4      	b.n	8005ef6 <_printf_float+0x456>

08005f0c <_printf_common>:
 8005f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f10:	4616      	mov	r6, r2
 8005f12:	4699      	mov	r9, r3
 8005f14:	688a      	ldr	r2, [r1, #8]
 8005f16:	690b      	ldr	r3, [r1, #16]
 8005f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	bfb8      	it	lt
 8005f20:	4613      	movlt	r3, r2
 8005f22:	6033      	str	r3, [r6, #0]
 8005f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f28:	4607      	mov	r7, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	b10a      	cbz	r2, 8005f32 <_printf_common+0x26>
 8005f2e:	3301      	adds	r3, #1
 8005f30:	6033      	str	r3, [r6, #0]
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	0699      	lsls	r1, r3, #26
 8005f36:	bf42      	ittt	mi
 8005f38:	6833      	ldrmi	r3, [r6, #0]
 8005f3a:	3302      	addmi	r3, #2
 8005f3c:	6033      	strmi	r3, [r6, #0]
 8005f3e:	6825      	ldr	r5, [r4, #0]
 8005f40:	f015 0506 	ands.w	r5, r5, #6
 8005f44:	d106      	bne.n	8005f54 <_printf_common+0x48>
 8005f46:	f104 0a19 	add.w	sl, r4, #25
 8005f4a:	68e3      	ldr	r3, [r4, #12]
 8005f4c:	6832      	ldr	r2, [r6, #0]
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	42ab      	cmp	r3, r5
 8005f52:	dc26      	bgt.n	8005fa2 <_printf_common+0x96>
 8005f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f58:	1e13      	subs	r3, r2, #0
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	bf18      	it	ne
 8005f5e:	2301      	movne	r3, #1
 8005f60:	0692      	lsls	r2, r2, #26
 8005f62:	d42b      	bmi.n	8005fbc <_printf_common+0xb0>
 8005f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f68:	4649      	mov	r1, r9
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	47c0      	blx	r8
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d01e      	beq.n	8005fb0 <_printf_common+0xa4>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	68e5      	ldr	r5, [r4, #12]
 8005f76:	6832      	ldr	r2, [r6, #0]
 8005f78:	f003 0306 	and.w	r3, r3, #6
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	bf08      	it	eq
 8005f80:	1aad      	subeq	r5, r5, r2
 8005f82:	68a3      	ldr	r3, [r4, #8]
 8005f84:	6922      	ldr	r2, [r4, #16]
 8005f86:	bf0c      	ite	eq
 8005f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f8c:	2500      	movne	r5, #0
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	bfc4      	itt	gt
 8005f92:	1a9b      	subgt	r3, r3, r2
 8005f94:	18ed      	addgt	r5, r5, r3
 8005f96:	2600      	movs	r6, #0
 8005f98:	341a      	adds	r4, #26
 8005f9a:	42b5      	cmp	r5, r6
 8005f9c:	d11a      	bne.n	8005fd4 <_printf_common+0xc8>
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	e008      	b.n	8005fb4 <_printf_common+0xa8>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4652      	mov	r2, sl
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	4638      	mov	r0, r7
 8005faa:	47c0      	blx	r8
 8005fac:	3001      	adds	r0, #1
 8005fae:	d103      	bne.n	8005fb8 <_printf_common+0xac>
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb8:	3501      	adds	r5, #1
 8005fba:	e7c6      	b.n	8005f4a <_printf_common+0x3e>
 8005fbc:	18e1      	adds	r1, r4, r3
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	2030      	movs	r0, #48	; 0x30
 8005fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fc6:	4422      	add	r2, r4
 8005fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	e7c7      	b.n	8005f64 <_printf_common+0x58>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4638      	mov	r0, r7
 8005fdc:	47c0      	blx	r8
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d0e6      	beq.n	8005fb0 <_printf_common+0xa4>
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	e7d9      	b.n	8005f9a <_printf_common+0x8e>
	...

08005fe8 <_printf_i>:
 8005fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fec:	7e0f      	ldrb	r7, [r1, #24]
 8005fee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ff0:	2f78      	cmp	r7, #120	; 0x78
 8005ff2:	4691      	mov	r9, r2
 8005ff4:	4680      	mov	r8, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	469a      	mov	sl, r3
 8005ffa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ffe:	d807      	bhi.n	8006010 <_printf_i+0x28>
 8006000:	2f62      	cmp	r7, #98	; 0x62
 8006002:	d80a      	bhi.n	800601a <_printf_i+0x32>
 8006004:	2f00      	cmp	r7, #0
 8006006:	f000 80d8 	beq.w	80061ba <_printf_i+0x1d2>
 800600a:	2f58      	cmp	r7, #88	; 0x58
 800600c:	f000 80a3 	beq.w	8006156 <_printf_i+0x16e>
 8006010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006018:	e03a      	b.n	8006090 <_printf_i+0xa8>
 800601a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800601e:	2b15      	cmp	r3, #21
 8006020:	d8f6      	bhi.n	8006010 <_printf_i+0x28>
 8006022:	a101      	add	r1, pc, #4	; (adr r1, 8006028 <_printf_i+0x40>)
 8006024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006028:	08006081 	.word	0x08006081
 800602c:	08006095 	.word	0x08006095
 8006030:	08006011 	.word	0x08006011
 8006034:	08006011 	.word	0x08006011
 8006038:	08006011 	.word	0x08006011
 800603c:	08006011 	.word	0x08006011
 8006040:	08006095 	.word	0x08006095
 8006044:	08006011 	.word	0x08006011
 8006048:	08006011 	.word	0x08006011
 800604c:	08006011 	.word	0x08006011
 8006050:	08006011 	.word	0x08006011
 8006054:	080061a1 	.word	0x080061a1
 8006058:	080060c5 	.word	0x080060c5
 800605c:	08006183 	.word	0x08006183
 8006060:	08006011 	.word	0x08006011
 8006064:	08006011 	.word	0x08006011
 8006068:	080061c3 	.word	0x080061c3
 800606c:	08006011 	.word	0x08006011
 8006070:	080060c5 	.word	0x080060c5
 8006074:	08006011 	.word	0x08006011
 8006078:	08006011 	.word	0x08006011
 800607c:	0800618b 	.word	0x0800618b
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	1d1a      	adds	r2, r3, #4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	602a      	str	r2, [r5, #0]
 8006088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800608c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006090:	2301      	movs	r3, #1
 8006092:	e0a3      	b.n	80061dc <_printf_i+0x1f4>
 8006094:	6820      	ldr	r0, [r4, #0]
 8006096:	6829      	ldr	r1, [r5, #0]
 8006098:	0606      	lsls	r6, r0, #24
 800609a:	f101 0304 	add.w	r3, r1, #4
 800609e:	d50a      	bpl.n	80060b6 <_printf_i+0xce>
 80060a0:	680e      	ldr	r6, [r1, #0]
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	2e00      	cmp	r6, #0
 80060a6:	da03      	bge.n	80060b0 <_printf_i+0xc8>
 80060a8:	232d      	movs	r3, #45	; 0x2d
 80060aa:	4276      	negs	r6, r6
 80060ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b0:	485e      	ldr	r0, [pc, #376]	; (800622c <_printf_i+0x244>)
 80060b2:	230a      	movs	r3, #10
 80060b4:	e019      	b.n	80060ea <_printf_i+0x102>
 80060b6:	680e      	ldr	r6, [r1, #0]
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060be:	bf18      	it	ne
 80060c0:	b236      	sxthne	r6, r6
 80060c2:	e7ef      	b.n	80060a4 <_printf_i+0xbc>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	6820      	ldr	r0, [r4, #0]
 80060c8:	1d19      	adds	r1, r3, #4
 80060ca:	6029      	str	r1, [r5, #0]
 80060cc:	0601      	lsls	r1, r0, #24
 80060ce:	d501      	bpl.n	80060d4 <_printf_i+0xec>
 80060d0:	681e      	ldr	r6, [r3, #0]
 80060d2:	e002      	b.n	80060da <_printf_i+0xf2>
 80060d4:	0646      	lsls	r6, r0, #25
 80060d6:	d5fb      	bpl.n	80060d0 <_printf_i+0xe8>
 80060d8:	881e      	ldrh	r6, [r3, #0]
 80060da:	4854      	ldr	r0, [pc, #336]	; (800622c <_printf_i+0x244>)
 80060dc:	2f6f      	cmp	r7, #111	; 0x6f
 80060de:	bf0c      	ite	eq
 80060e0:	2308      	moveq	r3, #8
 80060e2:	230a      	movne	r3, #10
 80060e4:	2100      	movs	r1, #0
 80060e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060ea:	6865      	ldr	r5, [r4, #4]
 80060ec:	60a5      	str	r5, [r4, #8]
 80060ee:	2d00      	cmp	r5, #0
 80060f0:	bfa2      	ittt	ge
 80060f2:	6821      	ldrge	r1, [r4, #0]
 80060f4:	f021 0104 	bicge.w	r1, r1, #4
 80060f8:	6021      	strge	r1, [r4, #0]
 80060fa:	b90e      	cbnz	r6, 8006100 <_printf_i+0x118>
 80060fc:	2d00      	cmp	r5, #0
 80060fe:	d04d      	beq.n	800619c <_printf_i+0x1b4>
 8006100:	4615      	mov	r5, r2
 8006102:	fbb6 f1f3 	udiv	r1, r6, r3
 8006106:	fb03 6711 	mls	r7, r3, r1, r6
 800610a:	5dc7      	ldrb	r7, [r0, r7]
 800610c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006110:	4637      	mov	r7, r6
 8006112:	42bb      	cmp	r3, r7
 8006114:	460e      	mov	r6, r1
 8006116:	d9f4      	bls.n	8006102 <_printf_i+0x11a>
 8006118:	2b08      	cmp	r3, #8
 800611a:	d10b      	bne.n	8006134 <_printf_i+0x14c>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	07de      	lsls	r6, r3, #31
 8006120:	d508      	bpl.n	8006134 <_printf_i+0x14c>
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	6861      	ldr	r1, [r4, #4]
 8006126:	4299      	cmp	r1, r3
 8006128:	bfde      	ittt	le
 800612a:	2330      	movle	r3, #48	; 0x30
 800612c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006130:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006134:	1b52      	subs	r2, r2, r5
 8006136:	6122      	str	r2, [r4, #16]
 8006138:	f8cd a000 	str.w	sl, [sp]
 800613c:	464b      	mov	r3, r9
 800613e:	aa03      	add	r2, sp, #12
 8006140:	4621      	mov	r1, r4
 8006142:	4640      	mov	r0, r8
 8006144:	f7ff fee2 	bl	8005f0c <_printf_common>
 8006148:	3001      	adds	r0, #1
 800614a:	d14c      	bne.n	80061e6 <_printf_i+0x1fe>
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	b004      	add	sp, #16
 8006152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006156:	4835      	ldr	r0, [pc, #212]	; (800622c <_printf_i+0x244>)
 8006158:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800615c:	6829      	ldr	r1, [r5, #0]
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	f851 6b04 	ldr.w	r6, [r1], #4
 8006164:	6029      	str	r1, [r5, #0]
 8006166:	061d      	lsls	r5, r3, #24
 8006168:	d514      	bpl.n	8006194 <_printf_i+0x1ac>
 800616a:	07df      	lsls	r7, r3, #31
 800616c:	bf44      	itt	mi
 800616e:	f043 0320 	orrmi.w	r3, r3, #32
 8006172:	6023      	strmi	r3, [r4, #0]
 8006174:	b91e      	cbnz	r6, 800617e <_printf_i+0x196>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	f023 0320 	bic.w	r3, r3, #32
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	2310      	movs	r3, #16
 8006180:	e7b0      	b.n	80060e4 <_printf_i+0xfc>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	f043 0320 	orr.w	r3, r3, #32
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	2378      	movs	r3, #120	; 0x78
 800618c:	4828      	ldr	r0, [pc, #160]	; (8006230 <_printf_i+0x248>)
 800618e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006192:	e7e3      	b.n	800615c <_printf_i+0x174>
 8006194:	0659      	lsls	r1, r3, #25
 8006196:	bf48      	it	mi
 8006198:	b2b6      	uxthmi	r6, r6
 800619a:	e7e6      	b.n	800616a <_printf_i+0x182>
 800619c:	4615      	mov	r5, r2
 800619e:	e7bb      	b.n	8006118 <_printf_i+0x130>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	6826      	ldr	r6, [r4, #0]
 80061a4:	6961      	ldr	r1, [r4, #20]
 80061a6:	1d18      	adds	r0, r3, #4
 80061a8:	6028      	str	r0, [r5, #0]
 80061aa:	0635      	lsls	r5, r6, #24
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	d501      	bpl.n	80061b4 <_printf_i+0x1cc>
 80061b0:	6019      	str	r1, [r3, #0]
 80061b2:	e002      	b.n	80061ba <_printf_i+0x1d2>
 80061b4:	0670      	lsls	r0, r6, #25
 80061b6:	d5fb      	bpl.n	80061b0 <_printf_i+0x1c8>
 80061b8:	8019      	strh	r1, [r3, #0]
 80061ba:	2300      	movs	r3, #0
 80061bc:	6123      	str	r3, [r4, #16]
 80061be:	4615      	mov	r5, r2
 80061c0:	e7ba      	b.n	8006138 <_printf_i+0x150>
 80061c2:	682b      	ldr	r3, [r5, #0]
 80061c4:	1d1a      	adds	r2, r3, #4
 80061c6:	602a      	str	r2, [r5, #0]
 80061c8:	681d      	ldr	r5, [r3, #0]
 80061ca:	6862      	ldr	r2, [r4, #4]
 80061cc:	2100      	movs	r1, #0
 80061ce:	4628      	mov	r0, r5
 80061d0:	f7fa f80e 	bl	80001f0 <memchr>
 80061d4:	b108      	cbz	r0, 80061da <_printf_i+0x1f2>
 80061d6:	1b40      	subs	r0, r0, r5
 80061d8:	6060      	str	r0, [r4, #4]
 80061da:	6863      	ldr	r3, [r4, #4]
 80061dc:	6123      	str	r3, [r4, #16]
 80061de:	2300      	movs	r3, #0
 80061e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e4:	e7a8      	b.n	8006138 <_printf_i+0x150>
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	462a      	mov	r2, r5
 80061ea:	4649      	mov	r1, r9
 80061ec:	4640      	mov	r0, r8
 80061ee:	47d0      	blx	sl
 80061f0:	3001      	adds	r0, #1
 80061f2:	d0ab      	beq.n	800614c <_printf_i+0x164>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	079b      	lsls	r3, r3, #30
 80061f8:	d413      	bmi.n	8006222 <_printf_i+0x23a>
 80061fa:	68e0      	ldr	r0, [r4, #12]
 80061fc:	9b03      	ldr	r3, [sp, #12]
 80061fe:	4298      	cmp	r0, r3
 8006200:	bfb8      	it	lt
 8006202:	4618      	movlt	r0, r3
 8006204:	e7a4      	b.n	8006150 <_printf_i+0x168>
 8006206:	2301      	movs	r3, #1
 8006208:	4632      	mov	r2, r6
 800620a:	4649      	mov	r1, r9
 800620c:	4640      	mov	r0, r8
 800620e:	47d0      	blx	sl
 8006210:	3001      	adds	r0, #1
 8006212:	d09b      	beq.n	800614c <_printf_i+0x164>
 8006214:	3501      	adds	r5, #1
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	9903      	ldr	r1, [sp, #12]
 800621a:	1a5b      	subs	r3, r3, r1
 800621c:	42ab      	cmp	r3, r5
 800621e:	dcf2      	bgt.n	8006206 <_printf_i+0x21e>
 8006220:	e7eb      	b.n	80061fa <_printf_i+0x212>
 8006222:	2500      	movs	r5, #0
 8006224:	f104 0619 	add.w	r6, r4, #25
 8006228:	e7f5      	b.n	8006216 <_printf_i+0x22e>
 800622a:	bf00      	nop
 800622c:	08008ca2 	.word	0x08008ca2
 8006230:	08008cb3 	.word	0x08008cb3

08006234 <siprintf>:
 8006234:	b40e      	push	{r1, r2, r3}
 8006236:	b500      	push	{lr}
 8006238:	b09c      	sub	sp, #112	; 0x70
 800623a:	ab1d      	add	r3, sp, #116	; 0x74
 800623c:	9002      	str	r0, [sp, #8]
 800623e:	9006      	str	r0, [sp, #24]
 8006240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006244:	4809      	ldr	r0, [pc, #36]	; (800626c <siprintf+0x38>)
 8006246:	9107      	str	r1, [sp, #28]
 8006248:	9104      	str	r1, [sp, #16]
 800624a:	4909      	ldr	r1, [pc, #36]	; (8006270 <siprintf+0x3c>)
 800624c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006250:	9105      	str	r1, [sp, #20]
 8006252:	6800      	ldr	r0, [r0, #0]
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	a902      	add	r1, sp, #8
 8006258:	f001 fc04 	bl	8007a64 <_svfiprintf_r>
 800625c:	9b02      	ldr	r3, [sp, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	b01c      	add	sp, #112	; 0x70
 8006264:	f85d eb04 	ldr.w	lr, [sp], #4
 8006268:	b003      	add	sp, #12
 800626a:	4770      	bx	lr
 800626c:	2000001c 	.word	0x2000001c
 8006270:	ffff0208 	.word	0xffff0208

08006274 <_strtol_l.constprop.0>:
 8006274:	2b01      	cmp	r3, #1
 8006276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800627a:	d001      	beq.n	8006280 <_strtol_l.constprop.0+0xc>
 800627c:	2b24      	cmp	r3, #36	; 0x24
 800627e:	d906      	bls.n	800628e <_strtol_l.constprop.0+0x1a>
 8006280:	f7ff fb3c 	bl	80058fc <__errno>
 8006284:	2316      	movs	r3, #22
 8006286:	6003      	str	r3, [r0, #0]
 8006288:	2000      	movs	r0, #0
 800628a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006374 <_strtol_l.constprop.0+0x100>
 8006292:	460d      	mov	r5, r1
 8006294:	462e      	mov	r6, r5
 8006296:	f815 4b01 	ldrb.w	r4, [r5], #1
 800629a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800629e:	f017 0708 	ands.w	r7, r7, #8
 80062a2:	d1f7      	bne.n	8006294 <_strtol_l.constprop.0+0x20>
 80062a4:	2c2d      	cmp	r4, #45	; 0x2d
 80062a6:	d132      	bne.n	800630e <_strtol_l.constprop.0+0x9a>
 80062a8:	782c      	ldrb	r4, [r5, #0]
 80062aa:	2701      	movs	r7, #1
 80062ac:	1cb5      	adds	r5, r6, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d05b      	beq.n	800636a <_strtol_l.constprop.0+0xf6>
 80062b2:	2b10      	cmp	r3, #16
 80062b4:	d109      	bne.n	80062ca <_strtol_l.constprop.0+0x56>
 80062b6:	2c30      	cmp	r4, #48	; 0x30
 80062b8:	d107      	bne.n	80062ca <_strtol_l.constprop.0+0x56>
 80062ba:	782c      	ldrb	r4, [r5, #0]
 80062bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80062c0:	2c58      	cmp	r4, #88	; 0x58
 80062c2:	d14d      	bne.n	8006360 <_strtol_l.constprop.0+0xec>
 80062c4:	786c      	ldrb	r4, [r5, #1]
 80062c6:	2310      	movs	r3, #16
 80062c8:	3502      	adds	r5, #2
 80062ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80062ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80062d2:	f04f 0c00 	mov.w	ip, #0
 80062d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80062da:	4666      	mov	r6, ip
 80062dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80062e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80062e4:	f1be 0f09 	cmp.w	lr, #9
 80062e8:	d816      	bhi.n	8006318 <_strtol_l.constprop.0+0xa4>
 80062ea:	4674      	mov	r4, lr
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	dd24      	ble.n	800633a <_strtol_l.constprop.0+0xc6>
 80062f0:	f1bc 0f00 	cmp.w	ip, #0
 80062f4:	db1e      	blt.n	8006334 <_strtol_l.constprop.0+0xc0>
 80062f6:	45b1      	cmp	r9, r6
 80062f8:	d31c      	bcc.n	8006334 <_strtol_l.constprop.0+0xc0>
 80062fa:	d101      	bne.n	8006300 <_strtol_l.constprop.0+0x8c>
 80062fc:	45a2      	cmp	sl, r4
 80062fe:	db19      	blt.n	8006334 <_strtol_l.constprop.0+0xc0>
 8006300:	fb06 4603 	mla	r6, r6, r3, r4
 8006304:	f04f 0c01 	mov.w	ip, #1
 8006308:	f815 4b01 	ldrb.w	r4, [r5], #1
 800630c:	e7e8      	b.n	80062e0 <_strtol_l.constprop.0+0x6c>
 800630e:	2c2b      	cmp	r4, #43	; 0x2b
 8006310:	bf04      	itt	eq
 8006312:	782c      	ldrbeq	r4, [r5, #0]
 8006314:	1cb5      	addeq	r5, r6, #2
 8006316:	e7ca      	b.n	80062ae <_strtol_l.constprop.0+0x3a>
 8006318:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800631c:	f1be 0f19 	cmp.w	lr, #25
 8006320:	d801      	bhi.n	8006326 <_strtol_l.constprop.0+0xb2>
 8006322:	3c37      	subs	r4, #55	; 0x37
 8006324:	e7e2      	b.n	80062ec <_strtol_l.constprop.0+0x78>
 8006326:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800632a:	f1be 0f19 	cmp.w	lr, #25
 800632e:	d804      	bhi.n	800633a <_strtol_l.constprop.0+0xc6>
 8006330:	3c57      	subs	r4, #87	; 0x57
 8006332:	e7db      	b.n	80062ec <_strtol_l.constprop.0+0x78>
 8006334:	f04f 3cff 	mov.w	ip, #4294967295
 8006338:	e7e6      	b.n	8006308 <_strtol_l.constprop.0+0x94>
 800633a:	f1bc 0f00 	cmp.w	ip, #0
 800633e:	da05      	bge.n	800634c <_strtol_l.constprop.0+0xd8>
 8006340:	2322      	movs	r3, #34	; 0x22
 8006342:	6003      	str	r3, [r0, #0]
 8006344:	4646      	mov	r6, r8
 8006346:	b942      	cbnz	r2, 800635a <_strtol_l.constprop.0+0xe6>
 8006348:	4630      	mov	r0, r6
 800634a:	e79e      	b.n	800628a <_strtol_l.constprop.0+0x16>
 800634c:	b107      	cbz	r7, 8006350 <_strtol_l.constprop.0+0xdc>
 800634e:	4276      	negs	r6, r6
 8006350:	2a00      	cmp	r2, #0
 8006352:	d0f9      	beq.n	8006348 <_strtol_l.constprop.0+0xd4>
 8006354:	f1bc 0f00 	cmp.w	ip, #0
 8006358:	d000      	beq.n	800635c <_strtol_l.constprop.0+0xe8>
 800635a:	1e69      	subs	r1, r5, #1
 800635c:	6011      	str	r1, [r2, #0]
 800635e:	e7f3      	b.n	8006348 <_strtol_l.constprop.0+0xd4>
 8006360:	2430      	movs	r4, #48	; 0x30
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1b1      	bne.n	80062ca <_strtol_l.constprop.0+0x56>
 8006366:	2308      	movs	r3, #8
 8006368:	e7af      	b.n	80062ca <_strtol_l.constprop.0+0x56>
 800636a:	2c30      	cmp	r4, #48	; 0x30
 800636c:	d0a5      	beq.n	80062ba <_strtol_l.constprop.0+0x46>
 800636e:	230a      	movs	r3, #10
 8006370:	e7ab      	b.n	80062ca <_strtol_l.constprop.0+0x56>
 8006372:	bf00      	nop
 8006374:	08008cc5 	.word	0x08008cc5

08006378 <strtol>:
 8006378:	4613      	mov	r3, r2
 800637a:	460a      	mov	r2, r1
 800637c:	4601      	mov	r1, r0
 800637e:	4802      	ldr	r0, [pc, #8]	; (8006388 <strtol+0x10>)
 8006380:	6800      	ldr	r0, [r0, #0]
 8006382:	f7ff bf77 	b.w	8006274 <_strtol_l.constprop.0>
 8006386:	bf00      	nop
 8006388:	2000001c 	.word	0x2000001c

0800638c <quorem>:
 800638c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006390:	6903      	ldr	r3, [r0, #16]
 8006392:	690c      	ldr	r4, [r1, #16]
 8006394:	42a3      	cmp	r3, r4
 8006396:	4607      	mov	r7, r0
 8006398:	f2c0 8081 	blt.w	800649e <quorem+0x112>
 800639c:	3c01      	subs	r4, #1
 800639e:	f101 0814 	add.w	r8, r1, #20
 80063a2:	f100 0514 	add.w	r5, r0, #20
 80063a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063b4:	3301      	adds	r3, #1
 80063b6:	429a      	cmp	r2, r3
 80063b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80063c4:	d331      	bcc.n	800642a <quorem+0x9e>
 80063c6:	f04f 0e00 	mov.w	lr, #0
 80063ca:	4640      	mov	r0, r8
 80063cc:	46ac      	mov	ip, r5
 80063ce:	46f2      	mov	sl, lr
 80063d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80063d4:	b293      	uxth	r3, r2
 80063d6:	fb06 e303 	mla	r3, r6, r3, lr
 80063da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063de:	b29b      	uxth	r3, r3
 80063e0:	ebaa 0303 	sub.w	r3, sl, r3
 80063e4:	f8dc a000 	ldr.w	sl, [ip]
 80063e8:	0c12      	lsrs	r2, r2, #16
 80063ea:	fa13 f38a 	uxtah	r3, r3, sl
 80063ee:	fb06 e202 	mla	r2, r6, r2, lr
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	9b00      	ldr	r3, [sp, #0]
 80063f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063fa:	b292      	uxth	r2, r2
 80063fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006404:	f8bd 3000 	ldrh.w	r3, [sp]
 8006408:	4581      	cmp	r9, r0
 800640a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800640e:	f84c 3b04 	str.w	r3, [ip], #4
 8006412:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006416:	d2db      	bcs.n	80063d0 <quorem+0x44>
 8006418:	f855 300b 	ldr.w	r3, [r5, fp]
 800641c:	b92b      	cbnz	r3, 800642a <quorem+0x9e>
 800641e:	9b01      	ldr	r3, [sp, #4]
 8006420:	3b04      	subs	r3, #4
 8006422:	429d      	cmp	r5, r3
 8006424:	461a      	mov	r2, r3
 8006426:	d32e      	bcc.n	8006486 <quorem+0xfa>
 8006428:	613c      	str	r4, [r7, #16]
 800642a:	4638      	mov	r0, r7
 800642c:	f001 f8c6 	bl	80075bc <__mcmp>
 8006430:	2800      	cmp	r0, #0
 8006432:	db24      	blt.n	800647e <quorem+0xf2>
 8006434:	3601      	adds	r6, #1
 8006436:	4628      	mov	r0, r5
 8006438:	f04f 0c00 	mov.w	ip, #0
 800643c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006440:	f8d0 e000 	ldr.w	lr, [r0]
 8006444:	b293      	uxth	r3, r2
 8006446:	ebac 0303 	sub.w	r3, ip, r3
 800644a:	0c12      	lsrs	r2, r2, #16
 800644c:	fa13 f38e 	uxtah	r3, r3, lr
 8006450:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006454:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800645e:	45c1      	cmp	r9, r8
 8006460:	f840 3b04 	str.w	r3, [r0], #4
 8006464:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006468:	d2e8      	bcs.n	800643c <quorem+0xb0>
 800646a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800646e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006472:	b922      	cbnz	r2, 800647e <quorem+0xf2>
 8006474:	3b04      	subs	r3, #4
 8006476:	429d      	cmp	r5, r3
 8006478:	461a      	mov	r2, r3
 800647a:	d30a      	bcc.n	8006492 <quorem+0x106>
 800647c:	613c      	str	r4, [r7, #16]
 800647e:	4630      	mov	r0, r6
 8006480:	b003      	add	sp, #12
 8006482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	3b04      	subs	r3, #4
 800648a:	2a00      	cmp	r2, #0
 800648c:	d1cc      	bne.n	8006428 <quorem+0x9c>
 800648e:	3c01      	subs	r4, #1
 8006490:	e7c7      	b.n	8006422 <quorem+0x96>
 8006492:	6812      	ldr	r2, [r2, #0]
 8006494:	3b04      	subs	r3, #4
 8006496:	2a00      	cmp	r2, #0
 8006498:	d1f0      	bne.n	800647c <quorem+0xf0>
 800649a:	3c01      	subs	r4, #1
 800649c:	e7eb      	b.n	8006476 <quorem+0xea>
 800649e:	2000      	movs	r0, #0
 80064a0:	e7ee      	b.n	8006480 <quorem+0xf4>
 80064a2:	0000      	movs	r0, r0
 80064a4:	0000      	movs	r0, r0
	...

080064a8 <_dtoa_r>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	ed2d 8b04 	vpush	{d8-d9}
 80064b0:	ec57 6b10 	vmov	r6, r7, d0
 80064b4:	b093      	sub	sp, #76	; 0x4c
 80064b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064bc:	9106      	str	r1, [sp, #24]
 80064be:	ee10 aa10 	vmov	sl, s0
 80064c2:	4604      	mov	r4, r0
 80064c4:	9209      	str	r2, [sp, #36]	; 0x24
 80064c6:	930c      	str	r3, [sp, #48]	; 0x30
 80064c8:	46bb      	mov	fp, r7
 80064ca:	b975      	cbnz	r5, 80064ea <_dtoa_r+0x42>
 80064cc:	2010      	movs	r0, #16
 80064ce:	f000 fddd 	bl	800708c <malloc>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6260      	str	r0, [r4, #36]	; 0x24
 80064d6:	b920      	cbnz	r0, 80064e2 <_dtoa_r+0x3a>
 80064d8:	4ba7      	ldr	r3, [pc, #668]	; (8006778 <_dtoa_r+0x2d0>)
 80064da:	21ea      	movs	r1, #234	; 0xea
 80064dc:	48a7      	ldr	r0, [pc, #668]	; (800677c <_dtoa_r+0x2d4>)
 80064de:	f001 fbd1 	bl	8007c84 <__assert_func>
 80064e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064e6:	6005      	str	r5, [r0, #0]
 80064e8:	60c5      	str	r5, [r0, #12]
 80064ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ec:	6819      	ldr	r1, [r3, #0]
 80064ee:	b151      	cbz	r1, 8006506 <_dtoa_r+0x5e>
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	604a      	str	r2, [r1, #4]
 80064f4:	2301      	movs	r3, #1
 80064f6:	4093      	lsls	r3, r2
 80064f8:	608b      	str	r3, [r1, #8]
 80064fa:	4620      	mov	r0, r4
 80064fc:	f000 fe1c 	bl	8007138 <_Bfree>
 8006500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	1e3b      	subs	r3, r7, #0
 8006508:	bfaa      	itet	ge
 800650a:	2300      	movge	r3, #0
 800650c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006510:	f8c8 3000 	strge.w	r3, [r8]
 8006514:	4b9a      	ldr	r3, [pc, #616]	; (8006780 <_dtoa_r+0x2d8>)
 8006516:	bfbc      	itt	lt
 8006518:	2201      	movlt	r2, #1
 800651a:	f8c8 2000 	strlt.w	r2, [r8]
 800651e:	ea33 030b 	bics.w	r3, r3, fp
 8006522:	d11b      	bne.n	800655c <_dtoa_r+0xb4>
 8006524:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006526:	f242 730f 	movw	r3, #9999	; 0x270f
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006530:	4333      	orrs	r3, r6
 8006532:	f000 8592 	beq.w	800705a <_dtoa_r+0xbb2>
 8006536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006538:	b963      	cbnz	r3, 8006554 <_dtoa_r+0xac>
 800653a:	4b92      	ldr	r3, [pc, #584]	; (8006784 <_dtoa_r+0x2dc>)
 800653c:	e022      	b.n	8006584 <_dtoa_r+0xdc>
 800653e:	4b92      	ldr	r3, [pc, #584]	; (8006788 <_dtoa_r+0x2e0>)
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	3308      	adds	r3, #8
 8006544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	9801      	ldr	r0, [sp, #4]
 800654a:	b013      	add	sp, #76	; 0x4c
 800654c:	ecbd 8b04 	vpop	{d8-d9}
 8006550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006554:	4b8b      	ldr	r3, [pc, #556]	; (8006784 <_dtoa_r+0x2dc>)
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	3303      	adds	r3, #3
 800655a:	e7f3      	b.n	8006544 <_dtoa_r+0x9c>
 800655c:	2200      	movs	r2, #0
 800655e:	2300      	movs	r3, #0
 8006560:	4650      	mov	r0, sl
 8006562:	4659      	mov	r1, fp
 8006564:	f7fa fab8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006568:	ec4b ab19 	vmov	d9, sl, fp
 800656c:	4680      	mov	r8, r0
 800656e:	b158      	cbz	r0, 8006588 <_dtoa_r+0xe0>
 8006570:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006572:	2301      	movs	r3, #1
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 856b 	beq.w	8007054 <_dtoa_r+0xbac>
 800657e:	4883      	ldr	r0, [pc, #524]	; (800678c <_dtoa_r+0x2e4>)
 8006580:	6018      	str	r0, [r3, #0]
 8006582:	1e43      	subs	r3, r0, #1
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	e7df      	b.n	8006548 <_dtoa_r+0xa0>
 8006588:	ec4b ab10 	vmov	d0, sl, fp
 800658c:	aa10      	add	r2, sp, #64	; 0x40
 800658e:	a911      	add	r1, sp, #68	; 0x44
 8006590:	4620      	mov	r0, r4
 8006592:	f001 f8b9 	bl	8007708 <__d2b>
 8006596:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800659a:	ee08 0a10 	vmov	s16, r0
 800659e:	2d00      	cmp	r5, #0
 80065a0:	f000 8084 	beq.w	80066ac <_dtoa_r+0x204>
 80065a4:	ee19 3a90 	vmov	r3, s19
 80065a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065b0:	4656      	mov	r6, sl
 80065b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065be:	4b74      	ldr	r3, [pc, #464]	; (8006790 <_dtoa_r+0x2e8>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	4630      	mov	r0, r6
 80065c4:	4639      	mov	r1, r7
 80065c6:	f7f9 fe67 	bl	8000298 <__aeabi_dsub>
 80065ca:	a365      	add	r3, pc, #404	; (adr r3, 8006760 <_dtoa_r+0x2b8>)
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f7fa f81a 	bl	8000608 <__aeabi_dmul>
 80065d4:	a364      	add	r3, pc, #400	; (adr r3, 8006768 <_dtoa_r+0x2c0>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7f9 fe5f 	bl	800029c <__adddf3>
 80065de:	4606      	mov	r6, r0
 80065e0:	4628      	mov	r0, r5
 80065e2:	460f      	mov	r7, r1
 80065e4:	f7f9 ffa6 	bl	8000534 <__aeabi_i2d>
 80065e8:	a361      	add	r3, pc, #388	; (adr r3, 8006770 <_dtoa_r+0x2c8>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7fa f80b 	bl	8000608 <__aeabi_dmul>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7f9 fe4f 	bl	800029c <__adddf3>
 80065fe:	4606      	mov	r6, r0
 8006600:	460f      	mov	r7, r1
 8006602:	f7fa fab1 	bl	8000b68 <__aeabi_d2iz>
 8006606:	2200      	movs	r2, #0
 8006608:	9000      	str	r0, [sp, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	4630      	mov	r0, r6
 800660e:	4639      	mov	r1, r7
 8006610:	f7fa fa6c 	bl	8000aec <__aeabi_dcmplt>
 8006614:	b150      	cbz	r0, 800662c <_dtoa_r+0x184>
 8006616:	9800      	ldr	r0, [sp, #0]
 8006618:	f7f9 ff8c 	bl	8000534 <__aeabi_i2d>
 800661c:	4632      	mov	r2, r6
 800661e:	463b      	mov	r3, r7
 8006620:	f7fa fa5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006624:	b910      	cbnz	r0, 800662c <_dtoa_r+0x184>
 8006626:	9b00      	ldr	r3, [sp, #0]
 8006628:	3b01      	subs	r3, #1
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	9b00      	ldr	r3, [sp, #0]
 800662e:	2b16      	cmp	r3, #22
 8006630:	d85a      	bhi.n	80066e8 <_dtoa_r+0x240>
 8006632:	9a00      	ldr	r2, [sp, #0]
 8006634:	4b57      	ldr	r3, [pc, #348]	; (8006794 <_dtoa_r+0x2ec>)
 8006636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	ec51 0b19 	vmov	r0, r1, d9
 8006642:	f7fa fa53 	bl	8000aec <__aeabi_dcmplt>
 8006646:	2800      	cmp	r0, #0
 8006648:	d050      	beq.n	80066ec <_dtoa_r+0x244>
 800664a:	9b00      	ldr	r3, [sp, #0]
 800664c:	3b01      	subs	r3, #1
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	2300      	movs	r3, #0
 8006652:	930b      	str	r3, [sp, #44]	; 0x2c
 8006654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006656:	1b5d      	subs	r5, r3, r5
 8006658:	1e6b      	subs	r3, r5, #1
 800665a:	9305      	str	r3, [sp, #20]
 800665c:	bf45      	ittet	mi
 800665e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006662:	9304      	strmi	r3, [sp, #16]
 8006664:	2300      	movpl	r3, #0
 8006666:	2300      	movmi	r3, #0
 8006668:	bf4c      	ite	mi
 800666a:	9305      	strmi	r3, [sp, #20]
 800666c:	9304      	strpl	r3, [sp, #16]
 800666e:	9b00      	ldr	r3, [sp, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	db3d      	blt.n	80066f0 <_dtoa_r+0x248>
 8006674:	9b05      	ldr	r3, [sp, #20]
 8006676:	9a00      	ldr	r2, [sp, #0]
 8006678:	920a      	str	r2, [sp, #40]	; 0x28
 800667a:	4413      	add	r3, r2
 800667c:	9305      	str	r3, [sp, #20]
 800667e:	2300      	movs	r3, #0
 8006680:	9307      	str	r3, [sp, #28]
 8006682:	9b06      	ldr	r3, [sp, #24]
 8006684:	2b09      	cmp	r3, #9
 8006686:	f200 8089 	bhi.w	800679c <_dtoa_r+0x2f4>
 800668a:	2b05      	cmp	r3, #5
 800668c:	bfc4      	itt	gt
 800668e:	3b04      	subgt	r3, #4
 8006690:	9306      	strgt	r3, [sp, #24]
 8006692:	9b06      	ldr	r3, [sp, #24]
 8006694:	f1a3 0302 	sub.w	r3, r3, #2
 8006698:	bfcc      	ite	gt
 800669a:	2500      	movgt	r5, #0
 800669c:	2501      	movle	r5, #1
 800669e:	2b03      	cmp	r3, #3
 80066a0:	f200 8087 	bhi.w	80067b2 <_dtoa_r+0x30a>
 80066a4:	e8df f003 	tbb	[pc, r3]
 80066a8:	59383a2d 	.word	0x59383a2d
 80066ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066b0:	441d      	add	r5, r3
 80066b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	bfc1      	itttt	gt
 80066ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80066c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066ca:	bfda      	itte	le
 80066cc:	f1c3 0320 	rsble	r3, r3, #32
 80066d0:	fa06 f003 	lslle.w	r0, r6, r3
 80066d4:	4318      	orrgt	r0, r3
 80066d6:	f7f9 ff1d 	bl	8000514 <__aeabi_ui2d>
 80066da:	2301      	movs	r3, #1
 80066dc:	4606      	mov	r6, r0
 80066de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066e2:	3d01      	subs	r5, #1
 80066e4:	930e      	str	r3, [sp, #56]	; 0x38
 80066e6:	e76a      	b.n	80065be <_dtoa_r+0x116>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e7b2      	b.n	8006652 <_dtoa_r+0x1aa>
 80066ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80066ee:	e7b1      	b.n	8006654 <_dtoa_r+0x1ac>
 80066f0:	9b04      	ldr	r3, [sp, #16]
 80066f2:	9a00      	ldr	r2, [sp, #0]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	4253      	negs	r3, r2
 80066fa:	9307      	str	r3, [sp, #28]
 80066fc:	2300      	movs	r3, #0
 80066fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006700:	e7bf      	b.n	8006682 <_dtoa_r+0x1da>
 8006702:	2300      	movs	r3, #0
 8006704:	9308      	str	r3, [sp, #32]
 8006706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	dc55      	bgt.n	80067b8 <_dtoa_r+0x310>
 800670c:	2301      	movs	r3, #1
 800670e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006712:	461a      	mov	r2, r3
 8006714:	9209      	str	r2, [sp, #36]	; 0x24
 8006716:	e00c      	b.n	8006732 <_dtoa_r+0x28a>
 8006718:	2301      	movs	r3, #1
 800671a:	e7f3      	b.n	8006704 <_dtoa_r+0x25c>
 800671c:	2300      	movs	r3, #0
 800671e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006720:	9308      	str	r3, [sp, #32]
 8006722:	9b00      	ldr	r3, [sp, #0]
 8006724:	4413      	add	r3, r2
 8006726:	9302      	str	r3, [sp, #8]
 8006728:	3301      	adds	r3, #1
 800672a:	2b01      	cmp	r3, #1
 800672c:	9303      	str	r3, [sp, #12]
 800672e:	bfb8      	it	lt
 8006730:	2301      	movlt	r3, #1
 8006732:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006734:	2200      	movs	r2, #0
 8006736:	6042      	str	r2, [r0, #4]
 8006738:	2204      	movs	r2, #4
 800673a:	f102 0614 	add.w	r6, r2, #20
 800673e:	429e      	cmp	r6, r3
 8006740:	6841      	ldr	r1, [r0, #4]
 8006742:	d93d      	bls.n	80067c0 <_dtoa_r+0x318>
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fcb7 	bl	80070b8 <_Balloc>
 800674a:	9001      	str	r0, [sp, #4]
 800674c:	2800      	cmp	r0, #0
 800674e:	d13b      	bne.n	80067c8 <_dtoa_r+0x320>
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <_dtoa_r+0x2f0>)
 8006752:	4602      	mov	r2, r0
 8006754:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006758:	e6c0      	b.n	80064dc <_dtoa_r+0x34>
 800675a:	2301      	movs	r3, #1
 800675c:	e7df      	b.n	800671e <_dtoa_r+0x276>
 800675e:	bf00      	nop
 8006760:	636f4361 	.word	0x636f4361
 8006764:	3fd287a7 	.word	0x3fd287a7
 8006768:	8b60c8b3 	.word	0x8b60c8b3
 800676c:	3fc68a28 	.word	0x3fc68a28
 8006770:	509f79fb 	.word	0x509f79fb
 8006774:	3fd34413 	.word	0x3fd34413
 8006778:	08008dd2 	.word	0x08008dd2
 800677c:	08008de9 	.word	0x08008de9
 8006780:	7ff00000 	.word	0x7ff00000
 8006784:	08008dce 	.word	0x08008dce
 8006788:	08008dc5 	.word	0x08008dc5
 800678c:	08008ca1 	.word	0x08008ca1
 8006790:	3ff80000 	.word	0x3ff80000
 8006794:	08008ee0 	.word	0x08008ee0
 8006798:	08008e44 	.word	0x08008e44
 800679c:	2501      	movs	r5, #1
 800679e:	2300      	movs	r3, #0
 80067a0:	9306      	str	r3, [sp, #24]
 80067a2:	9508      	str	r5, [sp, #32]
 80067a4:	f04f 33ff 	mov.w	r3, #4294967295
 80067a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2312      	movs	r3, #18
 80067b0:	e7b0      	b.n	8006714 <_dtoa_r+0x26c>
 80067b2:	2301      	movs	r3, #1
 80067b4:	9308      	str	r3, [sp, #32]
 80067b6:	e7f5      	b.n	80067a4 <_dtoa_r+0x2fc>
 80067b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067be:	e7b8      	b.n	8006732 <_dtoa_r+0x28a>
 80067c0:	3101      	adds	r1, #1
 80067c2:	6041      	str	r1, [r0, #4]
 80067c4:	0052      	lsls	r2, r2, #1
 80067c6:	e7b8      	b.n	800673a <_dtoa_r+0x292>
 80067c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ca:	9a01      	ldr	r2, [sp, #4]
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	9b03      	ldr	r3, [sp, #12]
 80067d0:	2b0e      	cmp	r3, #14
 80067d2:	f200 809d 	bhi.w	8006910 <_dtoa_r+0x468>
 80067d6:	2d00      	cmp	r5, #0
 80067d8:	f000 809a 	beq.w	8006910 <_dtoa_r+0x468>
 80067dc:	9b00      	ldr	r3, [sp, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	dd32      	ble.n	8006848 <_dtoa_r+0x3a0>
 80067e2:	4ab7      	ldr	r2, [pc, #732]	; (8006ac0 <_dtoa_r+0x618>)
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067f0:	9b00      	ldr	r3, [sp, #0]
 80067f2:	05d8      	lsls	r0, r3, #23
 80067f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067f8:	d516      	bpl.n	8006828 <_dtoa_r+0x380>
 80067fa:	4bb2      	ldr	r3, [pc, #712]	; (8006ac4 <_dtoa_r+0x61c>)
 80067fc:	ec51 0b19 	vmov	r0, r1, d9
 8006800:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006804:	f7fa f82a 	bl	800085c <__aeabi_ddiv>
 8006808:	f007 070f 	and.w	r7, r7, #15
 800680c:	4682      	mov	sl, r0
 800680e:	468b      	mov	fp, r1
 8006810:	2503      	movs	r5, #3
 8006812:	4eac      	ldr	r6, [pc, #688]	; (8006ac4 <_dtoa_r+0x61c>)
 8006814:	b957      	cbnz	r7, 800682c <_dtoa_r+0x384>
 8006816:	4642      	mov	r2, r8
 8006818:	464b      	mov	r3, r9
 800681a:	4650      	mov	r0, sl
 800681c:	4659      	mov	r1, fp
 800681e:	f7fa f81d 	bl	800085c <__aeabi_ddiv>
 8006822:	4682      	mov	sl, r0
 8006824:	468b      	mov	fp, r1
 8006826:	e028      	b.n	800687a <_dtoa_r+0x3d2>
 8006828:	2502      	movs	r5, #2
 800682a:	e7f2      	b.n	8006812 <_dtoa_r+0x36a>
 800682c:	07f9      	lsls	r1, r7, #31
 800682e:	d508      	bpl.n	8006842 <_dtoa_r+0x39a>
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006838:	f7f9 fee6 	bl	8000608 <__aeabi_dmul>
 800683c:	3501      	adds	r5, #1
 800683e:	4680      	mov	r8, r0
 8006840:	4689      	mov	r9, r1
 8006842:	107f      	asrs	r7, r7, #1
 8006844:	3608      	adds	r6, #8
 8006846:	e7e5      	b.n	8006814 <_dtoa_r+0x36c>
 8006848:	f000 809b 	beq.w	8006982 <_dtoa_r+0x4da>
 800684c:	9b00      	ldr	r3, [sp, #0]
 800684e:	4f9d      	ldr	r7, [pc, #628]	; (8006ac4 <_dtoa_r+0x61c>)
 8006850:	425e      	negs	r6, r3
 8006852:	4b9b      	ldr	r3, [pc, #620]	; (8006ac0 <_dtoa_r+0x618>)
 8006854:	f006 020f 	and.w	r2, r6, #15
 8006858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	ec51 0b19 	vmov	r0, r1, d9
 8006864:	f7f9 fed0 	bl	8000608 <__aeabi_dmul>
 8006868:	1136      	asrs	r6, r6, #4
 800686a:	4682      	mov	sl, r0
 800686c:	468b      	mov	fp, r1
 800686e:	2300      	movs	r3, #0
 8006870:	2502      	movs	r5, #2
 8006872:	2e00      	cmp	r6, #0
 8006874:	d17a      	bne.n	800696c <_dtoa_r+0x4c4>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1d3      	bne.n	8006822 <_dtoa_r+0x37a>
 800687a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8082 	beq.w	8006986 <_dtoa_r+0x4de>
 8006882:	4b91      	ldr	r3, [pc, #580]	; (8006ac8 <_dtoa_r+0x620>)
 8006884:	2200      	movs	r2, #0
 8006886:	4650      	mov	r0, sl
 8006888:	4659      	mov	r1, fp
 800688a:	f7fa f92f 	bl	8000aec <__aeabi_dcmplt>
 800688e:	2800      	cmp	r0, #0
 8006890:	d079      	beq.n	8006986 <_dtoa_r+0x4de>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d076      	beq.n	8006986 <_dtoa_r+0x4de>
 8006898:	9b02      	ldr	r3, [sp, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	dd36      	ble.n	800690c <_dtoa_r+0x464>
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	4650      	mov	r0, sl
 80068a2:	4659      	mov	r1, fp
 80068a4:	1e5f      	subs	r7, r3, #1
 80068a6:	2200      	movs	r2, #0
 80068a8:	4b88      	ldr	r3, [pc, #544]	; (8006acc <_dtoa_r+0x624>)
 80068aa:	f7f9 fead 	bl	8000608 <__aeabi_dmul>
 80068ae:	9e02      	ldr	r6, [sp, #8]
 80068b0:	4682      	mov	sl, r0
 80068b2:	468b      	mov	fp, r1
 80068b4:	3501      	adds	r5, #1
 80068b6:	4628      	mov	r0, r5
 80068b8:	f7f9 fe3c 	bl	8000534 <__aeabi_i2d>
 80068bc:	4652      	mov	r2, sl
 80068be:	465b      	mov	r3, fp
 80068c0:	f7f9 fea2 	bl	8000608 <__aeabi_dmul>
 80068c4:	4b82      	ldr	r3, [pc, #520]	; (8006ad0 <_dtoa_r+0x628>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	f7f9 fce8 	bl	800029c <__adddf3>
 80068cc:	46d0      	mov	r8, sl
 80068ce:	46d9      	mov	r9, fp
 80068d0:	4682      	mov	sl, r0
 80068d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	d158      	bne.n	800698c <_dtoa_r+0x4e4>
 80068da:	4b7e      	ldr	r3, [pc, #504]	; (8006ad4 <_dtoa_r+0x62c>)
 80068dc:	2200      	movs	r2, #0
 80068de:	4640      	mov	r0, r8
 80068e0:	4649      	mov	r1, r9
 80068e2:	f7f9 fcd9 	bl	8000298 <__aeabi_dsub>
 80068e6:	4652      	mov	r2, sl
 80068e8:	465b      	mov	r3, fp
 80068ea:	4680      	mov	r8, r0
 80068ec:	4689      	mov	r9, r1
 80068ee:	f7fa f91b 	bl	8000b28 <__aeabi_dcmpgt>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f040 8295 	bne.w	8006e22 <_dtoa_r+0x97a>
 80068f8:	4652      	mov	r2, sl
 80068fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068fe:	4640      	mov	r0, r8
 8006900:	4649      	mov	r1, r9
 8006902:	f7fa f8f3 	bl	8000aec <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	f040 8289 	bne.w	8006e1e <_dtoa_r+0x976>
 800690c:	ec5b ab19 	vmov	sl, fp, d9
 8006910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006912:	2b00      	cmp	r3, #0
 8006914:	f2c0 8148 	blt.w	8006ba8 <_dtoa_r+0x700>
 8006918:	9a00      	ldr	r2, [sp, #0]
 800691a:	2a0e      	cmp	r2, #14
 800691c:	f300 8144 	bgt.w	8006ba8 <_dtoa_r+0x700>
 8006920:	4b67      	ldr	r3, [pc, #412]	; (8006ac0 <_dtoa_r+0x618>)
 8006922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006926:	e9d3 8900 	ldrd	r8, r9, [r3]
 800692a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692c:	2b00      	cmp	r3, #0
 800692e:	f280 80d5 	bge.w	8006adc <_dtoa_r+0x634>
 8006932:	9b03      	ldr	r3, [sp, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f300 80d1 	bgt.w	8006adc <_dtoa_r+0x634>
 800693a:	f040 826f 	bne.w	8006e1c <_dtoa_r+0x974>
 800693e:	4b65      	ldr	r3, [pc, #404]	; (8006ad4 <_dtoa_r+0x62c>)
 8006940:	2200      	movs	r2, #0
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f7f9 fe5f 	bl	8000608 <__aeabi_dmul>
 800694a:	4652      	mov	r2, sl
 800694c:	465b      	mov	r3, fp
 800694e:	f7fa f8e1 	bl	8000b14 <__aeabi_dcmpge>
 8006952:	9e03      	ldr	r6, [sp, #12]
 8006954:	4637      	mov	r7, r6
 8006956:	2800      	cmp	r0, #0
 8006958:	f040 8245 	bne.w	8006de6 <_dtoa_r+0x93e>
 800695c:	9d01      	ldr	r5, [sp, #4]
 800695e:	2331      	movs	r3, #49	; 0x31
 8006960:	f805 3b01 	strb.w	r3, [r5], #1
 8006964:	9b00      	ldr	r3, [sp, #0]
 8006966:	3301      	adds	r3, #1
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	e240      	b.n	8006dee <_dtoa_r+0x946>
 800696c:	07f2      	lsls	r2, r6, #31
 800696e:	d505      	bpl.n	800697c <_dtoa_r+0x4d4>
 8006970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006974:	f7f9 fe48 	bl	8000608 <__aeabi_dmul>
 8006978:	3501      	adds	r5, #1
 800697a:	2301      	movs	r3, #1
 800697c:	1076      	asrs	r6, r6, #1
 800697e:	3708      	adds	r7, #8
 8006980:	e777      	b.n	8006872 <_dtoa_r+0x3ca>
 8006982:	2502      	movs	r5, #2
 8006984:	e779      	b.n	800687a <_dtoa_r+0x3d2>
 8006986:	9f00      	ldr	r7, [sp, #0]
 8006988:	9e03      	ldr	r6, [sp, #12]
 800698a:	e794      	b.n	80068b6 <_dtoa_r+0x40e>
 800698c:	9901      	ldr	r1, [sp, #4]
 800698e:	4b4c      	ldr	r3, [pc, #304]	; (8006ac0 <_dtoa_r+0x618>)
 8006990:	4431      	add	r1, r6
 8006992:	910d      	str	r1, [sp, #52]	; 0x34
 8006994:	9908      	ldr	r1, [sp, #32]
 8006996:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800699a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800699e:	2900      	cmp	r1, #0
 80069a0:	d043      	beq.n	8006a2a <_dtoa_r+0x582>
 80069a2:	494d      	ldr	r1, [pc, #308]	; (8006ad8 <_dtoa_r+0x630>)
 80069a4:	2000      	movs	r0, #0
 80069a6:	f7f9 ff59 	bl	800085c <__aeabi_ddiv>
 80069aa:	4652      	mov	r2, sl
 80069ac:	465b      	mov	r3, fp
 80069ae:	f7f9 fc73 	bl	8000298 <__aeabi_dsub>
 80069b2:	9d01      	ldr	r5, [sp, #4]
 80069b4:	4682      	mov	sl, r0
 80069b6:	468b      	mov	fp, r1
 80069b8:	4649      	mov	r1, r9
 80069ba:	4640      	mov	r0, r8
 80069bc:	f7fa f8d4 	bl	8000b68 <__aeabi_d2iz>
 80069c0:	4606      	mov	r6, r0
 80069c2:	f7f9 fdb7 	bl	8000534 <__aeabi_i2d>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4640      	mov	r0, r8
 80069cc:	4649      	mov	r1, r9
 80069ce:	f7f9 fc63 	bl	8000298 <__aeabi_dsub>
 80069d2:	3630      	adds	r6, #48	; 0x30
 80069d4:	f805 6b01 	strb.w	r6, [r5], #1
 80069d8:	4652      	mov	r2, sl
 80069da:	465b      	mov	r3, fp
 80069dc:	4680      	mov	r8, r0
 80069de:	4689      	mov	r9, r1
 80069e0:	f7fa f884 	bl	8000aec <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d163      	bne.n	8006ab0 <_dtoa_r+0x608>
 80069e8:	4642      	mov	r2, r8
 80069ea:	464b      	mov	r3, r9
 80069ec:	4936      	ldr	r1, [pc, #216]	; (8006ac8 <_dtoa_r+0x620>)
 80069ee:	2000      	movs	r0, #0
 80069f0:	f7f9 fc52 	bl	8000298 <__aeabi_dsub>
 80069f4:	4652      	mov	r2, sl
 80069f6:	465b      	mov	r3, fp
 80069f8:	f7fa f878 	bl	8000aec <__aeabi_dcmplt>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f040 80b5 	bne.w	8006b6c <_dtoa_r+0x6c4>
 8006a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a04:	429d      	cmp	r5, r3
 8006a06:	d081      	beq.n	800690c <_dtoa_r+0x464>
 8006a08:	4b30      	ldr	r3, [pc, #192]	; (8006acc <_dtoa_r+0x624>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4650      	mov	r0, sl
 8006a0e:	4659      	mov	r1, fp
 8006a10:	f7f9 fdfa 	bl	8000608 <__aeabi_dmul>
 8006a14:	4b2d      	ldr	r3, [pc, #180]	; (8006acc <_dtoa_r+0x624>)
 8006a16:	4682      	mov	sl, r0
 8006a18:	468b      	mov	fp, r1
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f7f9 fdf2 	bl	8000608 <__aeabi_dmul>
 8006a24:	4680      	mov	r8, r0
 8006a26:	4689      	mov	r9, r1
 8006a28:	e7c6      	b.n	80069b8 <_dtoa_r+0x510>
 8006a2a:	4650      	mov	r0, sl
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	f7f9 fdeb 	bl	8000608 <__aeabi_dmul>
 8006a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a34:	9d01      	ldr	r5, [sp, #4]
 8006a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a38:	4682      	mov	sl, r0
 8006a3a:	468b      	mov	fp, r1
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	4640      	mov	r0, r8
 8006a40:	f7fa f892 	bl	8000b68 <__aeabi_d2iz>
 8006a44:	4606      	mov	r6, r0
 8006a46:	f7f9 fd75 	bl	8000534 <__aeabi_i2d>
 8006a4a:	3630      	adds	r6, #48	; 0x30
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4640      	mov	r0, r8
 8006a52:	4649      	mov	r1, r9
 8006a54:	f7f9 fc20 	bl	8000298 <__aeabi_dsub>
 8006a58:	f805 6b01 	strb.w	r6, [r5], #1
 8006a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a5e:	429d      	cmp	r5, r3
 8006a60:	4680      	mov	r8, r0
 8006a62:	4689      	mov	r9, r1
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	d124      	bne.n	8006ab4 <_dtoa_r+0x60c>
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <_dtoa_r+0x630>)
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	4659      	mov	r1, fp
 8006a70:	f7f9 fc14 	bl	800029c <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4640      	mov	r0, r8
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	f7fa f854 	bl	8000b28 <__aeabi_dcmpgt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d173      	bne.n	8006b6c <_dtoa_r+0x6c4>
 8006a84:	4652      	mov	r2, sl
 8006a86:	465b      	mov	r3, fp
 8006a88:	4913      	ldr	r1, [pc, #76]	; (8006ad8 <_dtoa_r+0x630>)
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f7f9 fc04 	bl	8000298 <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4640      	mov	r0, r8
 8006a96:	4649      	mov	r1, r9
 8006a98:	f7fa f828 	bl	8000aec <__aeabi_dcmplt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f43f af35 	beq.w	800690c <_dtoa_r+0x464>
 8006aa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006aa4:	1e6b      	subs	r3, r5, #1
 8006aa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	d0f8      	beq.n	8006aa2 <_dtoa_r+0x5fa>
 8006ab0:	9700      	str	r7, [sp, #0]
 8006ab2:	e049      	b.n	8006b48 <_dtoa_r+0x6a0>
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <_dtoa_r+0x624>)
 8006ab6:	f7f9 fda7 	bl	8000608 <__aeabi_dmul>
 8006aba:	4680      	mov	r8, r0
 8006abc:	4689      	mov	r9, r1
 8006abe:	e7bd      	b.n	8006a3c <_dtoa_r+0x594>
 8006ac0:	08008ee0 	.word	0x08008ee0
 8006ac4:	08008eb8 	.word	0x08008eb8
 8006ac8:	3ff00000 	.word	0x3ff00000
 8006acc:	40240000 	.word	0x40240000
 8006ad0:	401c0000 	.word	0x401c0000
 8006ad4:	40140000 	.word	0x40140000
 8006ad8:	3fe00000 	.word	0x3fe00000
 8006adc:	9d01      	ldr	r5, [sp, #4]
 8006ade:	4656      	mov	r6, sl
 8006ae0:	465f      	mov	r7, fp
 8006ae2:	4642      	mov	r2, r8
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4639      	mov	r1, r7
 8006aea:	f7f9 feb7 	bl	800085c <__aeabi_ddiv>
 8006aee:	f7fa f83b 	bl	8000b68 <__aeabi_d2iz>
 8006af2:	4682      	mov	sl, r0
 8006af4:	f7f9 fd1e 	bl	8000534 <__aeabi_i2d>
 8006af8:	4642      	mov	r2, r8
 8006afa:	464b      	mov	r3, r9
 8006afc:	f7f9 fd84 	bl	8000608 <__aeabi_dmul>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4630      	mov	r0, r6
 8006b06:	4639      	mov	r1, r7
 8006b08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b0c:	f7f9 fbc4 	bl	8000298 <__aeabi_dsub>
 8006b10:	f805 6b01 	strb.w	r6, [r5], #1
 8006b14:	9e01      	ldr	r6, [sp, #4]
 8006b16:	9f03      	ldr	r7, [sp, #12]
 8006b18:	1bae      	subs	r6, r5, r6
 8006b1a:	42b7      	cmp	r7, r6
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	d135      	bne.n	8006b8e <_dtoa_r+0x6e6>
 8006b22:	f7f9 fbbb 	bl	800029c <__adddf3>
 8006b26:	4642      	mov	r2, r8
 8006b28:	464b      	mov	r3, r9
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	f7f9 fffb 	bl	8000b28 <__aeabi_dcmpgt>
 8006b32:	b9d0      	cbnz	r0, 8006b6a <_dtoa_r+0x6c2>
 8006b34:	4642      	mov	r2, r8
 8006b36:	464b      	mov	r3, r9
 8006b38:	4630      	mov	r0, r6
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	f7f9 ffcc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b40:	b110      	cbz	r0, 8006b48 <_dtoa_r+0x6a0>
 8006b42:	f01a 0f01 	tst.w	sl, #1
 8006b46:	d110      	bne.n	8006b6a <_dtoa_r+0x6c2>
 8006b48:	4620      	mov	r0, r4
 8006b4a:	ee18 1a10 	vmov	r1, s16
 8006b4e:	f000 faf3 	bl	8007138 <_Bfree>
 8006b52:	2300      	movs	r3, #0
 8006b54:	9800      	ldr	r0, [sp, #0]
 8006b56:	702b      	strb	r3, [r5, #0]
 8006b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	6018      	str	r0, [r3, #0]
 8006b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f43f acf1 	beq.w	8006548 <_dtoa_r+0xa0>
 8006b66:	601d      	str	r5, [r3, #0]
 8006b68:	e4ee      	b.n	8006548 <_dtoa_r+0xa0>
 8006b6a:	9f00      	ldr	r7, [sp, #0]
 8006b6c:	462b      	mov	r3, r5
 8006b6e:	461d      	mov	r5, r3
 8006b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b74:	2a39      	cmp	r2, #57	; 0x39
 8006b76:	d106      	bne.n	8006b86 <_dtoa_r+0x6de>
 8006b78:	9a01      	ldr	r2, [sp, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d1f7      	bne.n	8006b6e <_dtoa_r+0x6c6>
 8006b7e:	9901      	ldr	r1, [sp, #4]
 8006b80:	2230      	movs	r2, #48	; 0x30
 8006b82:	3701      	adds	r7, #1
 8006b84:	700a      	strb	r2, [r1, #0]
 8006b86:	781a      	ldrb	r2, [r3, #0]
 8006b88:	3201      	adds	r2, #1
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e790      	b.n	8006ab0 <_dtoa_r+0x608>
 8006b8e:	4ba6      	ldr	r3, [pc, #664]	; (8006e28 <_dtoa_r+0x980>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	f7f9 fd39 	bl	8000608 <__aeabi_dmul>
 8006b96:	2200      	movs	r2, #0
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	460f      	mov	r7, r1
 8006b9e:	f7f9 ff9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d09d      	beq.n	8006ae2 <_dtoa_r+0x63a>
 8006ba6:	e7cf      	b.n	8006b48 <_dtoa_r+0x6a0>
 8006ba8:	9a08      	ldr	r2, [sp, #32]
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	f000 80d7 	beq.w	8006d5e <_dtoa_r+0x8b6>
 8006bb0:	9a06      	ldr	r2, [sp, #24]
 8006bb2:	2a01      	cmp	r2, #1
 8006bb4:	f300 80ba 	bgt.w	8006d2c <_dtoa_r+0x884>
 8006bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	f000 80b2 	beq.w	8006d24 <_dtoa_r+0x87c>
 8006bc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bc4:	9e07      	ldr	r6, [sp, #28]
 8006bc6:	9d04      	ldr	r5, [sp, #16]
 8006bc8:	9a04      	ldr	r2, [sp, #16]
 8006bca:	441a      	add	r2, r3
 8006bcc:	9204      	str	r2, [sp, #16]
 8006bce:	9a05      	ldr	r2, [sp, #20]
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	441a      	add	r2, r3
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	9205      	str	r2, [sp, #20]
 8006bd8:	f000 fb66 	bl	80072a8 <__i2b>
 8006bdc:	4607      	mov	r7, r0
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	dd0c      	ble.n	8006bfc <_dtoa_r+0x754>
 8006be2:	9b05      	ldr	r3, [sp, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dd09      	ble.n	8006bfc <_dtoa_r+0x754>
 8006be8:	42ab      	cmp	r3, r5
 8006bea:	9a04      	ldr	r2, [sp, #16]
 8006bec:	bfa8      	it	ge
 8006bee:	462b      	movge	r3, r5
 8006bf0:	1ad2      	subs	r2, r2, r3
 8006bf2:	9204      	str	r2, [sp, #16]
 8006bf4:	9a05      	ldr	r2, [sp, #20]
 8006bf6:	1aed      	subs	r5, r5, r3
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	9b07      	ldr	r3, [sp, #28]
 8006bfe:	b31b      	cbz	r3, 8006c48 <_dtoa_r+0x7a0>
 8006c00:	9b08      	ldr	r3, [sp, #32]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 80af 	beq.w	8006d66 <_dtoa_r+0x8be>
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	dd13      	ble.n	8006c34 <_dtoa_r+0x78c>
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	4632      	mov	r2, r6
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 fc09 	bl	8007428 <__pow5mult>
 8006c16:	ee18 2a10 	vmov	r2, s16
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 fb58 	bl	80072d4 <__multiply>
 8006c24:	ee18 1a10 	vmov	r1, s16
 8006c28:	4680      	mov	r8, r0
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 fa84 	bl	8007138 <_Bfree>
 8006c30:	ee08 8a10 	vmov	s16, r8
 8006c34:	9b07      	ldr	r3, [sp, #28]
 8006c36:	1b9a      	subs	r2, r3, r6
 8006c38:	d006      	beq.n	8006c48 <_dtoa_r+0x7a0>
 8006c3a:	ee18 1a10 	vmov	r1, s16
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 fbf2 	bl	8007428 <__pow5mult>
 8006c44:	ee08 0a10 	vmov	s16, r0
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fb2c 	bl	80072a8 <__i2b>
 8006c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	4606      	mov	r6, r0
 8006c56:	f340 8088 	ble.w	8006d6a <_dtoa_r+0x8c2>
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 fbe2 	bl	8007428 <__pow5mult>
 8006c64:	9b06      	ldr	r3, [sp, #24]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	4606      	mov	r6, r0
 8006c6a:	f340 8081 	ble.w	8006d70 <_dtoa_r+0x8c8>
 8006c6e:	f04f 0800 	mov.w	r8, #0
 8006c72:	6933      	ldr	r3, [r6, #16]
 8006c74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c78:	6918      	ldr	r0, [r3, #16]
 8006c7a:	f000 fac5 	bl	8007208 <__hi0bits>
 8006c7e:	f1c0 0020 	rsb	r0, r0, #32
 8006c82:	9b05      	ldr	r3, [sp, #20]
 8006c84:	4418      	add	r0, r3
 8006c86:	f010 001f 	ands.w	r0, r0, #31
 8006c8a:	f000 8092 	beq.w	8006db2 <_dtoa_r+0x90a>
 8006c8e:	f1c0 0320 	rsb	r3, r0, #32
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	f340 808a 	ble.w	8006dac <_dtoa_r+0x904>
 8006c98:	f1c0 001c 	rsb	r0, r0, #28
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	4403      	add	r3, r0
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	9b05      	ldr	r3, [sp, #20]
 8006ca4:	4403      	add	r3, r0
 8006ca6:	4405      	add	r5, r0
 8006ca8:	9305      	str	r3, [sp, #20]
 8006caa:	9b04      	ldr	r3, [sp, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd07      	ble.n	8006cc0 <_dtoa_r+0x818>
 8006cb0:	ee18 1a10 	vmov	r1, s16
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 fc10 	bl	80074dc <__lshift>
 8006cbc:	ee08 0a10 	vmov	s16, r0
 8006cc0:	9b05      	ldr	r3, [sp, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	dd05      	ble.n	8006cd2 <_dtoa_r+0x82a>
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 fc06 	bl	80074dc <__lshift>
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d06e      	beq.n	8006db6 <_dtoa_r+0x90e>
 8006cd8:	ee18 0a10 	vmov	r0, s16
 8006cdc:	4631      	mov	r1, r6
 8006cde:	f000 fc6d 	bl	80075bc <__mcmp>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	da67      	bge.n	8006db6 <_dtoa_r+0x90e>
 8006ce6:	9b00      	ldr	r3, [sp, #0]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	ee18 1a10 	vmov	r1, s16
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 fa41 	bl	800717c <__multadd>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	ee08 0a10 	vmov	s16, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 81b1 	beq.w	8007068 <_dtoa_r+0xbc0>
 8006d06:	2300      	movs	r3, #0
 8006d08:	4639      	mov	r1, r7
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fa35 	bl	800717c <__multadd>
 8006d12:	9b02      	ldr	r3, [sp, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	4607      	mov	r7, r0
 8006d18:	f300 808e 	bgt.w	8006e38 <_dtoa_r+0x990>
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	dc51      	bgt.n	8006dc6 <_dtoa_r+0x91e>
 8006d22:	e089      	b.n	8006e38 <_dtoa_r+0x990>
 8006d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d2a:	e74b      	b.n	8006bc4 <_dtoa_r+0x71c>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	1e5e      	subs	r6, r3, #1
 8006d30:	9b07      	ldr	r3, [sp, #28]
 8006d32:	42b3      	cmp	r3, r6
 8006d34:	bfbf      	itttt	lt
 8006d36:	9b07      	ldrlt	r3, [sp, #28]
 8006d38:	9607      	strlt	r6, [sp, #28]
 8006d3a:	1af2      	sublt	r2, r6, r3
 8006d3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d3e:	bfb6      	itet	lt
 8006d40:	189b      	addlt	r3, r3, r2
 8006d42:	1b9e      	subge	r6, r3, r6
 8006d44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	bfb8      	it	lt
 8006d4a:	2600      	movlt	r6, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bfb7      	itett	lt
 8006d50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d58:	1a9d      	sublt	r5, r3, r2
 8006d5a:	2300      	movlt	r3, #0
 8006d5c:	e734      	b.n	8006bc8 <_dtoa_r+0x720>
 8006d5e:	9e07      	ldr	r6, [sp, #28]
 8006d60:	9d04      	ldr	r5, [sp, #16]
 8006d62:	9f08      	ldr	r7, [sp, #32]
 8006d64:	e73b      	b.n	8006bde <_dtoa_r+0x736>
 8006d66:	9a07      	ldr	r2, [sp, #28]
 8006d68:	e767      	b.n	8006c3a <_dtoa_r+0x792>
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	dc18      	bgt.n	8006da2 <_dtoa_r+0x8fa>
 8006d70:	f1ba 0f00 	cmp.w	sl, #0
 8006d74:	d115      	bne.n	8006da2 <_dtoa_r+0x8fa>
 8006d76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d7a:	b993      	cbnz	r3, 8006da2 <_dtoa_r+0x8fa>
 8006d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d80:	0d1b      	lsrs	r3, r3, #20
 8006d82:	051b      	lsls	r3, r3, #20
 8006d84:	b183      	cbz	r3, 8006da8 <_dtoa_r+0x900>
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	9b05      	ldr	r3, [sp, #20]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	9305      	str	r3, [sp, #20]
 8006d92:	f04f 0801 	mov.w	r8, #1
 8006d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f47f af6a 	bne.w	8006c72 <_dtoa_r+0x7ca>
 8006d9e:	2001      	movs	r0, #1
 8006da0:	e76f      	b.n	8006c82 <_dtoa_r+0x7da>
 8006da2:	f04f 0800 	mov.w	r8, #0
 8006da6:	e7f6      	b.n	8006d96 <_dtoa_r+0x8ee>
 8006da8:	4698      	mov	r8, r3
 8006daa:	e7f4      	b.n	8006d96 <_dtoa_r+0x8ee>
 8006dac:	f43f af7d 	beq.w	8006caa <_dtoa_r+0x802>
 8006db0:	4618      	mov	r0, r3
 8006db2:	301c      	adds	r0, #28
 8006db4:	e772      	b.n	8006c9c <_dtoa_r+0x7f4>
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	dc37      	bgt.n	8006e2c <_dtoa_r+0x984>
 8006dbc:	9b06      	ldr	r3, [sp, #24]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	dd34      	ble.n	8006e2c <_dtoa_r+0x984>
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	9302      	str	r3, [sp, #8]
 8006dc6:	9b02      	ldr	r3, [sp, #8]
 8006dc8:	b96b      	cbnz	r3, 8006de6 <_dtoa_r+0x93e>
 8006dca:	4631      	mov	r1, r6
 8006dcc:	2205      	movs	r2, #5
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 f9d4 	bl	800717c <__multadd>
 8006dd4:	4601      	mov	r1, r0
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	ee18 0a10 	vmov	r0, s16
 8006ddc:	f000 fbee 	bl	80075bc <__mcmp>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f73f adbb 	bgt.w	800695c <_dtoa_r+0x4b4>
 8006de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de8:	9d01      	ldr	r5, [sp, #4]
 8006dea:	43db      	mvns	r3, r3
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	f04f 0800 	mov.w	r8, #0
 8006df2:	4631      	mov	r1, r6
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f99f 	bl	8007138 <_Bfree>
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	f43f aea4 	beq.w	8006b48 <_dtoa_r+0x6a0>
 8006e00:	f1b8 0f00 	cmp.w	r8, #0
 8006e04:	d005      	beq.n	8006e12 <_dtoa_r+0x96a>
 8006e06:	45b8      	cmp	r8, r7
 8006e08:	d003      	beq.n	8006e12 <_dtoa_r+0x96a>
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 f993 	bl	8007138 <_Bfree>
 8006e12:	4639      	mov	r1, r7
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 f98f 	bl	8007138 <_Bfree>
 8006e1a:	e695      	b.n	8006b48 <_dtoa_r+0x6a0>
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	4637      	mov	r7, r6
 8006e20:	e7e1      	b.n	8006de6 <_dtoa_r+0x93e>
 8006e22:	9700      	str	r7, [sp, #0]
 8006e24:	4637      	mov	r7, r6
 8006e26:	e599      	b.n	800695c <_dtoa_r+0x4b4>
 8006e28:	40240000 	.word	0x40240000
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 80ca 	beq.w	8006fc8 <_dtoa_r+0xb20>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	9302      	str	r3, [sp, #8]
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	dd05      	ble.n	8006e48 <_dtoa_r+0x9a0>
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	462a      	mov	r2, r5
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fb4b 	bl	80074dc <__lshift>
 8006e46:	4607      	mov	r7, r0
 8006e48:	f1b8 0f00 	cmp.w	r8, #0
 8006e4c:	d05b      	beq.n	8006f06 <_dtoa_r+0xa5e>
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 f931 	bl	80070b8 <_Balloc>
 8006e56:	4605      	mov	r5, r0
 8006e58:	b928      	cbnz	r0, 8006e66 <_dtoa_r+0x9be>
 8006e5a:	4b87      	ldr	r3, [pc, #540]	; (8007078 <_dtoa_r+0xbd0>)
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e62:	f7ff bb3b 	b.w	80064dc <_dtoa_r+0x34>
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	3202      	adds	r2, #2
 8006e6a:	0092      	lsls	r2, r2, #2
 8006e6c:	f107 010c 	add.w	r1, r7, #12
 8006e70:	300c      	adds	r0, #12
 8006e72:	f000 f913 	bl	800709c <memcpy>
 8006e76:	2201      	movs	r2, #1
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 fb2e 	bl	80074dc <__lshift>
 8006e80:	9b01      	ldr	r3, [sp, #4]
 8006e82:	f103 0901 	add.w	r9, r3, #1
 8006e86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	f00a 0301 	and.w	r3, sl, #1
 8006e92:	46b8      	mov	r8, r7
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	4607      	mov	r7, r0
 8006e98:	4631      	mov	r1, r6
 8006e9a:	ee18 0a10 	vmov	r0, s16
 8006e9e:	f7ff fa75 	bl	800638c <quorem>
 8006ea2:	4641      	mov	r1, r8
 8006ea4:	9002      	str	r0, [sp, #8]
 8006ea6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006eaa:	ee18 0a10 	vmov	r0, s16
 8006eae:	f000 fb85 	bl	80075bc <__mcmp>
 8006eb2:	463a      	mov	r2, r7
 8006eb4:	9003      	str	r0, [sp, #12]
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 fb9b 	bl	80075f4 <__mdiff>
 8006ebe:	68c2      	ldr	r2, [r0, #12]
 8006ec0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	bb02      	cbnz	r2, 8006f0a <_dtoa_r+0xa62>
 8006ec8:	4601      	mov	r1, r0
 8006eca:	ee18 0a10 	vmov	r0, s16
 8006ece:	f000 fb75 	bl	80075bc <__mcmp>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	9207      	str	r2, [sp, #28]
 8006eda:	f000 f92d 	bl	8007138 <_Bfree>
 8006ede:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ee2:	ea43 0102 	orr.w	r1, r3, r2
 8006ee6:	9b04      	ldr	r3, [sp, #16]
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	464d      	mov	r5, r9
 8006eec:	d10f      	bne.n	8006f0e <_dtoa_r+0xa66>
 8006eee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ef2:	d02a      	beq.n	8006f4a <_dtoa_r+0xaa2>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dd02      	ble.n	8006f00 <_dtoa_r+0xa58>
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f00:	f88b a000 	strb.w	sl, [fp]
 8006f04:	e775      	b.n	8006df2 <_dtoa_r+0x94a>
 8006f06:	4638      	mov	r0, r7
 8006f08:	e7ba      	b.n	8006e80 <_dtoa_r+0x9d8>
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	e7e2      	b.n	8006ed4 <_dtoa_r+0xa2c>
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	db04      	blt.n	8006f1e <_dtoa_r+0xa76>
 8006f14:	9906      	ldr	r1, [sp, #24]
 8006f16:	430b      	orrs	r3, r1
 8006f18:	9904      	ldr	r1, [sp, #16]
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	d122      	bne.n	8006f64 <_dtoa_r+0xabc>
 8006f1e:	2a00      	cmp	r2, #0
 8006f20:	ddee      	ble.n	8006f00 <_dtoa_r+0xa58>
 8006f22:	ee18 1a10 	vmov	r1, s16
 8006f26:	2201      	movs	r2, #1
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 fad7 	bl	80074dc <__lshift>
 8006f2e:	4631      	mov	r1, r6
 8006f30:	ee08 0a10 	vmov	s16, r0
 8006f34:	f000 fb42 	bl	80075bc <__mcmp>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	dc03      	bgt.n	8006f44 <_dtoa_r+0xa9c>
 8006f3c:	d1e0      	bne.n	8006f00 <_dtoa_r+0xa58>
 8006f3e:	f01a 0f01 	tst.w	sl, #1
 8006f42:	d0dd      	beq.n	8006f00 <_dtoa_r+0xa58>
 8006f44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f48:	d1d7      	bne.n	8006efa <_dtoa_r+0xa52>
 8006f4a:	2339      	movs	r3, #57	; 0x39
 8006f4c:	f88b 3000 	strb.w	r3, [fp]
 8006f50:	462b      	mov	r3, r5
 8006f52:	461d      	mov	r5, r3
 8006f54:	3b01      	subs	r3, #1
 8006f56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f5a:	2a39      	cmp	r2, #57	; 0x39
 8006f5c:	d071      	beq.n	8007042 <_dtoa_r+0xb9a>
 8006f5e:	3201      	adds	r2, #1
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	e746      	b.n	8006df2 <_dtoa_r+0x94a>
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	dd07      	ble.n	8006f78 <_dtoa_r+0xad0>
 8006f68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f6c:	d0ed      	beq.n	8006f4a <_dtoa_r+0xaa2>
 8006f6e:	f10a 0301 	add.w	r3, sl, #1
 8006f72:	f88b 3000 	strb.w	r3, [fp]
 8006f76:	e73c      	b.n	8006df2 <_dtoa_r+0x94a>
 8006f78:	9b05      	ldr	r3, [sp, #20]
 8006f7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f7e:	4599      	cmp	r9, r3
 8006f80:	d047      	beq.n	8007012 <_dtoa_r+0xb6a>
 8006f82:	ee18 1a10 	vmov	r1, s16
 8006f86:	2300      	movs	r3, #0
 8006f88:	220a      	movs	r2, #10
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 f8f6 	bl	800717c <__multadd>
 8006f90:	45b8      	cmp	r8, r7
 8006f92:	ee08 0a10 	vmov	s16, r0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	f04f 020a 	mov.w	r2, #10
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	d106      	bne.n	8006fb2 <_dtoa_r+0xb0a>
 8006fa4:	f000 f8ea 	bl	800717c <__multadd>
 8006fa8:	4680      	mov	r8, r0
 8006faa:	4607      	mov	r7, r0
 8006fac:	f109 0901 	add.w	r9, r9, #1
 8006fb0:	e772      	b.n	8006e98 <_dtoa_r+0x9f0>
 8006fb2:	f000 f8e3 	bl	800717c <__multadd>
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4680      	mov	r8, r0
 8006fba:	2300      	movs	r3, #0
 8006fbc:	220a      	movs	r2, #10
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 f8dc 	bl	800717c <__multadd>
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	e7f1      	b.n	8006fac <_dtoa_r+0xb04>
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	9d01      	ldr	r5, [sp, #4]
 8006fce:	ee18 0a10 	vmov	r0, s16
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	f7ff f9da 	bl	800638c <quorem>
 8006fd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fdc:	9b01      	ldr	r3, [sp, #4]
 8006fde:	f805 ab01 	strb.w	sl, [r5], #1
 8006fe2:	1aea      	subs	r2, r5, r3
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	dd09      	ble.n	8006ffe <_dtoa_r+0xb56>
 8006fea:	ee18 1a10 	vmov	r1, s16
 8006fee:	2300      	movs	r3, #0
 8006ff0:	220a      	movs	r2, #10
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 f8c2 	bl	800717c <__multadd>
 8006ff8:	ee08 0a10 	vmov	s16, r0
 8006ffc:	e7e7      	b.n	8006fce <_dtoa_r+0xb26>
 8006ffe:	9b02      	ldr	r3, [sp, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	bfc8      	it	gt
 8007004:	461d      	movgt	r5, r3
 8007006:	9b01      	ldr	r3, [sp, #4]
 8007008:	bfd8      	it	le
 800700a:	2501      	movle	r5, #1
 800700c:	441d      	add	r5, r3
 800700e:	f04f 0800 	mov.w	r8, #0
 8007012:	ee18 1a10 	vmov	r1, s16
 8007016:	2201      	movs	r2, #1
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fa5f 	bl	80074dc <__lshift>
 800701e:	4631      	mov	r1, r6
 8007020:	ee08 0a10 	vmov	s16, r0
 8007024:	f000 faca 	bl	80075bc <__mcmp>
 8007028:	2800      	cmp	r0, #0
 800702a:	dc91      	bgt.n	8006f50 <_dtoa_r+0xaa8>
 800702c:	d102      	bne.n	8007034 <_dtoa_r+0xb8c>
 800702e:	f01a 0f01 	tst.w	sl, #1
 8007032:	d18d      	bne.n	8006f50 <_dtoa_r+0xaa8>
 8007034:	462b      	mov	r3, r5
 8007036:	461d      	mov	r5, r3
 8007038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800703c:	2a30      	cmp	r2, #48	; 0x30
 800703e:	d0fa      	beq.n	8007036 <_dtoa_r+0xb8e>
 8007040:	e6d7      	b.n	8006df2 <_dtoa_r+0x94a>
 8007042:	9a01      	ldr	r2, [sp, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d184      	bne.n	8006f52 <_dtoa_r+0xaaa>
 8007048:	9b00      	ldr	r3, [sp, #0]
 800704a:	3301      	adds	r3, #1
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	2331      	movs	r3, #49	; 0x31
 8007050:	7013      	strb	r3, [r2, #0]
 8007052:	e6ce      	b.n	8006df2 <_dtoa_r+0x94a>
 8007054:	4b09      	ldr	r3, [pc, #36]	; (800707c <_dtoa_r+0xbd4>)
 8007056:	f7ff ba95 	b.w	8006584 <_dtoa_r+0xdc>
 800705a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800705c:	2b00      	cmp	r3, #0
 800705e:	f47f aa6e 	bne.w	800653e <_dtoa_r+0x96>
 8007062:	4b07      	ldr	r3, [pc, #28]	; (8007080 <_dtoa_r+0xbd8>)
 8007064:	f7ff ba8e 	b.w	8006584 <_dtoa_r+0xdc>
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	dcae      	bgt.n	8006fcc <_dtoa_r+0xb24>
 800706e:	9b06      	ldr	r3, [sp, #24]
 8007070:	2b02      	cmp	r3, #2
 8007072:	f73f aea8 	bgt.w	8006dc6 <_dtoa_r+0x91e>
 8007076:	e7a9      	b.n	8006fcc <_dtoa_r+0xb24>
 8007078:	08008e44 	.word	0x08008e44
 800707c:	08008ca0 	.word	0x08008ca0
 8007080:	08008dc5 	.word	0x08008dc5

08007084 <_localeconv_r>:
 8007084:	4800      	ldr	r0, [pc, #0]	; (8007088 <_localeconv_r+0x4>)
 8007086:	4770      	bx	lr
 8007088:	20000170 	.word	0x20000170

0800708c <malloc>:
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <malloc+0xc>)
 800708e:	4601      	mov	r1, r0
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f000 bc17 	b.w	80078c4 <_malloc_r>
 8007096:	bf00      	nop
 8007098:	2000001c 	.word	0x2000001c

0800709c <memcpy>:
 800709c:	440a      	add	r2, r1
 800709e:	4291      	cmp	r1, r2
 80070a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a4:	d100      	bne.n	80070a8 <memcpy+0xc>
 80070a6:	4770      	bx	lr
 80070a8:	b510      	push	{r4, lr}
 80070aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070b2:	4291      	cmp	r1, r2
 80070b4:	d1f9      	bne.n	80070aa <memcpy+0xe>
 80070b6:	bd10      	pop	{r4, pc}

080070b8 <_Balloc>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	b976      	cbnz	r6, 80070e0 <_Balloc+0x28>
 80070c2:	2010      	movs	r0, #16
 80070c4:	f7ff ffe2 	bl	800708c <malloc>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6260      	str	r0, [r4, #36]	; 0x24
 80070cc:	b920      	cbnz	r0, 80070d8 <_Balloc+0x20>
 80070ce:	4b18      	ldr	r3, [pc, #96]	; (8007130 <_Balloc+0x78>)
 80070d0:	4818      	ldr	r0, [pc, #96]	; (8007134 <_Balloc+0x7c>)
 80070d2:	2166      	movs	r1, #102	; 0x66
 80070d4:	f000 fdd6 	bl	8007c84 <__assert_func>
 80070d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070dc:	6006      	str	r6, [r0, #0]
 80070de:	60c6      	str	r6, [r0, #12]
 80070e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070e2:	68f3      	ldr	r3, [r6, #12]
 80070e4:	b183      	cbz	r3, 8007108 <_Balloc+0x50>
 80070e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070ee:	b9b8      	cbnz	r0, 8007120 <_Balloc+0x68>
 80070f0:	2101      	movs	r1, #1
 80070f2:	fa01 f605 	lsl.w	r6, r1, r5
 80070f6:	1d72      	adds	r2, r6, #5
 80070f8:	0092      	lsls	r2, r2, #2
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 fb60 	bl	80077c0 <_calloc_r>
 8007100:	b160      	cbz	r0, 800711c <_Balloc+0x64>
 8007102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007106:	e00e      	b.n	8007126 <_Balloc+0x6e>
 8007108:	2221      	movs	r2, #33	; 0x21
 800710a:	2104      	movs	r1, #4
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fb57 	bl	80077c0 <_calloc_r>
 8007112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007114:	60f0      	str	r0, [r6, #12]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e4      	bne.n	80070e6 <_Balloc+0x2e>
 800711c:	2000      	movs	r0, #0
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	6802      	ldr	r2, [r0, #0]
 8007122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007126:	2300      	movs	r3, #0
 8007128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800712c:	e7f7      	b.n	800711e <_Balloc+0x66>
 800712e:	bf00      	nop
 8007130:	08008dd2 	.word	0x08008dd2
 8007134:	08008e55 	.word	0x08008e55

08007138 <_Bfree>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800713c:	4605      	mov	r5, r0
 800713e:	460c      	mov	r4, r1
 8007140:	b976      	cbnz	r6, 8007160 <_Bfree+0x28>
 8007142:	2010      	movs	r0, #16
 8007144:	f7ff ffa2 	bl	800708c <malloc>
 8007148:	4602      	mov	r2, r0
 800714a:	6268      	str	r0, [r5, #36]	; 0x24
 800714c:	b920      	cbnz	r0, 8007158 <_Bfree+0x20>
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <_Bfree+0x3c>)
 8007150:	4809      	ldr	r0, [pc, #36]	; (8007178 <_Bfree+0x40>)
 8007152:	218a      	movs	r1, #138	; 0x8a
 8007154:	f000 fd96 	bl	8007c84 <__assert_func>
 8007158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800715c:	6006      	str	r6, [r0, #0]
 800715e:	60c6      	str	r6, [r0, #12]
 8007160:	b13c      	cbz	r4, 8007172 <_Bfree+0x3a>
 8007162:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007164:	6862      	ldr	r2, [r4, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800716c:	6021      	str	r1, [r4, #0]
 800716e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	08008dd2 	.word	0x08008dd2
 8007178:	08008e55 	.word	0x08008e55

0800717c <__multadd>:
 800717c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007180:	690d      	ldr	r5, [r1, #16]
 8007182:	4607      	mov	r7, r0
 8007184:	460c      	mov	r4, r1
 8007186:	461e      	mov	r6, r3
 8007188:	f101 0c14 	add.w	ip, r1, #20
 800718c:	2000      	movs	r0, #0
 800718e:	f8dc 3000 	ldr.w	r3, [ip]
 8007192:	b299      	uxth	r1, r3
 8007194:	fb02 6101 	mla	r1, r2, r1, r6
 8007198:	0c1e      	lsrs	r6, r3, #16
 800719a:	0c0b      	lsrs	r3, r1, #16
 800719c:	fb02 3306 	mla	r3, r2, r6, r3
 80071a0:	b289      	uxth	r1, r1
 80071a2:	3001      	adds	r0, #1
 80071a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071a8:	4285      	cmp	r5, r0
 80071aa:	f84c 1b04 	str.w	r1, [ip], #4
 80071ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071b2:	dcec      	bgt.n	800718e <__multadd+0x12>
 80071b4:	b30e      	cbz	r6, 80071fa <__multadd+0x7e>
 80071b6:	68a3      	ldr	r3, [r4, #8]
 80071b8:	42ab      	cmp	r3, r5
 80071ba:	dc19      	bgt.n	80071f0 <__multadd+0x74>
 80071bc:	6861      	ldr	r1, [r4, #4]
 80071be:	4638      	mov	r0, r7
 80071c0:	3101      	adds	r1, #1
 80071c2:	f7ff ff79 	bl	80070b8 <_Balloc>
 80071c6:	4680      	mov	r8, r0
 80071c8:	b928      	cbnz	r0, 80071d6 <__multadd+0x5a>
 80071ca:	4602      	mov	r2, r0
 80071cc:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <__multadd+0x84>)
 80071ce:	480d      	ldr	r0, [pc, #52]	; (8007204 <__multadd+0x88>)
 80071d0:	21b5      	movs	r1, #181	; 0xb5
 80071d2:	f000 fd57 	bl	8007c84 <__assert_func>
 80071d6:	6922      	ldr	r2, [r4, #16]
 80071d8:	3202      	adds	r2, #2
 80071da:	f104 010c 	add.w	r1, r4, #12
 80071de:	0092      	lsls	r2, r2, #2
 80071e0:	300c      	adds	r0, #12
 80071e2:	f7ff ff5b 	bl	800709c <memcpy>
 80071e6:	4621      	mov	r1, r4
 80071e8:	4638      	mov	r0, r7
 80071ea:	f7ff ffa5 	bl	8007138 <_Bfree>
 80071ee:	4644      	mov	r4, r8
 80071f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071f4:	3501      	adds	r5, #1
 80071f6:	615e      	str	r6, [r3, #20]
 80071f8:	6125      	str	r5, [r4, #16]
 80071fa:	4620      	mov	r0, r4
 80071fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007200:	08008e44 	.word	0x08008e44
 8007204:	08008e55 	.word	0x08008e55

08007208 <__hi0bits>:
 8007208:	0c03      	lsrs	r3, r0, #16
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	b9d3      	cbnz	r3, 8007244 <__hi0bits+0x3c>
 800720e:	0400      	lsls	r0, r0, #16
 8007210:	2310      	movs	r3, #16
 8007212:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007216:	bf04      	itt	eq
 8007218:	0200      	lsleq	r0, r0, #8
 800721a:	3308      	addeq	r3, #8
 800721c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007220:	bf04      	itt	eq
 8007222:	0100      	lsleq	r0, r0, #4
 8007224:	3304      	addeq	r3, #4
 8007226:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800722a:	bf04      	itt	eq
 800722c:	0080      	lsleq	r0, r0, #2
 800722e:	3302      	addeq	r3, #2
 8007230:	2800      	cmp	r0, #0
 8007232:	db05      	blt.n	8007240 <__hi0bits+0x38>
 8007234:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007238:	f103 0301 	add.w	r3, r3, #1
 800723c:	bf08      	it	eq
 800723e:	2320      	moveq	r3, #32
 8007240:	4618      	mov	r0, r3
 8007242:	4770      	bx	lr
 8007244:	2300      	movs	r3, #0
 8007246:	e7e4      	b.n	8007212 <__hi0bits+0xa>

08007248 <__lo0bits>:
 8007248:	6803      	ldr	r3, [r0, #0]
 800724a:	f013 0207 	ands.w	r2, r3, #7
 800724e:	4601      	mov	r1, r0
 8007250:	d00b      	beq.n	800726a <__lo0bits+0x22>
 8007252:	07da      	lsls	r2, r3, #31
 8007254:	d423      	bmi.n	800729e <__lo0bits+0x56>
 8007256:	0798      	lsls	r0, r3, #30
 8007258:	bf49      	itett	mi
 800725a:	085b      	lsrmi	r3, r3, #1
 800725c:	089b      	lsrpl	r3, r3, #2
 800725e:	2001      	movmi	r0, #1
 8007260:	600b      	strmi	r3, [r1, #0]
 8007262:	bf5c      	itt	pl
 8007264:	600b      	strpl	r3, [r1, #0]
 8007266:	2002      	movpl	r0, #2
 8007268:	4770      	bx	lr
 800726a:	b298      	uxth	r0, r3
 800726c:	b9a8      	cbnz	r0, 800729a <__lo0bits+0x52>
 800726e:	0c1b      	lsrs	r3, r3, #16
 8007270:	2010      	movs	r0, #16
 8007272:	b2da      	uxtb	r2, r3
 8007274:	b90a      	cbnz	r2, 800727a <__lo0bits+0x32>
 8007276:	3008      	adds	r0, #8
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	071a      	lsls	r2, r3, #28
 800727c:	bf04      	itt	eq
 800727e:	091b      	lsreq	r3, r3, #4
 8007280:	3004      	addeq	r0, #4
 8007282:	079a      	lsls	r2, r3, #30
 8007284:	bf04      	itt	eq
 8007286:	089b      	lsreq	r3, r3, #2
 8007288:	3002      	addeq	r0, #2
 800728a:	07da      	lsls	r2, r3, #31
 800728c:	d403      	bmi.n	8007296 <__lo0bits+0x4e>
 800728e:	085b      	lsrs	r3, r3, #1
 8007290:	f100 0001 	add.w	r0, r0, #1
 8007294:	d005      	beq.n	80072a2 <__lo0bits+0x5a>
 8007296:	600b      	str	r3, [r1, #0]
 8007298:	4770      	bx	lr
 800729a:	4610      	mov	r0, r2
 800729c:	e7e9      	b.n	8007272 <__lo0bits+0x2a>
 800729e:	2000      	movs	r0, #0
 80072a0:	4770      	bx	lr
 80072a2:	2020      	movs	r0, #32
 80072a4:	4770      	bx	lr
	...

080072a8 <__i2b>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	460c      	mov	r4, r1
 80072ac:	2101      	movs	r1, #1
 80072ae:	f7ff ff03 	bl	80070b8 <_Balloc>
 80072b2:	4602      	mov	r2, r0
 80072b4:	b928      	cbnz	r0, 80072c2 <__i2b+0x1a>
 80072b6:	4b05      	ldr	r3, [pc, #20]	; (80072cc <__i2b+0x24>)
 80072b8:	4805      	ldr	r0, [pc, #20]	; (80072d0 <__i2b+0x28>)
 80072ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072be:	f000 fce1 	bl	8007c84 <__assert_func>
 80072c2:	2301      	movs	r3, #1
 80072c4:	6144      	str	r4, [r0, #20]
 80072c6:	6103      	str	r3, [r0, #16]
 80072c8:	bd10      	pop	{r4, pc}
 80072ca:	bf00      	nop
 80072cc:	08008e44 	.word	0x08008e44
 80072d0:	08008e55 	.word	0x08008e55

080072d4 <__multiply>:
 80072d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	4691      	mov	r9, r2
 80072da:	690a      	ldr	r2, [r1, #16]
 80072dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	bfb8      	it	lt
 80072e4:	460b      	movlt	r3, r1
 80072e6:	460c      	mov	r4, r1
 80072e8:	bfbc      	itt	lt
 80072ea:	464c      	movlt	r4, r9
 80072ec:	4699      	movlt	r9, r3
 80072ee:	6927      	ldr	r7, [r4, #16]
 80072f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072f4:	68a3      	ldr	r3, [r4, #8]
 80072f6:	6861      	ldr	r1, [r4, #4]
 80072f8:	eb07 060a 	add.w	r6, r7, sl
 80072fc:	42b3      	cmp	r3, r6
 80072fe:	b085      	sub	sp, #20
 8007300:	bfb8      	it	lt
 8007302:	3101      	addlt	r1, #1
 8007304:	f7ff fed8 	bl	80070b8 <_Balloc>
 8007308:	b930      	cbnz	r0, 8007318 <__multiply+0x44>
 800730a:	4602      	mov	r2, r0
 800730c:	4b44      	ldr	r3, [pc, #272]	; (8007420 <__multiply+0x14c>)
 800730e:	4845      	ldr	r0, [pc, #276]	; (8007424 <__multiply+0x150>)
 8007310:	f240 115d 	movw	r1, #349	; 0x15d
 8007314:	f000 fcb6 	bl	8007c84 <__assert_func>
 8007318:	f100 0514 	add.w	r5, r0, #20
 800731c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007320:	462b      	mov	r3, r5
 8007322:	2200      	movs	r2, #0
 8007324:	4543      	cmp	r3, r8
 8007326:	d321      	bcc.n	800736c <__multiply+0x98>
 8007328:	f104 0314 	add.w	r3, r4, #20
 800732c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007330:	f109 0314 	add.w	r3, r9, #20
 8007334:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007338:	9202      	str	r2, [sp, #8]
 800733a:	1b3a      	subs	r2, r7, r4
 800733c:	3a15      	subs	r2, #21
 800733e:	f022 0203 	bic.w	r2, r2, #3
 8007342:	3204      	adds	r2, #4
 8007344:	f104 0115 	add.w	r1, r4, #21
 8007348:	428f      	cmp	r7, r1
 800734a:	bf38      	it	cc
 800734c:	2204      	movcc	r2, #4
 800734e:	9201      	str	r2, [sp, #4]
 8007350:	9a02      	ldr	r2, [sp, #8]
 8007352:	9303      	str	r3, [sp, #12]
 8007354:	429a      	cmp	r2, r3
 8007356:	d80c      	bhi.n	8007372 <__multiply+0x9e>
 8007358:	2e00      	cmp	r6, #0
 800735a:	dd03      	ble.n	8007364 <__multiply+0x90>
 800735c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007360:	2b00      	cmp	r3, #0
 8007362:	d05a      	beq.n	800741a <__multiply+0x146>
 8007364:	6106      	str	r6, [r0, #16]
 8007366:	b005      	add	sp, #20
 8007368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736c:	f843 2b04 	str.w	r2, [r3], #4
 8007370:	e7d8      	b.n	8007324 <__multiply+0x50>
 8007372:	f8b3 a000 	ldrh.w	sl, [r3]
 8007376:	f1ba 0f00 	cmp.w	sl, #0
 800737a:	d024      	beq.n	80073c6 <__multiply+0xf2>
 800737c:	f104 0e14 	add.w	lr, r4, #20
 8007380:	46a9      	mov	r9, r5
 8007382:	f04f 0c00 	mov.w	ip, #0
 8007386:	f85e 2b04 	ldr.w	r2, [lr], #4
 800738a:	f8d9 1000 	ldr.w	r1, [r9]
 800738e:	fa1f fb82 	uxth.w	fp, r2
 8007392:	b289      	uxth	r1, r1
 8007394:	fb0a 110b 	mla	r1, sl, fp, r1
 8007398:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800739c:	f8d9 2000 	ldr.w	r2, [r9]
 80073a0:	4461      	add	r1, ip
 80073a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80073aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073ae:	b289      	uxth	r1, r1
 80073b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073b4:	4577      	cmp	r7, lr
 80073b6:	f849 1b04 	str.w	r1, [r9], #4
 80073ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073be:	d8e2      	bhi.n	8007386 <__multiply+0xb2>
 80073c0:	9a01      	ldr	r2, [sp, #4]
 80073c2:	f845 c002 	str.w	ip, [r5, r2]
 80073c6:	9a03      	ldr	r2, [sp, #12]
 80073c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073cc:	3304      	adds	r3, #4
 80073ce:	f1b9 0f00 	cmp.w	r9, #0
 80073d2:	d020      	beq.n	8007416 <__multiply+0x142>
 80073d4:	6829      	ldr	r1, [r5, #0]
 80073d6:	f104 0c14 	add.w	ip, r4, #20
 80073da:	46ae      	mov	lr, r5
 80073dc:	f04f 0a00 	mov.w	sl, #0
 80073e0:	f8bc b000 	ldrh.w	fp, [ip]
 80073e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073e8:	fb09 220b 	mla	r2, r9, fp, r2
 80073ec:	4492      	add	sl, r2
 80073ee:	b289      	uxth	r1, r1
 80073f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80073f4:	f84e 1b04 	str.w	r1, [lr], #4
 80073f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073fc:	f8be 1000 	ldrh.w	r1, [lr]
 8007400:	0c12      	lsrs	r2, r2, #16
 8007402:	fb09 1102 	mla	r1, r9, r2, r1
 8007406:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800740a:	4567      	cmp	r7, ip
 800740c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007410:	d8e6      	bhi.n	80073e0 <__multiply+0x10c>
 8007412:	9a01      	ldr	r2, [sp, #4]
 8007414:	50a9      	str	r1, [r5, r2]
 8007416:	3504      	adds	r5, #4
 8007418:	e79a      	b.n	8007350 <__multiply+0x7c>
 800741a:	3e01      	subs	r6, #1
 800741c:	e79c      	b.n	8007358 <__multiply+0x84>
 800741e:	bf00      	nop
 8007420:	08008e44 	.word	0x08008e44
 8007424:	08008e55 	.word	0x08008e55

08007428 <__pow5mult>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	4615      	mov	r5, r2
 800742e:	f012 0203 	ands.w	r2, r2, #3
 8007432:	4606      	mov	r6, r0
 8007434:	460f      	mov	r7, r1
 8007436:	d007      	beq.n	8007448 <__pow5mult+0x20>
 8007438:	4c25      	ldr	r4, [pc, #148]	; (80074d0 <__pow5mult+0xa8>)
 800743a:	3a01      	subs	r2, #1
 800743c:	2300      	movs	r3, #0
 800743e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007442:	f7ff fe9b 	bl	800717c <__multadd>
 8007446:	4607      	mov	r7, r0
 8007448:	10ad      	asrs	r5, r5, #2
 800744a:	d03d      	beq.n	80074c8 <__pow5mult+0xa0>
 800744c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800744e:	b97c      	cbnz	r4, 8007470 <__pow5mult+0x48>
 8007450:	2010      	movs	r0, #16
 8007452:	f7ff fe1b 	bl	800708c <malloc>
 8007456:	4602      	mov	r2, r0
 8007458:	6270      	str	r0, [r6, #36]	; 0x24
 800745a:	b928      	cbnz	r0, 8007468 <__pow5mult+0x40>
 800745c:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <__pow5mult+0xac>)
 800745e:	481e      	ldr	r0, [pc, #120]	; (80074d8 <__pow5mult+0xb0>)
 8007460:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007464:	f000 fc0e 	bl	8007c84 <__assert_func>
 8007468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800746c:	6004      	str	r4, [r0, #0]
 800746e:	60c4      	str	r4, [r0, #12]
 8007470:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007478:	b94c      	cbnz	r4, 800748e <__pow5mult+0x66>
 800747a:	f240 2171 	movw	r1, #625	; 0x271
 800747e:	4630      	mov	r0, r6
 8007480:	f7ff ff12 	bl	80072a8 <__i2b>
 8007484:	2300      	movs	r3, #0
 8007486:	f8c8 0008 	str.w	r0, [r8, #8]
 800748a:	4604      	mov	r4, r0
 800748c:	6003      	str	r3, [r0, #0]
 800748e:	f04f 0900 	mov.w	r9, #0
 8007492:	07eb      	lsls	r3, r5, #31
 8007494:	d50a      	bpl.n	80074ac <__pow5mult+0x84>
 8007496:	4639      	mov	r1, r7
 8007498:	4622      	mov	r2, r4
 800749a:	4630      	mov	r0, r6
 800749c:	f7ff ff1a 	bl	80072d4 <__multiply>
 80074a0:	4639      	mov	r1, r7
 80074a2:	4680      	mov	r8, r0
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff fe47 	bl	8007138 <_Bfree>
 80074aa:	4647      	mov	r7, r8
 80074ac:	106d      	asrs	r5, r5, #1
 80074ae:	d00b      	beq.n	80074c8 <__pow5mult+0xa0>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	b938      	cbnz	r0, 80074c4 <__pow5mult+0x9c>
 80074b4:	4622      	mov	r2, r4
 80074b6:	4621      	mov	r1, r4
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff ff0b 	bl	80072d4 <__multiply>
 80074be:	6020      	str	r0, [r4, #0]
 80074c0:	f8c0 9000 	str.w	r9, [r0]
 80074c4:	4604      	mov	r4, r0
 80074c6:	e7e4      	b.n	8007492 <__pow5mult+0x6a>
 80074c8:	4638      	mov	r0, r7
 80074ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ce:	bf00      	nop
 80074d0:	08008fa8 	.word	0x08008fa8
 80074d4:	08008dd2 	.word	0x08008dd2
 80074d8:	08008e55 	.word	0x08008e55

080074dc <__lshift>:
 80074dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	460c      	mov	r4, r1
 80074e2:	6849      	ldr	r1, [r1, #4]
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	4607      	mov	r7, r0
 80074ee:	4691      	mov	r9, r2
 80074f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074f4:	f108 0601 	add.w	r6, r8, #1
 80074f8:	42b3      	cmp	r3, r6
 80074fa:	db0b      	blt.n	8007514 <__lshift+0x38>
 80074fc:	4638      	mov	r0, r7
 80074fe:	f7ff fddb 	bl	80070b8 <_Balloc>
 8007502:	4605      	mov	r5, r0
 8007504:	b948      	cbnz	r0, 800751a <__lshift+0x3e>
 8007506:	4602      	mov	r2, r0
 8007508:	4b2a      	ldr	r3, [pc, #168]	; (80075b4 <__lshift+0xd8>)
 800750a:	482b      	ldr	r0, [pc, #172]	; (80075b8 <__lshift+0xdc>)
 800750c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007510:	f000 fbb8 	bl	8007c84 <__assert_func>
 8007514:	3101      	adds	r1, #1
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	e7ee      	b.n	80074f8 <__lshift+0x1c>
 800751a:	2300      	movs	r3, #0
 800751c:	f100 0114 	add.w	r1, r0, #20
 8007520:	f100 0210 	add.w	r2, r0, #16
 8007524:	4618      	mov	r0, r3
 8007526:	4553      	cmp	r3, sl
 8007528:	db37      	blt.n	800759a <__lshift+0xbe>
 800752a:	6920      	ldr	r0, [r4, #16]
 800752c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007530:	f104 0314 	add.w	r3, r4, #20
 8007534:	f019 091f 	ands.w	r9, r9, #31
 8007538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800753c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007540:	d02f      	beq.n	80075a2 <__lshift+0xc6>
 8007542:	f1c9 0e20 	rsb	lr, r9, #32
 8007546:	468a      	mov	sl, r1
 8007548:	f04f 0c00 	mov.w	ip, #0
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	fa02 f209 	lsl.w	r2, r2, r9
 8007552:	ea42 020c 	orr.w	r2, r2, ip
 8007556:	f84a 2b04 	str.w	r2, [sl], #4
 800755a:	f853 2b04 	ldr.w	r2, [r3], #4
 800755e:	4298      	cmp	r0, r3
 8007560:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007564:	d8f2      	bhi.n	800754c <__lshift+0x70>
 8007566:	1b03      	subs	r3, r0, r4
 8007568:	3b15      	subs	r3, #21
 800756a:	f023 0303 	bic.w	r3, r3, #3
 800756e:	3304      	adds	r3, #4
 8007570:	f104 0215 	add.w	r2, r4, #21
 8007574:	4290      	cmp	r0, r2
 8007576:	bf38      	it	cc
 8007578:	2304      	movcc	r3, #4
 800757a:	f841 c003 	str.w	ip, [r1, r3]
 800757e:	f1bc 0f00 	cmp.w	ip, #0
 8007582:	d001      	beq.n	8007588 <__lshift+0xac>
 8007584:	f108 0602 	add.w	r6, r8, #2
 8007588:	3e01      	subs	r6, #1
 800758a:	4638      	mov	r0, r7
 800758c:	612e      	str	r6, [r5, #16]
 800758e:	4621      	mov	r1, r4
 8007590:	f7ff fdd2 	bl	8007138 <_Bfree>
 8007594:	4628      	mov	r0, r5
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759a:	f842 0f04 	str.w	r0, [r2, #4]!
 800759e:	3301      	adds	r3, #1
 80075a0:	e7c1      	b.n	8007526 <__lshift+0x4a>
 80075a2:	3904      	subs	r1, #4
 80075a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80075ac:	4298      	cmp	r0, r3
 80075ae:	d8f9      	bhi.n	80075a4 <__lshift+0xc8>
 80075b0:	e7ea      	b.n	8007588 <__lshift+0xac>
 80075b2:	bf00      	nop
 80075b4:	08008e44 	.word	0x08008e44
 80075b8:	08008e55 	.word	0x08008e55

080075bc <__mcmp>:
 80075bc:	b530      	push	{r4, r5, lr}
 80075be:	6902      	ldr	r2, [r0, #16]
 80075c0:	690c      	ldr	r4, [r1, #16]
 80075c2:	1b12      	subs	r2, r2, r4
 80075c4:	d10e      	bne.n	80075e4 <__mcmp+0x28>
 80075c6:	f100 0314 	add.w	r3, r0, #20
 80075ca:	3114      	adds	r1, #20
 80075cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075dc:	42a5      	cmp	r5, r4
 80075de:	d003      	beq.n	80075e8 <__mcmp+0x2c>
 80075e0:	d305      	bcc.n	80075ee <__mcmp+0x32>
 80075e2:	2201      	movs	r2, #1
 80075e4:	4610      	mov	r0, r2
 80075e6:	bd30      	pop	{r4, r5, pc}
 80075e8:	4283      	cmp	r3, r0
 80075ea:	d3f3      	bcc.n	80075d4 <__mcmp+0x18>
 80075ec:	e7fa      	b.n	80075e4 <__mcmp+0x28>
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295
 80075f2:	e7f7      	b.n	80075e4 <__mcmp+0x28>

080075f4 <__mdiff>:
 80075f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	460c      	mov	r4, r1
 80075fa:	4606      	mov	r6, r0
 80075fc:	4611      	mov	r1, r2
 80075fe:	4620      	mov	r0, r4
 8007600:	4690      	mov	r8, r2
 8007602:	f7ff ffdb 	bl	80075bc <__mcmp>
 8007606:	1e05      	subs	r5, r0, #0
 8007608:	d110      	bne.n	800762c <__mdiff+0x38>
 800760a:	4629      	mov	r1, r5
 800760c:	4630      	mov	r0, r6
 800760e:	f7ff fd53 	bl	80070b8 <_Balloc>
 8007612:	b930      	cbnz	r0, 8007622 <__mdiff+0x2e>
 8007614:	4b3a      	ldr	r3, [pc, #232]	; (8007700 <__mdiff+0x10c>)
 8007616:	4602      	mov	r2, r0
 8007618:	f240 2132 	movw	r1, #562	; 0x232
 800761c:	4839      	ldr	r0, [pc, #228]	; (8007704 <__mdiff+0x110>)
 800761e:	f000 fb31 	bl	8007c84 <__assert_func>
 8007622:	2301      	movs	r3, #1
 8007624:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762c:	bfa4      	itt	ge
 800762e:	4643      	movge	r3, r8
 8007630:	46a0      	movge	r8, r4
 8007632:	4630      	mov	r0, r6
 8007634:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007638:	bfa6      	itte	ge
 800763a:	461c      	movge	r4, r3
 800763c:	2500      	movge	r5, #0
 800763e:	2501      	movlt	r5, #1
 8007640:	f7ff fd3a 	bl	80070b8 <_Balloc>
 8007644:	b920      	cbnz	r0, 8007650 <__mdiff+0x5c>
 8007646:	4b2e      	ldr	r3, [pc, #184]	; (8007700 <__mdiff+0x10c>)
 8007648:	4602      	mov	r2, r0
 800764a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800764e:	e7e5      	b.n	800761c <__mdiff+0x28>
 8007650:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007654:	6926      	ldr	r6, [r4, #16]
 8007656:	60c5      	str	r5, [r0, #12]
 8007658:	f104 0914 	add.w	r9, r4, #20
 800765c:	f108 0514 	add.w	r5, r8, #20
 8007660:	f100 0e14 	add.w	lr, r0, #20
 8007664:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007668:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800766c:	f108 0210 	add.w	r2, r8, #16
 8007670:	46f2      	mov	sl, lr
 8007672:	2100      	movs	r1, #0
 8007674:	f859 3b04 	ldr.w	r3, [r9], #4
 8007678:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800767c:	fa1f f883 	uxth.w	r8, r3
 8007680:	fa11 f18b 	uxtah	r1, r1, fp
 8007684:	0c1b      	lsrs	r3, r3, #16
 8007686:	eba1 0808 	sub.w	r8, r1, r8
 800768a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800768e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007692:	fa1f f888 	uxth.w	r8, r8
 8007696:	1419      	asrs	r1, r3, #16
 8007698:	454e      	cmp	r6, r9
 800769a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800769e:	f84a 3b04 	str.w	r3, [sl], #4
 80076a2:	d8e7      	bhi.n	8007674 <__mdiff+0x80>
 80076a4:	1b33      	subs	r3, r6, r4
 80076a6:	3b15      	subs	r3, #21
 80076a8:	f023 0303 	bic.w	r3, r3, #3
 80076ac:	3304      	adds	r3, #4
 80076ae:	3415      	adds	r4, #21
 80076b0:	42a6      	cmp	r6, r4
 80076b2:	bf38      	it	cc
 80076b4:	2304      	movcc	r3, #4
 80076b6:	441d      	add	r5, r3
 80076b8:	4473      	add	r3, lr
 80076ba:	469e      	mov	lr, r3
 80076bc:	462e      	mov	r6, r5
 80076be:	4566      	cmp	r6, ip
 80076c0:	d30e      	bcc.n	80076e0 <__mdiff+0xec>
 80076c2:	f10c 0203 	add.w	r2, ip, #3
 80076c6:	1b52      	subs	r2, r2, r5
 80076c8:	f022 0203 	bic.w	r2, r2, #3
 80076cc:	3d03      	subs	r5, #3
 80076ce:	45ac      	cmp	ip, r5
 80076d0:	bf38      	it	cc
 80076d2:	2200      	movcc	r2, #0
 80076d4:	441a      	add	r2, r3
 80076d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076da:	b17b      	cbz	r3, 80076fc <__mdiff+0x108>
 80076dc:	6107      	str	r7, [r0, #16]
 80076de:	e7a3      	b.n	8007628 <__mdiff+0x34>
 80076e0:	f856 8b04 	ldr.w	r8, [r6], #4
 80076e4:	fa11 f288 	uxtah	r2, r1, r8
 80076e8:	1414      	asrs	r4, r2, #16
 80076ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076ee:	b292      	uxth	r2, r2
 80076f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076f4:	f84e 2b04 	str.w	r2, [lr], #4
 80076f8:	1421      	asrs	r1, r4, #16
 80076fa:	e7e0      	b.n	80076be <__mdiff+0xca>
 80076fc:	3f01      	subs	r7, #1
 80076fe:	e7ea      	b.n	80076d6 <__mdiff+0xe2>
 8007700:	08008e44 	.word	0x08008e44
 8007704:	08008e55 	.word	0x08008e55

08007708 <__d2b>:
 8007708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800770c:	4689      	mov	r9, r1
 800770e:	2101      	movs	r1, #1
 8007710:	ec57 6b10 	vmov	r6, r7, d0
 8007714:	4690      	mov	r8, r2
 8007716:	f7ff fccf 	bl	80070b8 <_Balloc>
 800771a:	4604      	mov	r4, r0
 800771c:	b930      	cbnz	r0, 800772c <__d2b+0x24>
 800771e:	4602      	mov	r2, r0
 8007720:	4b25      	ldr	r3, [pc, #148]	; (80077b8 <__d2b+0xb0>)
 8007722:	4826      	ldr	r0, [pc, #152]	; (80077bc <__d2b+0xb4>)
 8007724:	f240 310a 	movw	r1, #778	; 0x30a
 8007728:	f000 faac 	bl	8007c84 <__assert_func>
 800772c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007734:	bb35      	cbnz	r5, 8007784 <__d2b+0x7c>
 8007736:	2e00      	cmp	r6, #0
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	d028      	beq.n	800778e <__d2b+0x86>
 800773c:	4668      	mov	r0, sp
 800773e:	9600      	str	r6, [sp, #0]
 8007740:	f7ff fd82 	bl	8007248 <__lo0bits>
 8007744:	9900      	ldr	r1, [sp, #0]
 8007746:	b300      	cbz	r0, 800778a <__d2b+0x82>
 8007748:	9a01      	ldr	r2, [sp, #4]
 800774a:	f1c0 0320 	rsb	r3, r0, #32
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	430b      	orrs	r3, r1
 8007754:	40c2      	lsrs	r2, r0
 8007756:	6163      	str	r3, [r4, #20]
 8007758:	9201      	str	r2, [sp, #4]
 800775a:	9b01      	ldr	r3, [sp, #4]
 800775c:	61a3      	str	r3, [r4, #24]
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf14      	ite	ne
 8007762:	2202      	movne	r2, #2
 8007764:	2201      	moveq	r2, #1
 8007766:	6122      	str	r2, [r4, #16]
 8007768:	b1d5      	cbz	r5, 80077a0 <__d2b+0x98>
 800776a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800776e:	4405      	add	r5, r0
 8007770:	f8c9 5000 	str.w	r5, [r9]
 8007774:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007778:	f8c8 0000 	str.w	r0, [r8]
 800777c:	4620      	mov	r0, r4
 800777e:	b003      	add	sp, #12
 8007780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007788:	e7d5      	b.n	8007736 <__d2b+0x2e>
 800778a:	6161      	str	r1, [r4, #20]
 800778c:	e7e5      	b.n	800775a <__d2b+0x52>
 800778e:	a801      	add	r0, sp, #4
 8007790:	f7ff fd5a 	bl	8007248 <__lo0bits>
 8007794:	9b01      	ldr	r3, [sp, #4]
 8007796:	6163      	str	r3, [r4, #20]
 8007798:	2201      	movs	r2, #1
 800779a:	6122      	str	r2, [r4, #16]
 800779c:	3020      	adds	r0, #32
 800779e:	e7e3      	b.n	8007768 <__d2b+0x60>
 80077a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077a8:	f8c9 0000 	str.w	r0, [r9]
 80077ac:	6918      	ldr	r0, [r3, #16]
 80077ae:	f7ff fd2b 	bl	8007208 <__hi0bits>
 80077b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077b6:	e7df      	b.n	8007778 <__d2b+0x70>
 80077b8:	08008e44 	.word	0x08008e44
 80077bc:	08008e55 	.word	0x08008e55

080077c0 <_calloc_r>:
 80077c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c2:	fba1 2402 	umull	r2, r4, r1, r2
 80077c6:	b94c      	cbnz	r4, 80077dc <_calloc_r+0x1c>
 80077c8:	4611      	mov	r1, r2
 80077ca:	9201      	str	r2, [sp, #4]
 80077cc:	f000 f87a 	bl	80078c4 <_malloc_r>
 80077d0:	9a01      	ldr	r2, [sp, #4]
 80077d2:	4605      	mov	r5, r0
 80077d4:	b930      	cbnz	r0, 80077e4 <_calloc_r+0x24>
 80077d6:	4628      	mov	r0, r5
 80077d8:	b003      	add	sp, #12
 80077da:	bd30      	pop	{r4, r5, pc}
 80077dc:	220c      	movs	r2, #12
 80077de:	6002      	str	r2, [r0, #0]
 80077e0:	2500      	movs	r5, #0
 80077e2:	e7f8      	b.n	80077d6 <_calloc_r+0x16>
 80077e4:	4621      	mov	r1, r4
 80077e6:	f7fe f8b3 	bl	8005950 <memset>
 80077ea:	e7f4      	b.n	80077d6 <_calloc_r+0x16>

080077ec <_free_r>:
 80077ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ee:	2900      	cmp	r1, #0
 80077f0:	d044      	beq.n	800787c <_free_r+0x90>
 80077f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f6:	9001      	str	r0, [sp, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f1a1 0404 	sub.w	r4, r1, #4
 80077fe:	bfb8      	it	lt
 8007800:	18e4      	addlt	r4, r4, r3
 8007802:	f000 fa9b 	bl	8007d3c <__malloc_lock>
 8007806:	4a1e      	ldr	r2, [pc, #120]	; (8007880 <_free_r+0x94>)
 8007808:	9801      	ldr	r0, [sp, #4]
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	b933      	cbnz	r3, 800781c <_free_r+0x30>
 800780e:	6063      	str	r3, [r4, #4]
 8007810:	6014      	str	r4, [r2, #0]
 8007812:	b003      	add	sp, #12
 8007814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007818:	f000 ba96 	b.w	8007d48 <__malloc_unlock>
 800781c:	42a3      	cmp	r3, r4
 800781e:	d908      	bls.n	8007832 <_free_r+0x46>
 8007820:	6825      	ldr	r5, [r4, #0]
 8007822:	1961      	adds	r1, r4, r5
 8007824:	428b      	cmp	r3, r1
 8007826:	bf01      	itttt	eq
 8007828:	6819      	ldreq	r1, [r3, #0]
 800782a:	685b      	ldreq	r3, [r3, #4]
 800782c:	1949      	addeq	r1, r1, r5
 800782e:	6021      	streq	r1, [r4, #0]
 8007830:	e7ed      	b.n	800780e <_free_r+0x22>
 8007832:	461a      	mov	r2, r3
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b10b      	cbz	r3, 800783c <_free_r+0x50>
 8007838:	42a3      	cmp	r3, r4
 800783a:	d9fa      	bls.n	8007832 <_free_r+0x46>
 800783c:	6811      	ldr	r1, [r2, #0]
 800783e:	1855      	adds	r5, r2, r1
 8007840:	42a5      	cmp	r5, r4
 8007842:	d10b      	bne.n	800785c <_free_r+0x70>
 8007844:	6824      	ldr	r4, [r4, #0]
 8007846:	4421      	add	r1, r4
 8007848:	1854      	adds	r4, r2, r1
 800784a:	42a3      	cmp	r3, r4
 800784c:	6011      	str	r1, [r2, #0]
 800784e:	d1e0      	bne.n	8007812 <_free_r+0x26>
 8007850:	681c      	ldr	r4, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	6053      	str	r3, [r2, #4]
 8007856:	4421      	add	r1, r4
 8007858:	6011      	str	r1, [r2, #0]
 800785a:	e7da      	b.n	8007812 <_free_r+0x26>
 800785c:	d902      	bls.n	8007864 <_free_r+0x78>
 800785e:	230c      	movs	r3, #12
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	e7d6      	b.n	8007812 <_free_r+0x26>
 8007864:	6825      	ldr	r5, [r4, #0]
 8007866:	1961      	adds	r1, r4, r5
 8007868:	428b      	cmp	r3, r1
 800786a:	bf04      	itt	eq
 800786c:	6819      	ldreq	r1, [r3, #0]
 800786e:	685b      	ldreq	r3, [r3, #4]
 8007870:	6063      	str	r3, [r4, #4]
 8007872:	bf04      	itt	eq
 8007874:	1949      	addeq	r1, r1, r5
 8007876:	6021      	streq	r1, [r4, #0]
 8007878:	6054      	str	r4, [r2, #4]
 800787a:	e7ca      	b.n	8007812 <_free_r+0x26>
 800787c:	b003      	add	sp, #12
 800787e:	bd30      	pop	{r4, r5, pc}
 8007880:	20000364 	.word	0x20000364

08007884 <sbrk_aligned>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	4e0e      	ldr	r6, [pc, #56]	; (80078c0 <sbrk_aligned+0x3c>)
 8007888:	460c      	mov	r4, r1
 800788a:	6831      	ldr	r1, [r6, #0]
 800788c:	4605      	mov	r5, r0
 800788e:	b911      	cbnz	r1, 8007896 <sbrk_aligned+0x12>
 8007890:	f000 f9e8 	bl	8007c64 <_sbrk_r>
 8007894:	6030      	str	r0, [r6, #0]
 8007896:	4621      	mov	r1, r4
 8007898:	4628      	mov	r0, r5
 800789a:	f000 f9e3 	bl	8007c64 <_sbrk_r>
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	d00a      	beq.n	80078b8 <sbrk_aligned+0x34>
 80078a2:	1cc4      	adds	r4, r0, #3
 80078a4:	f024 0403 	bic.w	r4, r4, #3
 80078a8:	42a0      	cmp	r0, r4
 80078aa:	d007      	beq.n	80078bc <sbrk_aligned+0x38>
 80078ac:	1a21      	subs	r1, r4, r0
 80078ae:	4628      	mov	r0, r5
 80078b0:	f000 f9d8 	bl	8007c64 <_sbrk_r>
 80078b4:	3001      	adds	r0, #1
 80078b6:	d101      	bne.n	80078bc <sbrk_aligned+0x38>
 80078b8:	f04f 34ff 	mov.w	r4, #4294967295
 80078bc:	4620      	mov	r0, r4
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	20000368 	.word	0x20000368

080078c4 <_malloc_r>:
 80078c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c8:	1ccd      	adds	r5, r1, #3
 80078ca:	f025 0503 	bic.w	r5, r5, #3
 80078ce:	3508      	adds	r5, #8
 80078d0:	2d0c      	cmp	r5, #12
 80078d2:	bf38      	it	cc
 80078d4:	250c      	movcc	r5, #12
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	4607      	mov	r7, r0
 80078da:	db01      	blt.n	80078e0 <_malloc_r+0x1c>
 80078dc:	42a9      	cmp	r1, r5
 80078de:	d905      	bls.n	80078ec <_malloc_r+0x28>
 80078e0:	230c      	movs	r3, #12
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	2600      	movs	r6, #0
 80078e6:	4630      	mov	r0, r6
 80078e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ec:	4e2e      	ldr	r6, [pc, #184]	; (80079a8 <_malloc_r+0xe4>)
 80078ee:	f000 fa25 	bl	8007d3c <__malloc_lock>
 80078f2:	6833      	ldr	r3, [r6, #0]
 80078f4:	461c      	mov	r4, r3
 80078f6:	bb34      	cbnz	r4, 8007946 <_malloc_r+0x82>
 80078f8:	4629      	mov	r1, r5
 80078fa:	4638      	mov	r0, r7
 80078fc:	f7ff ffc2 	bl	8007884 <sbrk_aligned>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	4604      	mov	r4, r0
 8007904:	d14d      	bne.n	80079a2 <_malloc_r+0xde>
 8007906:	6834      	ldr	r4, [r6, #0]
 8007908:	4626      	mov	r6, r4
 800790a:	2e00      	cmp	r6, #0
 800790c:	d140      	bne.n	8007990 <_malloc_r+0xcc>
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	4631      	mov	r1, r6
 8007912:	4638      	mov	r0, r7
 8007914:	eb04 0803 	add.w	r8, r4, r3
 8007918:	f000 f9a4 	bl	8007c64 <_sbrk_r>
 800791c:	4580      	cmp	r8, r0
 800791e:	d13a      	bne.n	8007996 <_malloc_r+0xd2>
 8007920:	6821      	ldr	r1, [r4, #0]
 8007922:	3503      	adds	r5, #3
 8007924:	1a6d      	subs	r5, r5, r1
 8007926:	f025 0503 	bic.w	r5, r5, #3
 800792a:	3508      	adds	r5, #8
 800792c:	2d0c      	cmp	r5, #12
 800792e:	bf38      	it	cc
 8007930:	250c      	movcc	r5, #12
 8007932:	4629      	mov	r1, r5
 8007934:	4638      	mov	r0, r7
 8007936:	f7ff ffa5 	bl	8007884 <sbrk_aligned>
 800793a:	3001      	adds	r0, #1
 800793c:	d02b      	beq.n	8007996 <_malloc_r+0xd2>
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	442b      	add	r3, r5
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	e00e      	b.n	8007964 <_malloc_r+0xa0>
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	1b52      	subs	r2, r2, r5
 800794a:	d41e      	bmi.n	800798a <_malloc_r+0xc6>
 800794c:	2a0b      	cmp	r2, #11
 800794e:	d916      	bls.n	800797e <_malloc_r+0xba>
 8007950:	1961      	adds	r1, r4, r5
 8007952:	42a3      	cmp	r3, r4
 8007954:	6025      	str	r5, [r4, #0]
 8007956:	bf18      	it	ne
 8007958:	6059      	strne	r1, [r3, #4]
 800795a:	6863      	ldr	r3, [r4, #4]
 800795c:	bf08      	it	eq
 800795e:	6031      	streq	r1, [r6, #0]
 8007960:	5162      	str	r2, [r4, r5]
 8007962:	604b      	str	r3, [r1, #4]
 8007964:	4638      	mov	r0, r7
 8007966:	f104 060b 	add.w	r6, r4, #11
 800796a:	f000 f9ed 	bl	8007d48 <__malloc_unlock>
 800796e:	f026 0607 	bic.w	r6, r6, #7
 8007972:	1d23      	adds	r3, r4, #4
 8007974:	1af2      	subs	r2, r6, r3
 8007976:	d0b6      	beq.n	80078e6 <_malloc_r+0x22>
 8007978:	1b9b      	subs	r3, r3, r6
 800797a:	50a3      	str	r3, [r4, r2]
 800797c:	e7b3      	b.n	80078e6 <_malloc_r+0x22>
 800797e:	6862      	ldr	r2, [r4, #4]
 8007980:	42a3      	cmp	r3, r4
 8007982:	bf0c      	ite	eq
 8007984:	6032      	streq	r2, [r6, #0]
 8007986:	605a      	strne	r2, [r3, #4]
 8007988:	e7ec      	b.n	8007964 <_malloc_r+0xa0>
 800798a:	4623      	mov	r3, r4
 800798c:	6864      	ldr	r4, [r4, #4]
 800798e:	e7b2      	b.n	80078f6 <_malloc_r+0x32>
 8007990:	4634      	mov	r4, r6
 8007992:	6876      	ldr	r6, [r6, #4]
 8007994:	e7b9      	b.n	800790a <_malloc_r+0x46>
 8007996:	230c      	movs	r3, #12
 8007998:	603b      	str	r3, [r7, #0]
 800799a:	4638      	mov	r0, r7
 800799c:	f000 f9d4 	bl	8007d48 <__malloc_unlock>
 80079a0:	e7a1      	b.n	80078e6 <_malloc_r+0x22>
 80079a2:	6025      	str	r5, [r4, #0]
 80079a4:	e7de      	b.n	8007964 <_malloc_r+0xa0>
 80079a6:	bf00      	nop
 80079a8:	20000364 	.word	0x20000364

080079ac <__ssputs_r>:
 80079ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	688e      	ldr	r6, [r1, #8]
 80079b2:	429e      	cmp	r6, r3
 80079b4:	4682      	mov	sl, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	4690      	mov	r8, r2
 80079ba:	461f      	mov	r7, r3
 80079bc:	d838      	bhi.n	8007a30 <__ssputs_r+0x84>
 80079be:	898a      	ldrh	r2, [r1, #12]
 80079c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079c4:	d032      	beq.n	8007a2c <__ssputs_r+0x80>
 80079c6:	6825      	ldr	r5, [r4, #0]
 80079c8:	6909      	ldr	r1, [r1, #16]
 80079ca:	eba5 0901 	sub.w	r9, r5, r1
 80079ce:	6965      	ldr	r5, [r4, #20]
 80079d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079d8:	3301      	adds	r3, #1
 80079da:	444b      	add	r3, r9
 80079dc:	106d      	asrs	r5, r5, #1
 80079de:	429d      	cmp	r5, r3
 80079e0:	bf38      	it	cc
 80079e2:	461d      	movcc	r5, r3
 80079e4:	0553      	lsls	r3, r2, #21
 80079e6:	d531      	bpl.n	8007a4c <__ssputs_r+0xa0>
 80079e8:	4629      	mov	r1, r5
 80079ea:	f7ff ff6b 	bl	80078c4 <_malloc_r>
 80079ee:	4606      	mov	r6, r0
 80079f0:	b950      	cbnz	r0, 8007a08 <__ssputs_r+0x5c>
 80079f2:	230c      	movs	r3, #12
 80079f4:	f8ca 3000 	str.w	r3, [sl]
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079fe:	81a3      	strh	r3, [r4, #12]
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a08:	6921      	ldr	r1, [r4, #16]
 8007a0a:	464a      	mov	r2, r9
 8007a0c:	f7ff fb46 	bl	800709c <memcpy>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1a:	81a3      	strh	r3, [r4, #12]
 8007a1c:	6126      	str	r6, [r4, #16]
 8007a1e:	6165      	str	r5, [r4, #20]
 8007a20:	444e      	add	r6, r9
 8007a22:	eba5 0509 	sub.w	r5, r5, r9
 8007a26:	6026      	str	r6, [r4, #0]
 8007a28:	60a5      	str	r5, [r4, #8]
 8007a2a:	463e      	mov	r6, r7
 8007a2c:	42be      	cmp	r6, r7
 8007a2e:	d900      	bls.n	8007a32 <__ssputs_r+0x86>
 8007a30:	463e      	mov	r6, r7
 8007a32:	6820      	ldr	r0, [r4, #0]
 8007a34:	4632      	mov	r2, r6
 8007a36:	4641      	mov	r1, r8
 8007a38:	f000 f966 	bl	8007d08 <memmove>
 8007a3c:	68a3      	ldr	r3, [r4, #8]
 8007a3e:	1b9b      	subs	r3, r3, r6
 8007a40:	60a3      	str	r3, [r4, #8]
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	4433      	add	r3, r6
 8007a46:	6023      	str	r3, [r4, #0]
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e7db      	b.n	8007a04 <__ssputs_r+0x58>
 8007a4c:	462a      	mov	r2, r5
 8007a4e:	f000 f981 	bl	8007d54 <_realloc_r>
 8007a52:	4606      	mov	r6, r0
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d1e1      	bne.n	8007a1c <__ssputs_r+0x70>
 8007a58:	6921      	ldr	r1, [r4, #16]
 8007a5a:	4650      	mov	r0, sl
 8007a5c:	f7ff fec6 	bl	80077ec <_free_r>
 8007a60:	e7c7      	b.n	80079f2 <__ssputs_r+0x46>
	...

08007a64 <_svfiprintf_r>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	4698      	mov	r8, r3
 8007a6a:	898b      	ldrh	r3, [r1, #12]
 8007a6c:	061b      	lsls	r3, r3, #24
 8007a6e:	b09d      	sub	sp, #116	; 0x74
 8007a70:	4607      	mov	r7, r0
 8007a72:	460d      	mov	r5, r1
 8007a74:	4614      	mov	r4, r2
 8007a76:	d50e      	bpl.n	8007a96 <_svfiprintf_r+0x32>
 8007a78:	690b      	ldr	r3, [r1, #16]
 8007a7a:	b963      	cbnz	r3, 8007a96 <_svfiprintf_r+0x32>
 8007a7c:	2140      	movs	r1, #64	; 0x40
 8007a7e:	f7ff ff21 	bl	80078c4 <_malloc_r>
 8007a82:	6028      	str	r0, [r5, #0]
 8007a84:	6128      	str	r0, [r5, #16]
 8007a86:	b920      	cbnz	r0, 8007a92 <_svfiprintf_r+0x2e>
 8007a88:	230c      	movs	r3, #12
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	e0d1      	b.n	8007c36 <_svfiprintf_r+0x1d2>
 8007a92:	2340      	movs	r3, #64	; 0x40
 8007a94:	616b      	str	r3, [r5, #20]
 8007a96:	2300      	movs	r3, #0
 8007a98:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9a:	2320      	movs	r3, #32
 8007a9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aa4:	2330      	movs	r3, #48	; 0x30
 8007aa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c50 <_svfiprintf_r+0x1ec>
 8007aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aae:	f04f 0901 	mov.w	r9, #1
 8007ab2:	4623      	mov	r3, r4
 8007ab4:	469a      	mov	sl, r3
 8007ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aba:	b10a      	cbz	r2, 8007ac0 <_svfiprintf_r+0x5c>
 8007abc:	2a25      	cmp	r2, #37	; 0x25
 8007abe:	d1f9      	bne.n	8007ab4 <_svfiprintf_r+0x50>
 8007ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ac4:	d00b      	beq.n	8007ade <_svfiprintf_r+0x7a>
 8007ac6:	465b      	mov	r3, fp
 8007ac8:	4622      	mov	r2, r4
 8007aca:	4629      	mov	r1, r5
 8007acc:	4638      	mov	r0, r7
 8007ace:	f7ff ff6d 	bl	80079ac <__ssputs_r>
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f000 80aa 	beq.w	8007c2c <_svfiprintf_r+0x1c8>
 8007ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ada:	445a      	add	r2, fp
 8007adc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ade:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80a2 	beq.w	8007c2c <_svfiprintf_r+0x1c8>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f04f 32ff 	mov.w	r2, #4294967295
 8007aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af2:	f10a 0a01 	add.w	sl, sl, #1
 8007af6:	9304      	str	r3, [sp, #16]
 8007af8:	9307      	str	r3, [sp, #28]
 8007afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007afe:	931a      	str	r3, [sp, #104]	; 0x68
 8007b00:	4654      	mov	r4, sl
 8007b02:	2205      	movs	r2, #5
 8007b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b08:	4851      	ldr	r0, [pc, #324]	; (8007c50 <_svfiprintf_r+0x1ec>)
 8007b0a:	f7f8 fb71 	bl	80001f0 <memchr>
 8007b0e:	9a04      	ldr	r2, [sp, #16]
 8007b10:	b9d8      	cbnz	r0, 8007b4a <_svfiprintf_r+0xe6>
 8007b12:	06d0      	lsls	r0, r2, #27
 8007b14:	bf44      	itt	mi
 8007b16:	2320      	movmi	r3, #32
 8007b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b1c:	0711      	lsls	r1, r2, #28
 8007b1e:	bf44      	itt	mi
 8007b20:	232b      	movmi	r3, #43	; 0x2b
 8007b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b26:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2c:	d015      	beq.n	8007b5a <_svfiprintf_r+0xf6>
 8007b2e:	9a07      	ldr	r2, [sp, #28]
 8007b30:	4654      	mov	r4, sl
 8007b32:	2000      	movs	r0, #0
 8007b34:	f04f 0c0a 	mov.w	ip, #10
 8007b38:	4621      	mov	r1, r4
 8007b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b3e:	3b30      	subs	r3, #48	; 0x30
 8007b40:	2b09      	cmp	r3, #9
 8007b42:	d94e      	bls.n	8007be2 <_svfiprintf_r+0x17e>
 8007b44:	b1b0      	cbz	r0, 8007b74 <_svfiprintf_r+0x110>
 8007b46:	9207      	str	r2, [sp, #28]
 8007b48:	e014      	b.n	8007b74 <_svfiprintf_r+0x110>
 8007b4a:	eba0 0308 	sub.w	r3, r0, r8
 8007b4e:	fa09 f303 	lsl.w	r3, r9, r3
 8007b52:	4313      	orrs	r3, r2
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	46a2      	mov	sl, r4
 8007b58:	e7d2      	b.n	8007b00 <_svfiprintf_r+0x9c>
 8007b5a:	9b03      	ldr	r3, [sp, #12]
 8007b5c:	1d19      	adds	r1, r3, #4
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	9103      	str	r1, [sp, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bfbb      	ittet	lt
 8007b66:	425b      	neglt	r3, r3
 8007b68:	f042 0202 	orrlt.w	r2, r2, #2
 8007b6c:	9307      	strge	r3, [sp, #28]
 8007b6e:	9307      	strlt	r3, [sp, #28]
 8007b70:	bfb8      	it	lt
 8007b72:	9204      	strlt	r2, [sp, #16]
 8007b74:	7823      	ldrb	r3, [r4, #0]
 8007b76:	2b2e      	cmp	r3, #46	; 0x2e
 8007b78:	d10c      	bne.n	8007b94 <_svfiprintf_r+0x130>
 8007b7a:	7863      	ldrb	r3, [r4, #1]
 8007b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b7e:	d135      	bne.n	8007bec <_svfiprintf_r+0x188>
 8007b80:	9b03      	ldr	r3, [sp, #12]
 8007b82:	1d1a      	adds	r2, r3, #4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	9203      	str	r2, [sp, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	bfb8      	it	lt
 8007b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b90:	3402      	adds	r4, #2
 8007b92:	9305      	str	r3, [sp, #20]
 8007b94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c60 <_svfiprintf_r+0x1fc>
 8007b98:	7821      	ldrb	r1, [r4, #0]
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	4650      	mov	r0, sl
 8007b9e:	f7f8 fb27 	bl	80001f0 <memchr>
 8007ba2:	b140      	cbz	r0, 8007bb6 <_svfiprintf_r+0x152>
 8007ba4:	2340      	movs	r3, #64	; 0x40
 8007ba6:	eba0 000a 	sub.w	r0, r0, sl
 8007baa:	fa03 f000 	lsl.w	r0, r3, r0
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	4303      	orrs	r3, r0
 8007bb2:	3401      	adds	r4, #1
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bba:	4826      	ldr	r0, [pc, #152]	; (8007c54 <_svfiprintf_r+0x1f0>)
 8007bbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bc0:	2206      	movs	r2, #6
 8007bc2:	f7f8 fb15 	bl	80001f0 <memchr>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d038      	beq.n	8007c3c <_svfiprintf_r+0x1d8>
 8007bca:	4b23      	ldr	r3, [pc, #140]	; (8007c58 <_svfiprintf_r+0x1f4>)
 8007bcc:	bb1b      	cbnz	r3, 8007c16 <_svfiprintf_r+0x1b2>
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	3307      	adds	r3, #7
 8007bd2:	f023 0307 	bic.w	r3, r3, #7
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	9303      	str	r3, [sp, #12]
 8007bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bdc:	4433      	add	r3, r6
 8007bde:	9309      	str	r3, [sp, #36]	; 0x24
 8007be0:	e767      	b.n	8007ab2 <_svfiprintf_r+0x4e>
 8007be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007be6:	460c      	mov	r4, r1
 8007be8:	2001      	movs	r0, #1
 8007bea:	e7a5      	b.n	8007b38 <_svfiprintf_r+0xd4>
 8007bec:	2300      	movs	r3, #0
 8007bee:	3401      	adds	r4, #1
 8007bf0:	9305      	str	r3, [sp, #20]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	f04f 0c0a 	mov.w	ip, #10
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bfe:	3a30      	subs	r2, #48	; 0x30
 8007c00:	2a09      	cmp	r2, #9
 8007c02:	d903      	bls.n	8007c0c <_svfiprintf_r+0x1a8>
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d0c5      	beq.n	8007b94 <_svfiprintf_r+0x130>
 8007c08:	9105      	str	r1, [sp, #20]
 8007c0a:	e7c3      	b.n	8007b94 <_svfiprintf_r+0x130>
 8007c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c10:	4604      	mov	r4, r0
 8007c12:	2301      	movs	r3, #1
 8007c14:	e7f0      	b.n	8007bf8 <_svfiprintf_r+0x194>
 8007c16:	ab03      	add	r3, sp, #12
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	462a      	mov	r2, r5
 8007c1c:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <_svfiprintf_r+0x1f8>)
 8007c1e:	a904      	add	r1, sp, #16
 8007c20:	4638      	mov	r0, r7
 8007c22:	f7fd ff3d 	bl	8005aa0 <_printf_float>
 8007c26:	1c42      	adds	r2, r0, #1
 8007c28:	4606      	mov	r6, r0
 8007c2a:	d1d6      	bne.n	8007bda <_svfiprintf_r+0x176>
 8007c2c:	89ab      	ldrh	r3, [r5, #12]
 8007c2e:	065b      	lsls	r3, r3, #25
 8007c30:	f53f af2c 	bmi.w	8007a8c <_svfiprintf_r+0x28>
 8007c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c36:	b01d      	add	sp, #116	; 0x74
 8007c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3c:	ab03      	add	r3, sp, #12
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	462a      	mov	r2, r5
 8007c42:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <_svfiprintf_r+0x1f8>)
 8007c44:	a904      	add	r1, sp, #16
 8007c46:	4638      	mov	r0, r7
 8007c48:	f7fe f9ce 	bl	8005fe8 <_printf_i>
 8007c4c:	e7eb      	b.n	8007c26 <_svfiprintf_r+0x1c2>
 8007c4e:	bf00      	nop
 8007c50:	08008fb4 	.word	0x08008fb4
 8007c54:	08008fbe 	.word	0x08008fbe
 8007c58:	08005aa1 	.word	0x08005aa1
 8007c5c:	080079ad 	.word	0x080079ad
 8007c60:	08008fba 	.word	0x08008fba

08007c64 <_sbrk_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d06      	ldr	r5, [pc, #24]	; (8007c80 <_sbrk_r+0x1c>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7fa f88c 	bl	8001d8c <_sbrk>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_sbrk_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_sbrk_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	2000036c 	.word	0x2000036c

08007c84 <__assert_func>:
 8007c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c86:	4614      	mov	r4, r2
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <__assert_func+0x2c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4605      	mov	r5, r0
 8007c90:	68d8      	ldr	r0, [r3, #12]
 8007c92:	b14c      	cbz	r4, 8007ca8 <__assert_func+0x24>
 8007c94:	4b07      	ldr	r3, [pc, #28]	; (8007cb4 <__assert_func+0x30>)
 8007c96:	9100      	str	r1, [sp, #0]
 8007c98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c9c:	4906      	ldr	r1, [pc, #24]	; (8007cb8 <__assert_func+0x34>)
 8007c9e:	462b      	mov	r3, r5
 8007ca0:	f000 f80e 	bl	8007cc0 <fiprintf>
 8007ca4:	f000 faac 	bl	8008200 <abort>
 8007ca8:	4b04      	ldr	r3, [pc, #16]	; (8007cbc <__assert_func+0x38>)
 8007caa:	461c      	mov	r4, r3
 8007cac:	e7f3      	b.n	8007c96 <__assert_func+0x12>
 8007cae:	bf00      	nop
 8007cb0:	2000001c 	.word	0x2000001c
 8007cb4:	08008fc5 	.word	0x08008fc5
 8007cb8:	08008fd2 	.word	0x08008fd2
 8007cbc:	08009000 	.word	0x08009000

08007cc0 <fiprintf>:
 8007cc0:	b40e      	push	{r1, r2, r3}
 8007cc2:	b503      	push	{r0, r1, lr}
 8007cc4:	4601      	mov	r1, r0
 8007cc6:	ab03      	add	r3, sp, #12
 8007cc8:	4805      	ldr	r0, [pc, #20]	; (8007ce0 <fiprintf+0x20>)
 8007cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cce:	6800      	ldr	r0, [r0, #0]
 8007cd0:	9301      	str	r3, [sp, #4]
 8007cd2:	f000 f897 	bl	8007e04 <_vfiprintf_r>
 8007cd6:	b002      	add	sp, #8
 8007cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cdc:	b003      	add	sp, #12
 8007cde:	4770      	bx	lr
 8007ce0:	2000001c 	.word	0x2000001c

08007ce4 <__ascii_mbtowc>:
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	b901      	cbnz	r1, 8007cea <__ascii_mbtowc+0x6>
 8007ce8:	a901      	add	r1, sp, #4
 8007cea:	b142      	cbz	r2, 8007cfe <__ascii_mbtowc+0x1a>
 8007cec:	b14b      	cbz	r3, 8007d02 <__ascii_mbtowc+0x1e>
 8007cee:	7813      	ldrb	r3, [r2, #0]
 8007cf0:	600b      	str	r3, [r1, #0]
 8007cf2:	7812      	ldrb	r2, [r2, #0]
 8007cf4:	1e10      	subs	r0, r2, #0
 8007cf6:	bf18      	it	ne
 8007cf8:	2001      	movne	r0, #1
 8007cfa:	b002      	add	sp, #8
 8007cfc:	4770      	bx	lr
 8007cfe:	4610      	mov	r0, r2
 8007d00:	e7fb      	b.n	8007cfa <__ascii_mbtowc+0x16>
 8007d02:	f06f 0001 	mvn.w	r0, #1
 8007d06:	e7f8      	b.n	8007cfa <__ascii_mbtowc+0x16>

08007d08 <memmove>:
 8007d08:	4288      	cmp	r0, r1
 8007d0a:	b510      	push	{r4, lr}
 8007d0c:	eb01 0402 	add.w	r4, r1, r2
 8007d10:	d902      	bls.n	8007d18 <memmove+0x10>
 8007d12:	4284      	cmp	r4, r0
 8007d14:	4623      	mov	r3, r4
 8007d16:	d807      	bhi.n	8007d28 <memmove+0x20>
 8007d18:	1e43      	subs	r3, r0, #1
 8007d1a:	42a1      	cmp	r1, r4
 8007d1c:	d008      	beq.n	8007d30 <memmove+0x28>
 8007d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d26:	e7f8      	b.n	8007d1a <memmove+0x12>
 8007d28:	4402      	add	r2, r0
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	428a      	cmp	r2, r1
 8007d2e:	d100      	bne.n	8007d32 <memmove+0x2a>
 8007d30:	bd10      	pop	{r4, pc}
 8007d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d3a:	e7f7      	b.n	8007d2c <memmove+0x24>

08007d3c <__malloc_lock>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__malloc_lock+0x8>)
 8007d3e:	f000 bc1f 	b.w	8008580 <__retarget_lock_acquire_recursive>
 8007d42:	bf00      	nop
 8007d44:	20000370 	.word	0x20000370

08007d48 <__malloc_unlock>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__malloc_unlock+0x8>)
 8007d4a:	f000 bc1a 	b.w	8008582 <__retarget_lock_release_recursive>
 8007d4e:	bf00      	nop
 8007d50:	20000370 	.word	0x20000370

08007d54 <_realloc_r>:
 8007d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d58:	4680      	mov	r8, r0
 8007d5a:	4614      	mov	r4, r2
 8007d5c:	460e      	mov	r6, r1
 8007d5e:	b921      	cbnz	r1, 8007d6a <_realloc_r+0x16>
 8007d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d64:	4611      	mov	r1, r2
 8007d66:	f7ff bdad 	b.w	80078c4 <_malloc_r>
 8007d6a:	b92a      	cbnz	r2, 8007d78 <_realloc_r+0x24>
 8007d6c:	f7ff fd3e 	bl	80077ec <_free_r>
 8007d70:	4625      	mov	r5, r4
 8007d72:	4628      	mov	r0, r5
 8007d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d78:	f000 fc6a 	bl	8008650 <_malloc_usable_size_r>
 8007d7c:	4284      	cmp	r4, r0
 8007d7e:	4607      	mov	r7, r0
 8007d80:	d802      	bhi.n	8007d88 <_realloc_r+0x34>
 8007d82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d86:	d812      	bhi.n	8007dae <_realloc_r+0x5a>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f7ff fd9a 	bl	80078c4 <_malloc_r>
 8007d90:	4605      	mov	r5, r0
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d0ed      	beq.n	8007d72 <_realloc_r+0x1e>
 8007d96:	42bc      	cmp	r4, r7
 8007d98:	4622      	mov	r2, r4
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	bf28      	it	cs
 8007d9e:	463a      	movcs	r2, r7
 8007da0:	f7ff f97c 	bl	800709c <memcpy>
 8007da4:	4631      	mov	r1, r6
 8007da6:	4640      	mov	r0, r8
 8007da8:	f7ff fd20 	bl	80077ec <_free_r>
 8007dac:	e7e1      	b.n	8007d72 <_realloc_r+0x1e>
 8007dae:	4635      	mov	r5, r6
 8007db0:	e7df      	b.n	8007d72 <_realloc_r+0x1e>

08007db2 <__sfputc_r>:
 8007db2:	6893      	ldr	r3, [r2, #8]
 8007db4:	3b01      	subs	r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	b410      	push	{r4}
 8007dba:	6093      	str	r3, [r2, #8]
 8007dbc:	da08      	bge.n	8007dd0 <__sfputc_r+0x1e>
 8007dbe:	6994      	ldr	r4, [r2, #24]
 8007dc0:	42a3      	cmp	r3, r4
 8007dc2:	db01      	blt.n	8007dc8 <__sfputc_r+0x16>
 8007dc4:	290a      	cmp	r1, #10
 8007dc6:	d103      	bne.n	8007dd0 <__sfputc_r+0x1e>
 8007dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dcc:	f000 b94a 	b.w	8008064 <__swbuf_r>
 8007dd0:	6813      	ldr	r3, [r2, #0]
 8007dd2:	1c58      	adds	r0, r3, #1
 8007dd4:	6010      	str	r0, [r2, #0]
 8007dd6:	7019      	strb	r1, [r3, #0]
 8007dd8:	4608      	mov	r0, r1
 8007dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <__sfputs_r>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	4606      	mov	r6, r0
 8007de4:	460f      	mov	r7, r1
 8007de6:	4614      	mov	r4, r2
 8007de8:	18d5      	adds	r5, r2, r3
 8007dea:	42ac      	cmp	r4, r5
 8007dec:	d101      	bne.n	8007df2 <__sfputs_r+0x12>
 8007dee:	2000      	movs	r0, #0
 8007df0:	e007      	b.n	8007e02 <__sfputs_r+0x22>
 8007df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df6:	463a      	mov	r2, r7
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7ff ffda 	bl	8007db2 <__sfputc_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	d1f3      	bne.n	8007dea <__sfputs_r+0xa>
 8007e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e04 <_vfiprintf_r>:
 8007e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e08:	460d      	mov	r5, r1
 8007e0a:	b09d      	sub	sp, #116	; 0x74
 8007e0c:	4614      	mov	r4, r2
 8007e0e:	4698      	mov	r8, r3
 8007e10:	4606      	mov	r6, r0
 8007e12:	b118      	cbz	r0, 8007e1c <_vfiprintf_r+0x18>
 8007e14:	6983      	ldr	r3, [r0, #24]
 8007e16:	b90b      	cbnz	r3, 8007e1c <_vfiprintf_r+0x18>
 8007e18:	f000 fb14 	bl	8008444 <__sinit>
 8007e1c:	4b89      	ldr	r3, [pc, #548]	; (8008044 <_vfiprintf_r+0x240>)
 8007e1e:	429d      	cmp	r5, r3
 8007e20:	d11b      	bne.n	8007e5a <_vfiprintf_r+0x56>
 8007e22:	6875      	ldr	r5, [r6, #4]
 8007e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e26:	07d9      	lsls	r1, r3, #31
 8007e28:	d405      	bmi.n	8007e36 <_vfiprintf_r+0x32>
 8007e2a:	89ab      	ldrh	r3, [r5, #12]
 8007e2c:	059a      	lsls	r2, r3, #22
 8007e2e:	d402      	bmi.n	8007e36 <_vfiprintf_r+0x32>
 8007e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e32:	f000 fba5 	bl	8008580 <__retarget_lock_acquire_recursive>
 8007e36:	89ab      	ldrh	r3, [r5, #12]
 8007e38:	071b      	lsls	r3, r3, #28
 8007e3a:	d501      	bpl.n	8007e40 <_vfiprintf_r+0x3c>
 8007e3c:	692b      	ldr	r3, [r5, #16]
 8007e3e:	b9eb      	cbnz	r3, 8007e7c <_vfiprintf_r+0x78>
 8007e40:	4629      	mov	r1, r5
 8007e42:	4630      	mov	r0, r6
 8007e44:	f000 f96e 	bl	8008124 <__swsetup_r>
 8007e48:	b1c0      	cbz	r0, 8007e7c <_vfiprintf_r+0x78>
 8007e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e4c:	07dc      	lsls	r4, r3, #31
 8007e4e:	d50e      	bpl.n	8007e6e <_vfiprintf_r+0x6a>
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	b01d      	add	sp, #116	; 0x74
 8007e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5a:	4b7b      	ldr	r3, [pc, #492]	; (8008048 <_vfiprintf_r+0x244>)
 8007e5c:	429d      	cmp	r5, r3
 8007e5e:	d101      	bne.n	8007e64 <_vfiprintf_r+0x60>
 8007e60:	68b5      	ldr	r5, [r6, #8]
 8007e62:	e7df      	b.n	8007e24 <_vfiprintf_r+0x20>
 8007e64:	4b79      	ldr	r3, [pc, #484]	; (800804c <_vfiprintf_r+0x248>)
 8007e66:	429d      	cmp	r5, r3
 8007e68:	bf08      	it	eq
 8007e6a:	68f5      	ldreq	r5, [r6, #12]
 8007e6c:	e7da      	b.n	8007e24 <_vfiprintf_r+0x20>
 8007e6e:	89ab      	ldrh	r3, [r5, #12]
 8007e70:	0598      	lsls	r0, r3, #22
 8007e72:	d4ed      	bmi.n	8007e50 <_vfiprintf_r+0x4c>
 8007e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e76:	f000 fb84 	bl	8008582 <__retarget_lock_release_recursive>
 8007e7a:	e7e9      	b.n	8007e50 <_vfiprintf_r+0x4c>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e80:	2320      	movs	r3, #32
 8007e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e8a:	2330      	movs	r3, #48	; 0x30
 8007e8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008050 <_vfiprintf_r+0x24c>
 8007e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e94:	f04f 0901 	mov.w	r9, #1
 8007e98:	4623      	mov	r3, r4
 8007e9a:	469a      	mov	sl, r3
 8007e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ea0:	b10a      	cbz	r2, 8007ea6 <_vfiprintf_r+0xa2>
 8007ea2:	2a25      	cmp	r2, #37	; 0x25
 8007ea4:	d1f9      	bne.n	8007e9a <_vfiprintf_r+0x96>
 8007ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eaa:	d00b      	beq.n	8007ec4 <_vfiprintf_r+0xc0>
 8007eac:	465b      	mov	r3, fp
 8007eae:	4622      	mov	r2, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff ff94 	bl	8007de0 <__sfputs_r>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f000 80aa 	beq.w	8008012 <_vfiprintf_r+0x20e>
 8007ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ec0:	445a      	add	r2, fp
 8007ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80a2 	beq.w	8008012 <_vfiprintf_r+0x20e>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ed8:	f10a 0a01 	add.w	sl, sl, #1
 8007edc:	9304      	str	r3, [sp, #16]
 8007ede:	9307      	str	r3, [sp, #28]
 8007ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ee6:	4654      	mov	r4, sl
 8007ee8:	2205      	movs	r2, #5
 8007eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eee:	4858      	ldr	r0, [pc, #352]	; (8008050 <_vfiprintf_r+0x24c>)
 8007ef0:	f7f8 f97e 	bl	80001f0 <memchr>
 8007ef4:	9a04      	ldr	r2, [sp, #16]
 8007ef6:	b9d8      	cbnz	r0, 8007f30 <_vfiprintf_r+0x12c>
 8007ef8:	06d1      	lsls	r1, r2, #27
 8007efa:	bf44      	itt	mi
 8007efc:	2320      	movmi	r3, #32
 8007efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f02:	0713      	lsls	r3, r2, #28
 8007f04:	bf44      	itt	mi
 8007f06:	232b      	movmi	r3, #43	; 0x2b
 8007f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f10:	2b2a      	cmp	r3, #42	; 0x2a
 8007f12:	d015      	beq.n	8007f40 <_vfiprintf_r+0x13c>
 8007f14:	9a07      	ldr	r2, [sp, #28]
 8007f16:	4654      	mov	r4, sl
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f04f 0c0a 	mov.w	ip, #10
 8007f1e:	4621      	mov	r1, r4
 8007f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f24:	3b30      	subs	r3, #48	; 0x30
 8007f26:	2b09      	cmp	r3, #9
 8007f28:	d94e      	bls.n	8007fc8 <_vfiprintf_r+0x1c4>
 8007f2a:	b1b0      	cbz	r0, 8007f5a <_vfiprintf_r+0x156>
 8007f2c:	9207      	str	r2, [sp, #28]
 8007f2e:	e014      	b.n	8007f5a <_vfiprintf_r+0x156>
 8007f30:	eba0 0308 	sub.w	r3, r0, r8
 8007f34:	fa09 f303 	lsl.w	r3, r9, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	46a2      	mov	sl, r4
 8007f3e:	e7d2      	b.n	8007ee6 <_vfiprintf_r+0xe2>
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	1d19      	adds	r1, r3, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	9103      	str	r1, [sp, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bfbb      	ittet	lt
 8007f4c:	425b      	neglt	r3, r3
 8007f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f52:	9307      	strge	r3, [sp, #28]
 8007f54:	9307      	strlt	r3, [sp, #28]
 8007f56:	bfb8      	it	lt
 8007f58:	9204      	strlt	r2, [sp, #16]
 8007f5a:	7823      	ldrb	r3, [r4, #0]
 8007f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f5e:	d10c      	bne.n	8007f7a <_vfiprintf_r+0x176>
 8007f60:	7863      	ldrb	r3, [r4, #1]
 8007f62:	2b2a      	cmp	r3, #42	; 0x2a
 8007f64:	d135      	bne.n	8007fd2 <_vfiprintf_r+0x1ce>
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	1d1a      	adds	r2, r3, #4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	9203      	str	r2, [sp, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfb8      	it	lt
 8007f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f76:	3402      	adds	r4, #2
 8007f78:	9305      	str	r3, [sp, #20]
 8007f7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008060 <_vfiprintf_r+0x25c>
 8007f7e:	7821      	ldrb	r1, [r4, #0]
 8007f80:	2203      	movs	r2, #3
 8007f82:	4650      	mov	r0, sl
 8007f84:	f7f8 f934 	bl	80001f0 <memchr>
 8007f88:	b140      	cbz	r0, 8007f9c <_vfiprintf_r+0x198>
 8007f8a:	2340      	movs	r3, #64	; 0x40
 8007f8c:	eba0 000a 	sub.w	r0, r0, sl
 8007f90:	fa03 f000 	lsl.w	r0, r3, r0
 8007f94:	9b04      	ldr	r3, [sp, #16]
 8007f96:	4303      	orrs	r3, r0
 8007f98:	3401      	adds	r4, #1
 8007f9a:	9304      	str	r3, [sp, #16]
 8007f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa0:	482c      	ldr	r0, [pc, #176]	; (8008054 <_vfiprintf_r+0x250>)
 8007fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fa6:	2206      	movs	r2, #6
 8007fa8:	f7f8 f922 	bl	80001f0 <memchr>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d03f      	beq.n	8008030 <_vfiprintf_r+0x22c>
 8007fb0:	4b29      	ldr	r3, [pc, #164]	; (8008058 <_vfiprintf_r+0x254>)
 8007fb2:	bb1b      	cbnz	r3, 8007ffc <_vfiprintf_r+0x1f8>
 8007fb4:	9b03      	ldr	r3, [sp, #12]
 8007fb6:	3307      	adds	r3, #7
 8007fb8:	f023 0307 	bic.w	r3, r3, #7
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	9303      	str	r3, [sp, #12]
 8007fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc2:	443b      	add	r3, r7
 8007fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc6:	e767      	b.n	8007e98 <_vfiprintf_r+0x94>
 8007fc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fcc:	460c      	mov	r4, r1
 8007fce:	2001      	movs	r0, #1
 8007fd0:	e7a5      	b.n	8007f1e <_vfiprintf_r+0x11a>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	3401      	adds	r4, #1
 8007fd6:	9305      	str	r3, [sp, #20]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f04f 0c0a 	mov.w	ip, #10
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fe4:	3a30      	subs	r2, #48	; 0x30
 8007fe6:	2a09      	cmp	r2, #9
 8007fe8:	d903      	bls.n	8007ff2 <_vfiprintf_r+0x1ee>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0c5      	beq.n	8007f7a <_vfiprintf_r+0x176>
 8007fee:	9105      	str	r1, [sp, #20]
 8007ff0:	e7c3      	b.n	8007f7a <_vfiprintf_r+0x176>
 8007ff2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e7f0      	b.n	8007fde <_vfiprintf_r+0x1da>
 8007ffc:	ab03      	add	r3, sp, #12
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	462a      	mov	r2, r5
 8008002:	4b16      	ldr	r3, [pc, #88]	; (800805c <_vfiprintf_r+0x258>)
 8008004:	a904      	add	r1, sp, #16
 8008006:	4630      	mov	r0, r6
 8008008:	f7fd fd4a 	bl	8005aa0 <_printf_float>
 800800c:	4607      	mov	r7, r0
 800800e:	1c78      	adds	r0, r7, #1
 8008010:	d1d6      	bne.n	8007fc0 <_vfiprintf_r+0x1bc>
 8008012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008014:	07d9      	lsls	r1, r3, #31
 8008016:	d405      	bmi.n	8008024 <_vfiprintf_r+0x220>
 8008018:	89ab      	ldrh	r3, [r5, #12]
 800801a:	059a      	lsls	r2, r3, #22
 800801c:	d402      	bmi.n	8008024 <_vfiprintf_r+0x220>
 800801e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008020:	f000 faaf 	bl	8008582 <__retarget_lock_release_recursive>
 8008024:	89ab      	ldrh	r3, [r5, #12]
 8008026:	065b      	lsls	r3, r3, #25
 8008028:	f53f af12 	bmi.w	8007e50 <_vfiprintf_r+0x4c>
 800802c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800802e:	e711      	b.n	8007e54 <_vfiprintf_r+0x50>
 8008030:	ab03      	add	r3, sp, #12
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	462a      	mov	r2, r5
 8008036:	4b09      	ldr	r3, [pc, #36]	; (800805c <_vfiprintf_r+0x258>)
 8008038:	a904      	add	r1, sp, #16
 800803a:	4630      	mov	r0, r6
 800803c:	f7fd ffd4 	bl	8005fe8 <_printf_i>
 8008040:	e7e4      	b.n	800800c <_vfiprintf_r+0x208>
 8008042:	bf00      	nop
 8008044:	0800902c 	.word	0x0800902c
 8008048:	0800904c 	.word	0x0800904c
 800804c:	0800900c 	.word	0x0800900c
 8008050:	08008fb4 	.word	0x08008fb4
 8008054:	08008fbe 	.word	0x08008fbe
 8008058:	08005aa1 	.word	0x08005aa1
 800805c:	08007de1 	.word	0x08007de1
 8008060:	08008fba 	.word	0x08008fba

08008064 <__swbuf_r>:
 8008064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008066:	460e      	mov	r6, r1
 8008068:	4614      	mov	r4, r2
 800806a:	4605      	mov	r5, r0
 800806c:	b118      	cbz	r0, 8008076 <__swbuf_r+0x12>
 800806e:	6983      	ldr	r3, [r0, #24]
 8008070:	b90b      	cbnz	r3, 8008076 <__swbuf_r+0x12>
 8008072:	f000 f9e7 	bl	8008444 <__sinit>
 8008076:	4b21      	ldr	r3, [pc, #132]	; (80080fc <__swbuf_r+0x98>)
 8008078:	429c      	cmp	r4, r3
 800807a:	d12b      	bne.n	80080d4 <__swbuf_r+0x70>
 800807c:	686c      	ldr	r4, [r5, #4]
 800807e:	69a3      	ldr	r3, [r4, #24]
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	071a      	lsls	r2, r3, #28
 8008086:	d52f      	bpl.n	80080e8 <__swbuf_r+0x84>
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	b36b      	cbz	r3, 80080e8 <__swbuf_r+0x84>
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	1ac0      	subs	r0, r0, r3
 8008092:	6963      	ldr	r3, [r4, #20]
 8008094:	b2f6      	uxtb	r6, r6
 8008096:	4283      	cmp	r3, r0
 8008098:	4637      	mov	r7, r6
 800809a:	dc04      	bgt.n	80080a6 <__swbuf_r+0x42>
 800809c:	4621      	mov	r1, r4
 800809e:	4628      	mov	r0, r5
 80080a0:	f000 f93c 	bl	800831c <_fflush_r>
 80080a4:	bb30      	cbnz	r0, 80080f4 <__swbuf_r+0x90>
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	60a3      	str	r3, [r4, #8]
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	6022      	str	r2, [r4, #0]
 80080b2:	701e      	strb	r6, [r3, #0]
 80080b4:	6963      	ldr	r3, [r4, #20]
 80080b6:	3001      	adds	r0, #1
 80080b8:	4283      	cmp	r3, r0
 80080ba:	d004      	beq.n	80080c6 <__swbuf_r+0x62>
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	07db      	lsls	r3, r3, #31
 80080c0:	d506      	bpl.n	80080d0 <__swbuf_r+0x6c>
 80080c2:	2e0a      	cmp	r6, #10
 80080c4:	d104      	bne.n	80080d0 <__swbuf_r+0x6c>
 80080c6:	4621      	mov	r1, r4
 80080c8:	4628      	mov	r0, r5
 80080ca:	f000 f927 	bl	800831c <_fflush_r>
 80080ce:	b988      	cbnz	r0, 80080f4 <__swbuf_r+0x90>
 80080d0:	4638      	mov	r0, r7
 80080d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d4:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <__swbuf_r+0x9c>)
 80080d6:	429c      	cmp	r4, r3
 80080d8:	d101      	bne.n	80080de <__swbuf_r+0x7a>
 80080da:	68ac      	ldr	r4, [r5, #8]
 80080dc:	e7cf      	b.n	800807e <__swbuf_r+0x1a>
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <__swbuf_r+0xa0>)
 80080e0:	429c      	cmp	r4, r3
 80080e2:	bf08      	it	eq
 80080e4:	68ec      	ldreq	r4, [r5, #12]
 80080e6:	e7ca      	b.n	800807e <__swbuf_r+0x1a>
 80080e8:	4621      	mov	r1, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 f81a 	bl	8008124 <__swsetup_r>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d0cb      	beq.n	800808c <__swbuf_r+0x28>
 80080f4:	f04f 37ff 	mov.w	r7, #4294967295
 80080f8:	e7ea      	b.n	80080d0 <__swbuf_r+0x6c>
 80080fa:	bf00      	nop
 80080fc:	0800902c 	.word	0x0800902c
 8008100:	0800904c 	.word	0x0800904c
 8008104:	0800900c 	.word	0x0800900c

08008108 <__ascii_wctomb>:
 8008108:	b149      	cbz	r1, 800811e <__ascii_wctomb+0x16>
 800810a:	2aff      	cmp	r2, #255	; 0xff
 800810c:	bf85      	ittet	hi
 800810e:	238a      	movhi	r3, #138	; 0x8a
 8008110:	6003      	strhi	r3, [r0, #0]
 8008112:	700a      	strbls	r2, [r1, #0]
 8008114:	f04f 30ff 	movhi.w	r0, #4294967295
 8008118:	bf98      	it	ls
 800811a:	2001      	movls	r0, #1
 800811c:	4770      	bx	lr
 800811e:	4608      	mov	r0, r1
 8008120:	4770      	bx	lr
	...

08008124 <__swsetup_r>:
 8008124:	4b32      	ldr	r3, [pc, #200]	; (80081f0 <__swsetup_r+0xcc>)
 8008126:	b570      	push	{r4, r5, r6, lr}
 8008128:	681d      	ldr	r5, [r3, #0]
 800812a:	4606      	mov	r6, r0
 800812c:	460c      	mov	r4, r1
 800812e:	b125      	cbz	r5, 800813a <__swsetup_r+0x16>
 8008130:	69ab      	ldr	r3, [r5, #24]
 8008132:	b913      	cbnz	r3, 800813a <__swsetup_r+0x16>
 8008134:	4628      	mov	r0, r5
 8008136:	f000 f985 	bl	8008444 <__sinit>
 800813a:	4b2e      	ldr	r3, [pc, #184]	; (80081f4 <__swsetup_r+0xd0>)
 800813c:	429c      	cmp	r4, r3
 800813e:	d10f      	bne.n	8008160 <__swsetup_r+0x3c>
 8008140:	686c      	ldr	r4, [r5, #4]
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008148:	0719      	lsls	r1, r3, #28
 800814a:	d42c      	bmi.n	80081a6 <__swsetup_r+0x82>
 800814c:	06dd      	lsls	r5, r3, #27
 800814e:	d411      	bmi.n	8008174 <__swsetup_r+0x50>
 8008150:	2309      	movs	r3, #9
 8008152:	6033      	str	r3, [r6, #0]
 8008154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008158:	81a3      	strh	r3, [r4, #12]
 800815a:	f04f 30ff 	mov.w	r0, #4294967295
 800815e:	e03e      	b.n	80081de <__swsetup_r+0xba>
 8008160:	4b25      	ldr	r3, [pc, #148]	; (80081f8 <__swsetup_r+0xd4>)
 8008162:	429c      	cmp	r4, r3
 8008164:	d101      	bne.n	800816a <__swsetup_r+0x46>
 8008166:	68ac      	ldr	r4, [r5, #8]
 8008168:	e7eb      	b.n	8008142 <__swsetup_r+0x1e>
 800816a:	4b24      	ldr	r3, [pc, #144]	; (80081fc <__swsetup_r+0xd8>)
 800816c:	429c      	cmp	r4, r3
 800816e:	bf08      	it	eq
 8008170:	68ec      	ldreq	r4, [r5, #12]
 8008172:	e7e6      	b.n	8008142 <__swsetup_r+0x1e>
 8008174:	0758      	lsls	r0, r3, #29
 8008176:	d512      	bpl.n	800819e <__swsetup_r+0x7a>
 8008178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800817a:	b141      	cbz	r1, 800818e <__swsetup_r+0x6a>
 800817c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008180:	4299      	cmp	r1, r3
 8008182:	d002      	beq.n	800818a <__swsetup_r+0x66>
 8008184:	4630      	mov	r0, r6
 8008186:	f7ff fb31 	bl	80077ec <_free_r>
 800818a:	2300      	movs	r3, #0
 800818c:	6363      	str	r3, [r4, #52]	; 0x34
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	2300      	movs	r3, #0
 8008198:	6063      	str	r3, [r4, #4]
 800819a:	6923      	ldr	r3, [r4, #16]
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	f043 0308 	orr.w	r3, r3, #8
 80081a4:	81a3      	strh	r3, [r4, #12]
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	b94b      	cbnz	r3, 80081be <__swsetup_r+0x9a>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b4:	d003      	beq.n	80081be <__swsetup_r+0x9a>
 80081b6:	4621      	mov	r1, r4
 80081b8:	4630      	mov	r0, r6
 80081ba:	f000 fa09 	bl	80085d0 <__smakebuf_r>
 80081be:	89a0      	ldrh	r0, [r4, #12]
 80081c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081c4:	f010 0301 	ands.w	r3, r0, #1
 80081c8:	d00a      	beq.n	80081e0 <__swsetup_r+0xbc>
 80081ca:	2300      	movs	r3, #0
 80081cc:	60a3      	str	r3, [r4, #8]
 80081ce:	6963      	ldr	r3, [r4, #20]
 80081d0:	425b      	negs	r3, r3
 80081d2:	61a3      	str	r3, [r4, #24]
 80081d4:	6923      	ldr	r3, [r4, #16]
 80081d6:	b943      	cbnz	r3, 80081ea <__swsetup_r+0xc6>
 80081d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081dc:	d1ba      	bne.n	8008154 <__swsetup_r+0x30>
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	0781      	lsls	r1, r0, #30
 80081e2:	bf58      	it	pl
 80081e4:	6963      	ldrpl	r3, [r4, #20]
 80081e6:	60a3      	str	r3, [r4, #8]
 80081e8:	e7f4      	b.n	80081d4 <__swsetup_r+0xb0>
 80081ea:	2000      	movs	r0, #0
 80081ec:	e7f7      	b.n	80081de <__swsetup_r+0xba>
 80081ee:	bf00      	nop
 80081f0:	2000001c 	.word	0x2000001c
 80081f4:	0800902c 	.word	0x0800902c
 80081f8:	0800904c 	.word	0x0800904c
 80081fc:	0800900c 	.word	0x0800900c

08008200 <abort>:
 8008200:	b508      	push	{r3, lr}
 8008202:	2006      	movs	r0, #6
 8008204:	f000 fa54 	bl	80086b0 <raise>
 8008208:	2001      	movs	r0, #1
 800820a:	f7f9 fd47 	bl	8001c9c <_exit>
	...

08008210 <__sflush_r>:
 8008210:	898a      	ldrh	r2, [r1, #12]
 8008212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008216:	4605      	mov	r5, r0
 8008218:	0710      	lsls	r0, r2, #28
 800821a:	460c      	mov	r4, r1
 800821c:	d458      	bmi.n	80082d0 <__sflush_r+0xc0>
 800821e:	684b      	ldr	r3, [r1, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	dc05      	bgt.n	8008230 <__sflush_r+0x20>
 8008224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	dc02      	bgt.n	8008230 <__sflush_r+0x20>
 800822a:	2000      	movs	r0, #0
 800822c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008232:	2e00      	cmp	r6, #0
 8008234:	d0f9      	beq.n	800822a <__sflush_r+0x1a>
 8008236:	2300      	movs	r3, #0
 8008238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800823c:	682f      	ldr	r7, [r5, #0]
 800823e:	602b      	str	r3, [r5, #0]
 8008240:	d032      	beq.n	80082a8 <__sflush_r+0x98>
 8008242:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	075a      	lsls	r2, r3, #29
 8008248:	d505      	bpl.n	8008256 <__sflush_r+0x46>
 800824a:	6863      	ldr	r3, [r4, #4]
 800824c:	1ac0      	subs	r0, r0, r3
 800824e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008250:	b10b      	cbz	r3, 8008256 <__sflush_r+0x46>
 8008252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008254:	1ac0      	subs	r0, r0, r3
 8008256:	2300      	movs	r3, #0
 8008258:	4602      	mov	r2, r0
 800825a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800825c:	6a21      	ldr	r1, [r4, #32]
 800825e:	4628      	mov	r0, r5
 8008260:	47b0      	blx	r6
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	d106      	bne.n	8008276 <__sflush_r+0x66>
 8008268:	6829      	ldr	r1, [r5, #0]
 800826a:	291d      	cmp	r1, #29
 800826c:	d82c      	bhi.n	80082c8 <__sflush_r+0xb8>
 800826e:	4a2a      	ldr	r2, [pc, #168]	; (8008318 <__sflush_r+0x108>)
 8008270:	40ca      	lsrs	r2, r1
 8008272:	07d6      	lsls	r6, r2, #31
 8008274:	d528      	bpl.n	80082c8 <__sflush_r+0xb8>
 8008276:	2200      	movs	r2, #0
 8008278:	6062      	str	r2, [r4, #4]
 800827a:	04d9      	lsls	r1, r3, #19
 800827c:	6922      	ldr	r2, [r4, #16]
 800827e:	6022      	str	r2, [r4, #0]
 8008280:	d504      	bpl.n	800828c <__sflush_r+0x7c>
 8008282:	1c42      	adds	r2, r0, #1
 8008284:	d101      	bne.n	800828a <__sflush_r+0x7a>
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	b903      	cbnz	r3, 800828c <__sflush_r+0x7c>
 800828a:	6560      	str	r0, [r4, #84]	; 0x54
 800828c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800828e:	602f      	str	r7, [r5, #0]
 8008290:	2900      	cmp	r1, #0
 8008292:	d0ca      	beq.n	800822a <__sflush_r+0x1a>
 8008294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008298:	4299      	cmp	r1, r3
 800829a:	d002      	beq.n	80082a2 <__sflush_r+0x92>
 800829c:	4628      	mov	r0, r5
 800829e:	f7ff faa5 	bl	80077ec <_free_r>
 80082a2:	2000      	movs	r0, #0
 80082a4:	6360      	str	r0, [r4, #52]	; 0x34
 80082a6:	e7c1      	b.n	800822c <__sflush_r+0x1c>
 80082a8:	6a21      	ldr	r1, [r4, #32]
 80082aa:	2301      	movs	r3, #1
 80082ac:	4628      	mov	r0, r5
 80082ae:	47b0      	blx	r6
 80082b0:	1c41      	adds	r1, r0, #1
 80082b2:	d1c7      	bne.n	8008244 <__sflush_r+0x34>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0c4      	beq.n	8008244 <__sflush_r+0x34>
 80082ba:	2b1d      	cmp	r3, #29
 80082bc:	d001      	beq.n	80082c2 <__sflush_r+0xb2>
 80082be:	2b16      	cmp	r3, #22
 80082c0:	d101      	bne.n	80082c6 <__sflush_r+0xb6>
 80082c2:	602f      	str	r7, [r5, #0]
 80082c4:	e7b1      	b.n	800822a <__sflush_r+0x1a>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082cc:	81a3      	strh	r3, [r4, #12]
 80082ce:	e7ad      	b.n	800822c <__sflush_r+0x1c>
 80082d0:	690f      	ldr	r7, [r1, #16]
 80082d2:	2f00      	cmp	r7, #0
 80082d4:	d0a9      	beq.n	800822a <__sflush_r+0x1a>
 80082d6:	0793      	lsls	r3, r2, #30
 80082d8:	680e      	ldr	r6, [r1, #0]
 80082da:	bf08      	it	eq
 80082dc:	694b      	ldreq	r3, [r1, #20]
 80082de:	600f      	str	r7, [r1, #0]
 80082e0:	bf18      	it	ne
 80082e2:	2300      	movne	r3, #0
 80082e4:	eba6 0807 	sub.w	r8, r6, r7
 80082e8:	608b      	str	r3, [r1, #8]
 80082ea:	f1b8 0f00 	cmp.w	r8, #0
 80082ee:	dd9c      	ble.n	800822a <__sflush_r+0x1a>
 80082f0:	6a21      	ldr	r1, [r4, #32]
 80082f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082f4:	4643      	mov	r3, r8
 80082f6:	463a      	mov	r2, r7
 80082f8:	4628      	mov	r0, r5
 80082fa:	47b0      	blx	r6
 80082fc:	2800      	cmp	r0, #0
 80082fe:	dc06      	bgt.n	800830e <__sflush_r+0xfe>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008306:	81a3      	strh	r3, [r4, #12]
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	e78e      	b.n	800822c <__sflush_r+0x1c>
 800830e:	4407      	add	r7, r0
 8008310:	eba8 0800 	sub.w	r8, r8, r0
 8008314:	e7e9      	b.n	80082ea <__sflush_r+0xda>
 8008316:	bf00      	nop
 8008318:	20400001 	.word	0x20400001

0800831c <_fflush_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	690b      	ldr	r3, [r1, #16]
 8008320:	4605      	mov	r5, r0
 8008322:	460c      	mov	r4, r1
 8008324:	b913      	cbnz	r3, 800832c <_fflush_r+0x10>
 8008326:	2500      	movs	r5, #0
 8008328:	4628      	mov	r0, r5
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	b118      	cbz	r0, 8008336 <_fflush_r+0x1a>
 800832e:	6983      	ldr	r3, [r0, #24]
 8008330:	b90b      	cbnz	r3, 8008336 <_fflush_r+0x1a>
 8008332:	f000 f887 	bl	8008444 <__sinit>
 8008336:	4b14      	ldr	r3, [pc, #80]	; (8008388 <_fflush_r+0x6c>)
 8008338:	429c      	cmp	r4, r3
 800833a:	d11b      	bne.n	8008374 <_fflush_r+0x58>
 800833c:	686c      	ldr	r4, [r5, #4]
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0ef      	beq.n	8008326 <_fflush_r+0xa>
 8008346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008348:	07d0      	lsls	r0, r2, #31
 800834a:	d404      	bmi.n	8008356 <_fflush_r+0x3a>
 800834c:	0599      	lsls	r1, r3, #22
 800834e:	d402      	bmi.n	8008356 <_fflush_r+0x3a>
 8008350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008352:	f000 f915 	bl	8008580 <__retarget_lock_acquire_recursive>
 8008356:	4628      	mov	r0, r5
 8008358:	4621      	mov	r1, r4
 800835a:	f7ff ff59 	bl	8008210 <__sflush_r>
 800835e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008360:	07da      	lsls	r2, r3, #31
 8008362:	4605      	mov	r5, r0
 8008364:	d4e0      	bmi.n	8008328 <_fflush_r+0xc>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	059b      	lsls	r3, r3, #22
 800836a:	d4dd      	bmi.n	8008328 <_fflush_r+0xc>
 800836c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836e:	f000 f908 	bl	8008582 <__retarget_lock_release_recursive>
 8008372:	e7d9      	b.n	8008328 <_fflush_r+0xc>
 8008374:	4b05      	ldr	r3, [pc, #20]	; (800838c <_fflush_r+0x70>)
 8008376:	429c      	cmp	r4, r3
 8008378:	d101      	bne.n	800837e <_fflush_r+0x62>
 800837a:	68ac      	ldr	r4, [r5, #8]
 800837c:	e7df      	b.n	800833e <_fflush_r+0x22>
 800837e:	4b04      	ldr	r3, [pc, #16]	; (8008390 <_fflush_r+0x74>)
 8008380:	429c      	cmp	r4, r3
 8008382:	bf08      	it	eq
 8008384:	68ec      	ldreq	r4, [r5, #12]
 8008386:	e7da      	b.n	800833e <_fflush_r+0x22>
 8008388:	0800902c 	.word	0x0800902c
 800838c:	0800904c 	.word	0x0800904c
 8008390:	0800900c 	.word	0x0800900c

08008394 <std>:
 8008394:	2300      	movs	r3, #0
 8008396:	b510      	push	{r4, lr}
 8008398:	4604      	mov	r4, r0
 800839a:	e9c0 3300 	strd	r3, r3, [r0]
 800839e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083a2:	6083      	str	r3, [r0, #8]
 80083a4:	8181      	strh	r1, [r0, #12]
 80083a6:	6643      	str	r3, [r0, #100]	; 0x64
 80083a8:	81c2      	strh	r2, [r0, #14]
 80083aa:	6183      	str	r3, [r0, #24]
 80083ac:	4619      	mov	r1, r3
 80083ae:	2208      	movs	r2, #8
 80083b0:	305c      	adds	r0, #92	; 0x5c
 80083b2:	f7fd facd 	bl	8005950 <memset>
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <std+0x38>)
 80083b8:	6263      	str	r3, [r4, #36]	; 0x24
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <std+0x3c>)
 80083bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <std+0x40>)
 80083c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <std+0x44>)
 80083c4:	6224      	str	r4, [r4, #32]
 80083c6:	6323      	str	r3, [r4, #48]	; 0x30
 80083c8:	bd10      	pop	{r4, pc}
 80083ca:	bf00      	nop
 80083cc:	080086e9 	.word	0x080086e9
 80083d0:	0800870b 	.word	0x0800870b
 80083d4:	08008743 	.word	0x08008743
 80083d8:	08008767 	.word	0x08008767

080083dc <_cleanup_r>:
 80083dc:	4901      	ldr	r1, [pc, #4]	; (80083e4 <_cleanup_r+0x8>)
 80083de:	f000 b8af 	b.w	8008540 <_fwalk_reent>
 80083e2:	bf00      	nop
 80083e4:	0800831d 	.word	0x0800831d

080083e8 <__sfmoreglue>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	2268      	movs	r2, #104	; 0x68
 80083ec:	1e4d      	subs	r5, r1, #1
 80083ee:	4355      	muls	r5, r2
 80083f0:	460e      	mov	r6, r1
 80083f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083f6:	f7ff fa65 	bl	80078c4 <_malloc_r>
 80083fa:	4604      	mov	r4, r0
 80083fc:	b140      	cbz	r0, 8008410 <__sfmoreglue+0x28>
 80083fe:	2100      	movs	r1, #0
 8008400:	e9c0 1600 	strd	r1, r6, [r0]
 8008404:	300c      	adds	r0, #12
 8008406:	60a0      	str	r0, [r4, #8]
 8008408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800840c:	f7fd faa0 	bl	8005950 <memset>
 8008410:	4620      	mov	r0, r4
 8008412:	bd70      	pop	{r4, r5, r6, pc}

08008414 <__sfp_lock_acquire>:
 8008414:	4801      	ldr	r0, [pc, #4]	; (800841c <__sfp_lock_acquire+0x8>)
 8008416:	f000 b8b3 	b.w	8008580 <__retarget_lock_acquire_recursive>
 800841a:	bf00      	nop
 800841c:	20000371 	.word	0x20000371

08008420 <__sfp_lock_release>:
 8008420:	4801      	ldr	r0, [pc, #4]	; (8008428 <__sfp_lock_release+0x8>)
 8008422:	f000 b8ae 	b.w	8008582 <__retarget_lock_release_recursive>
 8008426:	bf00      	nop
 8008428:	20000371 	.word	0x20000371

0800842c <__sinit_lock_acquire>:
 800842c:	4801      	ldr	r0, [pc, #4]	; (8008434 <__sinit_lock_acquire+0x8>)
 800842e:	f000 b8a7 	b.w	8008580 <__retarget_lock_acquire_recursive>
 8008432:	bf00      	nop
 8008434:	20000372 	.word	0x20000372

08008438 <__sinit_lock_release>:
 8008438:	4801      	ldr	r0, [pc, #4]	; (8008440 <__sinit_lock_release+0x8>)
 800843a:	f000 b8a2 	b.w	8008582 <__retarget_lock_release_recursive>
 800843e:	bf00      	nop
 8008440:	20000372 	.word	0x20000372

08008444 <__sinit>:
 8008444:	b510      	push	{r4, lr}
 8008446:	4604      	mov	r4, r0
 8008448:	f7ff fff0 	bl	800842c <__sinit_lock_acquire>
 800844c:	69a3      	ldr	r3, [r4, #24]
 800844e:	b11b      	cbz	r3, 8008458 <__sinit+0x14>
 8008450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008454:	f7ff bff0 	b.w	8008438 <__sinit_lock_release>
 8008458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800845c:	6523      	str	r3, [r4, #80]	; 0x50
 800845e:	4b13      	ldr	r3, [pc, #76]	; (80084ac <__sinit+0x68>)
 8008460:	4a13      	ldr	r2, [pc, #76]	; (80084b0 <__sinit+0x6c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	62a2      	str	r2, [r4, #40]	; 0x28
 8008466:	42a3      	cmp	r3, r4
 8008468:	bf04      	itt	eq
 800846a:	2301      	moveq	r3, #1
 800846c:	61a3      	streq	r3, [r4, #24]
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f820 	bl	80084b4 <__sfp>
 8008474:	6060      	str	r0, [r4, #4]
 8008476:	4620      	mov	r0, r4
 8008478:	f000 f81c 	bl	80084b4 <__sfp>
 800847c:	60a0      	str	r0, [r4, #8]
 800847e:	4620      	mov	r0, r4
 8008480:	f000 f818 	bl	80084b4 <__sfp>
 8008484:	2200      	movs	r2, #0
 8008486:	60e0      	str	r0, [r4, #12]
 8008488:	2104      	movs	r1, #4
 800848a:	6860      	ldr	r0, [r4, #4]
 800848c:	f7ff ff82 	bl	8008394 <std>
 8008490:	68a0      	ldr	r0, [r4, #8]
 8008492:	2201      	movs	r2, #1
 8008494:	2109      	movs	r1, #9
 8008496:	f7ff ff7d 	bl	8008394 <std>
 800849a:	68e0      	ldr	r0, [r4, #12]
 800849c:	2202      	movs	r2, #2
 800849e:	2112      	movs	r1, #18
 80084a0:	f7ff ff78 	bl	8008394 <std>
 80084a4:	2301      	movs	r3, #1
 80084a6:	61a3      	str	r3, [r4, #24]
 80084a8:	e7d2      	b.n	8008450 <__sinit+0xc>
 80084aa:	bf00      	nop
 80084ac:	08008c8c 	.word	0x08008c8c
 80084b0:	080083dd 	.word	0x080083dd

080084b4 <__sfp>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	4607      	mov	r7, r0
 80084b8:	f7ff ffac 	bl	8008414 <__sfp_lock_acquire>
 80084bc:	4b1e      	ldr	r3, [pc, #120]	; (8008538 <__sfp+0x84>)
 80084be:	681e      	ldr	r6, [r3, #0]
 80084c0:	69b3      	ldr	r3, [r6, #24]
 80084c2:	b913      	cbnz	r3, 80084ca <__sfp+0x16>
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7ff ffbd 	bl	8008444 <__sinit>
 80084ca:	3648      	adds	r6, #72	; 0x48
 80084cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	d503      	bpl.n	80084dc <__sfp+0x28>
 80084d4:	6833      	ldr	r3, [r6, #0]
 80084d6:	b30b      	cbz	r3, 800851c <__sfp+0x68>
 80084d8:	6836      	ldr	r6, [r6, #0]
 80084da:	e7f7      	b.n	80084cc <__sfp+0x18>
 80084dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084e0:	b9d5      	cbnz	r5, 8008518 <__sfp+0x64>
 80084e2:	4b16      	ldr	r3, [pc, #88]	; (800853c <__sfp+0x88>)
 80084e4:	60e3      	str	r3, [r4, #12]
 80084e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084ea:	6665      	str	r5, [r4, #100]	; 0x64
 80084ec:	f000 f847 	bl	800857e <__retarget_lock_init_recursive>
 80084f0:	f7ff ff96 	bl	8008420 <__sfp_lock_release>
 80084f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084fc:	6025      	str	r5, [r4, #0]
 80084fe:	61a5      	str	r5, [r4, #24]
 8008500:	2208      	movs	r2, #8
 8008502:	4629      	mov	r1, r5
 8008504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008508:	f7fd fa22 	bl	8005950 <memset>
 800850c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008514:	4620      	mov	r0, r4
 8008516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008518:	3468      	adds	r4, #104	; 0x68
 800851a:	e7d9      	b.n	80084d0 <__sfp+0x1c>
 800851c:	2104      	movs	r1, #4
 800851e:	4638      	mov	r0, r7
 8008520:	f7ff ff62 	bl	80083e8 <__sfmoreglue>
 8008524:	4604      	mov	r4, r0
 8008526:	6030      	str	r0, [r6, #0]
 8008528:	2800      	cmp	r0, #0
 800852a:	d1d5      	bne.n	80084d8 <__sfp+0x24>
 800852c:	f7ff ff78 	bl	8008420 <__sfp_lock_release>
 8008530:	230c      	movs	r3, #12
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	e7ee      	b.n	8008514 <__sfp+0x60>
 8008536:	bf00      	nop
 8008538:	08008c8c 	.word	0x08008c8c
 800853c:	ffff0001 	.word	0xffff0001

08008540 <_fwalk_reent>:
 8008540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008544:	4606      	mov	r6, r0
 8008546:	4688      	mov	r8, r1
 8008548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800854c:	2700      	movs	r7, #0
 800854e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008552:	f1b9 0901 	subs.w	r9, r9, #1
 8008556:	d505      	bpl.n	8008564 <_fwalk_reent+0x24>
 8008558:	6824      	ldr	r4, [r4, #0]
 800855a:	2c00      	cmp	r4, #0
 800855c:	d1f7      	bne.n	800854e <_fwalk_reent+0xe>
 800855e:	4638      	mov	r0, r7
 8008560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008564:	89ab      	ldrh	r3, [r5, #12]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d907      	bls.n	800857a <_fwalk_reent+0x3a>
 800856a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800856e:	3301      	adds	r3, #1
 8008570:	d003      	beq.n	800857a <_fwalk_reent+0x3a>
 8008572:	4629      	mov	r1, r5
 8008574:	4630      	mov	r0, r6
 8008576:	47c0      	blx	r8
 8008578:	4307      	orrs	r7, r0
 800857a:	3568      	adds	r5, #104	; 0x68
 800857c:	e7e9      	b.n	8008552 <_fwalk_reent+0x12>

0800857e <__retarget_lock_init_recursive>:
 800857e:	4770      	bx	lr

08008580 <__retarget_lock_acquire_recursive>:
 8008580:	4770      	bx	lr

08008582 <__retarget_lock_release_recursive>:
 8008582:	4770      	bx	lr

08008584 <__swhatbuf_r>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	460e      	mov	r6, r1
 8008588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800858c:	2900      	cmp	r1, #0
 800858e:	b096      	sub	sp, #88	; 0x58
 8008590:	4614      	mov	r4, r2
 8008592:	461d      	mov	r5, r3
 8008594:	da08      	bge.n	80085a8 <__swhatbuf_r+0x24>
 8008596:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	602a      	str	r2, [r5, #0]
 800859e:	061a      	lsls	r2, r3, #24
 80085a0:	d410      	bmi.n	80085c4 <__swhatbuf_r+0x40>
 80085a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085a6:	e00e      	b.n	80085c6 <__swhatbuf_r+0x42>
 80085a8:	466a      	mov	r2, sp
 80085aa:	f000 f903 	bl	80087b4 <_fstat_r>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	dbf1      	blt.n	8008596 <__swhatbuf_r+0x12>
 80085b2:	9a01      	ldr	r2, [sp, #4]
 80085b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085bc:	425a      	negs	r2, r3
 80085be:	415a      	adcs	r2, r3
 80085c0:	602a      	str	r2, [r5, #0]
 80085c2:	e7ee      	b.n	80085a2 <__swhatbuf_r+0x1e>
 80085c4:	2340      	movs	r3, #64	; 0x40
 80085c6:	2000      	movs	r0, #0
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	b016      	add	sp, #88	; 0x58
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080085d0 <__smakebuf_r>:
 80085d0:	898b      	ldrh	r3, [r1, #12]
 80085d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085d4:	079d      	lsls	r5, r3, #30
 80085d6:	4606      	mov	r6, r0
 80085d8:	460c      	mov	r4, r1
 80085da:	d507      	bpl.n	80085ec <__smakebuf_r+0x1c>
 80085dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	6123      	str	r3, [r4, #16]
 80085e4:	2301      	movs	r3, #1
 80085e6:	6163      	str	r3, [r4, #20]
 80085e8:	b002      	add	sp, #8
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	ab01      	add	r3, sp, #4
 80085ee:	466a      	mov	r2, sp
 80085f0:	f7ff ffc8 	bl	8008584 <__swhatbuf_r>
 80085f4:	9900      	ldr	r1, [sp, #0]
 80085f6:	4605      	mov	r5, r0
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7ff f963 	bl	80078c4 <_malloc_r>
 80085fe:	b948      	cbnz	r0, 8008614 <__smakebuf_r+0x44>
 8008600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008604:	059a      	lsls	r2, r3, #22
 8008606:	d4ef      	bmi.n	80085e8 <__smakebuf_r+0x18>
 8008608:	f023 0303 	bic.w	r3, r3, #3
 800860c:	f043 0302 	orr.w	r3, r3, #2
 8008610:	81a3      	strh	r3, [r4, #12]
 8008612:	e7e3      	b.n	80085dc <__smakebuf_r+0xc>
 8008614:	4b0d      	ldr	r3, [pc, #52]	; (800864c <__smakebuf_r+0x7c>)
 8008616:	62b3      	str	r3, [r6, #40]	; 0x28
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	6020      	str	r0, [r4, #0]
 800861c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008620:	81a3      	strh	r3, [r4, #12]
 8008622:	9b00      	ldr	r3, [sp, #0]
 8008624:	6163      	str	r3, [r4, #20]
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	6120      	str	r0, [r4, #16]
 800862a:	b15b      	cbz	r3, 8008644 <__smakebuf_r+0x74>
 800862c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f8d1 	bl	80087d8 <_isatty_r>
 8008636:	b128      	cbz	r0, 8008644 <__smakebuf_r+0x74>
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	f023 0303 	bic.w	r3, r3, #3
 800863e:	f043 0301 	orr.w	r3, r3, #1
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	89a0      	ldrh	r0, [r4, #12]
 8008646:	4305      	orrs	r5, r0
 8008648:	81a5      	strh	r5, [r4, #12]
 800864a:	e7cd      	b.n	80085e8 <__smakebuf_r+0x18>
 800864c:	080083dd 	.word	0x080083dd

08008650 <_malloc_usable_size_r>:
 8008650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008654:	1f18      	subs	r0, r3, #4
 8008656:	2b00      	cmp	r3, #0
 8008658:	bfbc      	itt	lt
 800865a:	580b      	ldrlt	r3, [r1, r0]
 800865c:	18c0      	addlt	r0, r0, r3
 800865e:	4770      	bx	lr

08008660 <_raise_r>:
 8008660:	291f      	cmp	r1, #31
 8008662:	b538      	push	{r3, r4, r5, lr}
 8008664:	4604      	mov	r4, r0
 8008666:	460d      	mov	r5, r1
 8008668:	d904      	bls.n	8008674 <_raise_r+0x14>
 800866a:	2316      	movs	r3, #22
 800866c:	6003      	str	r3, [r0, #0]
 800866e:	f04f 30ff 	mov.w	r0, #4294967295
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008676:	b112      	cbz	r2, 800867e <_raise_r+0x1e>
 8008678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800867c:	b94b      	cbnz	r3, 8008692 <_raise_r+0x32>
 800867e:	4620      	mov	r0, r4
 8008680:	f000 f830 	bl	80086e4 <_getpid_r>
 8008684:	462a      	mov	r2, r5
 8008686:	4601      	mov	r1, r0
 8008688:	4620      	mov	r0, r4
 800868a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800868e:	f000 b817 	b.w	80086c0 <_kill_r>
 8008692:	2b01      	cmp	r3, #1
 8008694:	d00a      	beq.n	80086ac <_raise_r+0x4c>
 8008696:	1c59      	adds	r1, r3, #1
 8008698:	d103      	bne.n	80086a2 <_raise_r+0x42>
 800869a:	2316      	movs	r3, #22
 800869c:	6003      	str	r3, [r0, #0]
 800869e:	2001      	movs	r0, #1
 80086a0:	e7e7      	b.n	8008672 <_raise_r+0x12>
 80086a2:	2400      	movs	r4, #0
 80086a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086a8:	4628      	mov	r0, r5
 80086aa:	4798      	blx	r3
 80086ac:	2000      	movs	r0, #0
 80086ae:	e7e0      	b.n	8008672 <_raise_r+0x12>

080086b0 <raise>:
 80086b0:	4b02      	ldr	r3, [pc, #8]	; (80086bc <raise+0xc>)
 80086b2:	4601      	mov	r1, r0
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	f7ff bfd3 	b.w	8008660 <_raise_r>
 80086ba:	bf00      	nop
 80086bc:	2000001c 	.word	0x2000001c

080086c0 <_kill_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d07      	ldr	r5, [pc, #28]	; (80086e0 <_kill_r+0x20>)
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	4611      	mov	r1, r2
 80086cc:	602b      	str	r3, [r5, #0]
 80086ce:	f7f9 fad5 	bl	8001c7c <_kill>
 80086d2:	1c43      	adds	r3, r0, #1
 80086d4:	d102      	bne.n	80086dc <_kill_r+0x1c>
 80086d6:	682b      	ldr	r3, [r5, #0]
 80086d8:	b103      	cbz	r3, 80086dc <_kill_r+0x1c>
 80086da:	6023      	str	r3, [r4, #0]
 80086dc:	bd38      	pop	{r3, r4, r5, pc}
 80086de:	bf00      	nop
 80086e0:	2000036c 	.word	0x2000036c

080086e4 <_getpid_r>:
 80086e4:	f7f9 bac2 	b.w	8001c6c <_getpid>

080086e8 <__sread>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	460c      	mov	r4, r1
 80086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f0:	f000 f894 	bl	800881c <_read_r>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	bfab      	itete	ge
 80086f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086fa:	89a3      	ldrhlt	r3, [r4, #12]
 80086fc:	181b      	addge	r3, r3, r0
 80086fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008702:	bfac      	ite	ge
 8008704:	6563      	strge	r3, [r4, #84]	; 0x54
 8008706:	81a3      	strhlt	r3, [r4, #12]
 8008708:	bd10      	pop	{r4, pc}

0800870a <__swrite>:
 800870a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870e:	461f      	mov	r7, r3
 8008710:	898b      	ldrh	r3, [r1, #12]
 8008712:	05db      	lsls	r3, r3, #23
 8008714:	4605      	mov	r5, r0
 8008716:	460c      	mov	r4, r1
 8008718:	4616      	mov	r6, r2
 800871a:	d505      	bpl.n	8008728 <__swrite+0x1e>
 800871c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008720:	2302      	movs	r3, #2
 8008722:	2200      	movs	r2, #0
 8008724:	f000 f868 	bl	80087f8 <_lseek_r>
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800872e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	4632      	mov	r2, r6
 8008736:	463b      	mov	r3, r7
 8008738:	4628      	mov	r0, r5
 800873a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800873e:	f000 b817 	b.w	8008770 <_write_r>

08008742 <__sseek>:
 8008742:	b510      	push	{r4, lr}
 8008744:	460c      	mov	r4, r1
 8008746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874a:	f000 f855 	bl	80087f8 <_lseek_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	bf15      	itete	ne
 8008754:	6560      	strne	r0, [r4, #84]	; 0x54
 8008756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800875a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800875e:	81a3      	strheq	r3, [r4, #12]
 8008760:	bf18      	it	ne
 8008762:	81a3      	strhne	r3, [r4, #12]
 8008764:	bd10      	pop	{r4, pc}

08008766 <__sclose>:
 8008766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876a:	f000 b813 	b.w	8008794 <_close_r>
	...

08008770 <_write_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4d07      	ldr	r5, [pc, #28]	; (8008790 <_write_r+0x20>)
 8008774:	4604      	mov	r4, r0
 8008776:	4608      	mov	r0, r1
 8008778:	4611      	mov	r1, r2
 800877a:	2200      	movs	r2, #0
 800877c:	602a      	str	r2, [r5, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	f7f9 fab3 	bl	8001cea <_write>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_write_r+0x1e>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_write_r+0x1e>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	2000036c 	.word	0x2000036c

08008794 <_close_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4d06      	ldr	r5, [pc, #24]	; (80087b0 <_close_r+0x1c>)
 8008798:	2300      	movs	r3, #0
 800879a:	4604      	mov	r4, r0
 800879c:	4608      	mov	r0, r1
 800879e:	602b      	str	r3, [r5, #0]
 80087a0:	f7f9 fabf 	bl	8001d22 <_close>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_close_r+0x1a>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_close_r+0x1a>
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	2000036c 	.word	0x2000036c

080087b4 <_fstat_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d07      	ldr	r5, [pc, #28]	; (80087d4 <_fstat_r+0x20>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	4611      	mov	r1, r2
 80087c0:	602b      	str	r3, [r5, #0]
 80087c2:	f7f9 faba 	bl	8001d3a <_fstat>
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	d102      	bne.n	80087d0 <_fstat_r+0x1c>
 80087ca:	682b      	ldr	r3, [r5, #0]
 80087cc:	b103      	cbz	r3, 80087d0 <_fstat_r+0x1c>
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	bd38      	pop	{r3, r4, r5, pc}
 80087d2:	bf00      	nop
 80087d4:	2000036c 	.word	0x2000036c

080087d8 <_isatty_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4d06      	ldr	r5, [pc, #24]	; (80087f4 <_isatty_r+0x1c>)
 80087dc:	2300      	movs	r3, #0
 80087de:	4604      	mov	r4, r0
 80087e0:	4608      	mov	r0, r1
 80087e2:	602b      	str	r3, [r5, #0]
 80087e4:	f7f9 fab9 	bl	8001d5a <_isatty>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_isatty_r+0x1a>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_isatty_r+0x1a>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	2000036c 	.word	0x2000036c

080087f8 <_lseek_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d07      	ldr	r5, [pc, #28]	; (8008818 <_lseek_r+0x20>)
 80087fc:	4604      	mov	r4, r0
 80087fe:	4608      	mov	r0, r1
 8008800:	4611      	mov	r1, r2
 8008802:	2200      	movs	r2, #0
 8008804:	602a      	str	r2, [r5, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	f7f9 fab2 	bl	8001d70 <_lseek>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_lseek_r+0x1e>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_lseek_r+0x1e>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	2000036c 	.word	0x2000036c

0800881c <_read_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4d07      	ldr	r5, [pc, #28]	; (800883c <_read_r+0x20>)
 8008820:	4604      	mov	r4, r0
 8008822:	4608      	mov	r0, r1
 8008824:	4611      	mov	r1, r2
 8008826:	2200      	movs	r2, #0
 8008828:	602a      	str	r2, [r5, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	f7f9 fa40 	bl	8001cb0 <_read>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_read_r+0x1e>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	b103      	cbz	r3, 800883a <_read_r+0x1e>
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	2000036c 	.word	0x2000036c

08008840 <exp>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	ed2d 8b02 	vpush	{d8}
 8008846:	ec55 4b10 	vmov	r4, r5, d0
 800884a:	f000 f841 	bl	80088d0 <__ieee754_exp>
 800884e:	eeb0 8a40 	vmov.f32	s16, s0
 8008852:	eef0 8a60 	vmov.f32	s17, s1
 8008856:	ec45 4b10 	vmov	d0, r4, r5
 800885a:	f000 f9eb 	bl	8008c34 <finite>
 800885e:	b168      	cbz	r0, 800887c <exp+0x3c>
 8008860:	a317      	add	r3, pc, #92	; (adr r3, 80088c0 <exp+0x80>)
 8008862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008866:	4620      	mov	r0, r4
 8008868:	4629      	mov	r1, r5
 800886a:	f7f8 f95d 	bl	8000b28 <__aeabi_dcmpgt>
 800886e:	b160      	cbz	r0, 800888a <exp+0x4a>
 8008870:	f7fd f844 	bl	80058fc <__errno>
 8008874:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80088b0 <exp+0x70>
 8008878:	2322      	movs	r3, #34	; 0x22
 800887a:	6003      	str	r3, [r0, #0]
 800887c:	eeb0 0a48 	vmov.f32	s0, s16
 8008880:	eef0 0a68 	vmov.f32	s1, s17
 8008884:	ecbd 8b02 	vpop	{d8}
 8008888:	bd38      	pop	{r3, r4, r5, pc}
 800888a:	a30f      	add	r3, pc, #60	; (adr r3, 80088c8 <exp+0x88>)
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	4620      	mov	r0, r4
 8008892:	4629      	mov	r1, r5
 8008894:	f7f8 f92a 	bl	8000aec <__aeabi_dcmplt>
 8008898:	2800      	cmp	r0, #0
 800889a:	d0ef      	beq.n	800887c <exp+0x3c>
 800889c:	f7fd f82e 	bl	80058fc <__errno>
 80088a0:	2322      	movs	r3, #34	; 0x22
 80088a2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80088b8 <exp+0x78>
 80088a6:	6003      	str	r3, [r0, #0]
 80088a8:	e7e8      	b.n	800887c <exp+0x3c>
 80088aa:	bf00      	nop
 80088ac:	f3af 8000 	nop.w
 80088b0:	00000000 	.word	0x00000000
 80088b4:	7ff00000 	.word	0x7ff00000
	...
 80088c0:	fefa39ef 	.word	0xfefa39ef
 80088c4:	40862e42 	.word	0x40862e42
 80088c8:	d52d3051 	.word	0xd52d3051
 80088cc:	c0874910 	.word	0xc0874910

080088d0 <__ieee754_exp>:
 80088d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d4:	ec55 4b10 	vmov	r4, r5, d0
 80088d8:	49b5      	ldr	r1, [pc, #724]	; (8008bb0 <__ieee754_exp+0x2e0>)
 80088da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80088de:	428b      	cmp	r3, r1
 80088e0:	ed2d 8b04 	vpush	{d8-d9}
 80088e4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80088e8:	d93d      	bls.n	8008966 <__ieee754_exp+0x96>
 80088ea:	49b2      	ldr	r1, [pc, #712]	; (8008bb4 <__ieee754_exp+0x2e4>)
 80088ec:	428b      	cmp	r3, r1
 80088ee:	d918      	bls.n	8008922 <__ieee754_exp+0x52>
 80088f0:	ee10 3a10 	vmov	r3, s0
 80088f4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80088f8:	4313      	orrs	r3, r2
 80088fa:	d009      	beq.n	8008910 <__ieee754_exp+0x40>
 80088fc:	ee10 2a10 	vmov	r2, s0
 8008900:	462b      	mov	r3, r5
 8008902:	4620      	mov	r0, r4
 8008904:	4629      	mov	r1, r5
 8008906:	f7f7 fcc9 	bl	800029c <__adddf3>
 800890a:	4604      	mov	r4, r0
 800890c:	460d      	mov	r5, r1
 800890e:	e002      	b.n	8008916 <__ieee754_exp+0x46>
 8008910:	b10e      	cbz	r6, 8008916 <__ieee754_exp+0x46>
 8008912:	2400      	movs	r4, #0
 8008914:	2500      	movs	r5, #0
 8008916:	ecbd 8b04 	vpop	{d8-d9}
 800891a:	ec45 4b10 	vmov	d0, r4, r5
 800891e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008922:	a38d      	add	r3, pc, #564	; (adr r3, 8008b58 <__ieee754_exp+0x288>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	ee10 0a10 	vmov	r0, s0
 800892c:	4629      	mov	r1, r5
 800892e:	f7f8 f8fb 	bl	8000b28 <__aeabi_dcmpgt>
 8008932:	4607      	mov	r7, r0
 8008934:	b130      	cbz	r0, 8008944 <__ieee754_exp+0x74>
 8008936:	ecbd 8b04 	vpop	{d8-d9}
 800893a:	2000      	movs	r0, #0
 800893c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008940:	f000 b96f 	b.w	8008c22 <__math_oflow>
 8008944:	a386      	add	r3, pc, #536	; (adr r3, 8008b60 <__ieee754_exp+0x290>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	4620      	mov	r0, r4
 800894c:	4629      	mov	r1, r5
 800894e:	f7f8 f8cd 	bl	8000aec <__aeabi_dcmplt>
 8008952:	2800      	cmp	r0, #0
 8008954:	f000 808b 	beq.w	8008a6e <__ieee754_exp+0x19e>
 8008958:	ecbd 8b04 	vpop	{d8-d9}
 800895c:	4638      	mov	r0, r7
 800895e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008962:	f000 b955 	b.w	8008c10 <__math_uflow>
 8008966:	4a94      	ldr	r2, [pc, #592]	; (8008bb8 <__ieee754_exp+0x2e8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	f240 80ac 	bls.w	8008ac6 <__ieee754_exp+0x1f6>
 800896e:	4a93      	ldr	r2, [pc, #588]	; (8008bbc <__ieee754_exp+0x2ec>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d87c      	bhi.n	8008a6e <__ieee754_exp+0x19e>
 8008974:	4b92      	ldr	r3, [pc, #584]	; (8008bc0 <__ieee754_exp+0x2f0>)
 8008976:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	ee10 0a10 	vmov	r0, s0
 8008982:	4629      	mov	r1, r5
 8008984:	f7f7 fc88 	bl	8000298 <__aeabi_dsub>
 8008988:	4b8e      	ldr	r3, [pc, #568]	; (8008bc4 <__ieee754_exp+0x2f4>)
 800898a:	00f7      	lsls	r7, r6, #3
 800898c:	443b      	add	r3, r7
 800898e:	ed93 7b00 	vldr	d7, [r3]
 8008992:	f1c6 0a01 	rsb	sl, r6, #1
 8008996:	4680      	mov	r8, r0
 8008998:	4689      	mov	r9, r1
 800899a:	ebaa 0a06 	sub.w	sl, sl, r6
 800899e:	eeb0 8a47 	vmov.f32	s16, s14
 80089a2:	eef0 8a67 	vmov.f32	s17, s15
 80089a6:	ec53 2b18 	vmov	r2, r3, d8
 80089aa:	4640      	mov	r0, r8
 80089ac:	4649      	mov	r1, r9
 80089ae:	f7f7 fc73 	bl	8000298 <__aeabi_dsub>
 80089b2:	4604      	mov	r4, r0
 80089b4:	460d      	mov	r5, r1
 80089b6:	4622      	mov	r2, r4
 80089b8:	462b      	mov	r3, r5
 80089ba:	4620      	mov	r0, r4
 80089bc:	4629      	mov	r1, r5
 80089be:	f7f7 fe23 	bl	8000608 <__aeabi_dmul>
 80089c2:	a369      	add	r3, pc, #420	; (adr r3, 8008b68 <__ieee754_exp+0x298>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	4606      	mov	r6, r0
 80089ca:	460f      	mov	r7, r1
 80089cc:	f7f7 fe1c 	bl	8000608 <__aeabi_dmul>
 80089d0:	a367      	add	r3, pc, #412	; (adr r3, 8008b70 <__ieee754_exp+0x2a0>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fc5f 	bl	8000298 <__aeabi_dsub>
 80089da:	4632      	mov	r2, r6
 80089dc:	463b      	mov	r3, r7
 80089de:	f7f7 fe13 	bl	8000608 <__aeabi_dmul>
 80089e2:	a365      	add	r3, pc, #404	; (adr r3, 8008b78 <__ieee754_exp+0x2a8>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f7f7 fc58 	bl	800029c <__adddf3>
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	f7f7 fe0a 	bl	8000608 <__aeabi_dmul>
 80089f4:	a362      	add	r3, pc, #392	; (adr r3, 8008b80 <__ieee754_exp+0x2b0>)
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f7f7 fc4d 	bl	8000298 <__aeabi_dsub>
 80089fe:	4632      	mov	r2, r6
 8008a00:	463b      	mov	r3, r7
 8008a02:	f7f7 fe01 	bl	8000608 <__aeabi_dmul>
 8008a06:	a360      	add	r3, pc, #384	; (adr r3, 8008b88 <__ieee754_exp+0x2b8>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	f7f7 fc46 	bl	800029c <__adddf3>
 8008a10:	4632      	mov	r2, r6
 8008a12:	463b      	mov	r3, r7
 8008a14:	f7f7 fdf8 	bl	8000608 <__aeabi_dmul>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fc3a 	bl	8000298 <__aeabi_dsub>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4606      	mov	r6, r0
 8008a2a:	460f      	mov	r7, r1
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fdea 	bl	8000608 <__aeabi_dmul>
 8008a34:	ec41 0b19 	vmov	d9, r0, r1
 8008a38:	f1ba 0f00 	cmp.w	sl, #0
 8008a3c:	d15d      	bne.n	8008afa <__ieee754_exp+0x22a>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a44:	4630      	mov	r0, r6
 8008a46:	4639      	mov	r1, r7
 8008a48:	f7f7 fc26 	bl	8000298 <__aeabi_dsub>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	ec51 0b19 	vmov	r0, r1, d9
 8008a54:	f7f7 ff02 	bl	800085c <__aeabi_ddiv>
 8008a58:	4622      	mov	r2, r4
 8008a5a:	462b      	mov	r3, r5
 8008a5c:	f7f7 fc1c 	bl	8000298 <__aeabi_dsub>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	2000      	movs	r0, #0
 8008a66:	4958      	ldr	r1, [pc, #352]	; (8008bc8 <__ieee754_exp+0x2f8>)
 8008a68:	f7f7 fc16 	bl	8000298 <__aeabi_dsub>
 8008a6c:	e74d      	b.n	800890a <__ieee754_exp+0x3a>
 8008a6e:	4857      	ldr	r0, [pc, #348]	; (8008bcc <__ieee754_exp+0x2fc>)
 8008a70:	a347      	add	r3, pc, #284	; (adr r3, 8008b90 <__ieee754_exp+0x2c0>)
 8008a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a76:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7f7 fdc3 	bl	8000608 <__aeabi_dmul>
 8008a82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a86:	f7f7 fc09 	bl	800029c <__adddf3>
 8008a8a:	f7f8 f86d 	bl	8000b68 <__aeabi_d2iz>
 8008a8e:	4682      	mov	sl, r0
 8008a90:	f7f7 fd50 	bl	8000534 <__aeabi_i2d>
 8008a94:	a340      	add	r3, pc, #256	; (adr r3, 8008b98 <__ieee754_exp+0x2c8>)
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	460f      	mov	r7, r1
 8008a9e:	f7f7 fdb3 	bl	8000608 <__aeabi_dmul>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7f7 fbf5 	bl	8000298 <__aeabi_dsub>
 8008aae:	a33c      	add	r3, pc, #240	; (adr r3, 8008ba0 <__ieee754_exp+0x2d0>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	4680      	mov	r8, r0
 8008ab6:	4689      	mov	r9, r1
 8008ab8:	4630      	mov	r0, r6
 8008aba:	4639      	mov	r1, r7
 8008abc:	f7f7 fda4 	bl	8000608 <__aeabi_dmul>
 8008ac0:	ec41 0b18 	vmov	d8, r0, r1
 8008ac4:	e76f      	b.n	80089a6 <__ieee754_exp+0xd6>
 8008ac6:	4a42      	ldr	r2, [pc, #264]	; (8008bd0 <__ieee754_exp+0x300>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d811      	bhi.n	8008af0 <__ieee754_exp+0x220>
 8008acc:	a336      	add	r3, pc, #216	; (adr r3, 8008ba8 <__ieee754_exp+0x2d8>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	ee10 0a10 	vmov	r0, s0
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fbe0 	bl	800029c <__adddf3>
 8008adc:	4b3a      	ldr	r3, [pc, #232]	; (8008bc8 <__ieee754_exp+0x2f8>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f7f8 f822 	bl	8000b28 <__aeabi_dcmpgt>
 8008ae4:	b138      	cbz	r0, 8008af6 <__ieee754_exp+0x226>
 8008ae6:	4b38      	ldr	r3, [pc, #224]	; (8008bc8 <__ieee754_exp+0x2f8>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	4620      	mov	r0, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	e70a      	b.n	8008906 <__ieee754_exp+0x36>
 8008af0:	f04f 0a00 	mov.w	sl, #0
 8008af4:	e75f      	b.n	80089b6 <__ieee754_exp+0xe6>
 8008af6:	4682      	mov	sl, r0
 8008af8:	e75d      	b.n	80089b6 <__ieee754_exp+0xe6>
 8008afa:	4632      	mov	r2, r6
 8008afc:	463b      	mov	r3, r7
 8008afe:	2000      	movs	r0, #0
 8008b00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008b04:	f7f7 fbc8 	bl	8000298 <__aeabi_dsub>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	ec51 0b19 	vmov	r0, r1, d9
 8008b10:	f7f7 fea4 	bl	800085c <__aeabi_ddiv>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	ec51 0b18 	vmov	r0, r1, d8
 8008b1c:	f7f7 fbbc 	bl	8000298 <__aeabi_dsub>
 8008b20:	4642      	mov	r2, r8
 8008b22:	464b      	mov	r3, r9
 8008b24:	f7f7 fbb8 	bl	8000298 <__aeabi_dsub>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	4926      	ldr	r1, [pc, #152]	; (8008bc8 <__ieee754_exp+0x2f8>)
 8008b30:	f7f7 fbb2 	bl	8000298 <__aeabi_dsub>
 8008b34:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8008b38:	4592      	cmp	sl, r2
 8008b3a:	db02      	blt.n	8008b42 <__ieee754_exp+0x272>
 8008b3c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008b40:	e6e3      	b.n	800890a <__ieee754_exp+0x3a>
 8008b42:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8008b46:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008b50:	f7f7 fd5a 	bl	8000608 <__aeabi_dmul>
 8008b54:	e6d9      	b.n	800890a <__ieee754_exp+0x3a>
 8008b56:	bf00      	nop
 8008b58:	fefa39ef 	.word	0xfefa39ef
 8008b5c:	40862e42 	.word	0x40862e42
 8008b60:	d52d3051 	.word	0xd52d3051
 8008b64:	c0874910 	.word	0xc0874910
 8008b68:	72bea4d0 	.word	0x72bea4d0
 8008b6c:	3e663769 	.word	0x3e663769
 8008b70:	c5d26bf1 	.word	0xc5d26bf1
 8008b74:	3ebbbd41 	.word	0x3ebbbd41
 8008b78:	af25de2c 	.word	0xaf25de2c
 8008b7c:	3f11566a 	.word	0x3f11566a
 8008b80:	16bebd93 	.word	0x16bebd93
 8008b84:	3f66c16c 	.word	0x3f66c16c
 8008b88:	5555553e 	.word	0x5555553e
 8008b8c:	3fc55555 	.word	0x3fc55555
 8008b90:	652b82fe 	.word	0x652b82fe
 8008b94:	3ff71547 	.word	0x3ff71547
 8008b98:	fee00000 	.word	0xfee00000
 8008b9c:	3fe62e42 	.word	0x3fe62e42
 8008ba0:	35793c76 	.word	0x35793c76
 8008ba4:	3dea39ef 	.word	0x3dea39ef
 8008ba8:	8800759c 	.word	0x8800759c
 8008bac:	7e37e43c 	.word	0x7e37e43c
 8008bb0:	40862e41 	.word	0x40862e41
 8008bb4:	7fefffff 	.word	0x7fefffff
 8008bb8:	3fd62e42 	.word	0x3fd62e42
 8008bbc:	3ff0a2b1 	.word	0x3ff0a2b1
 8008bc0:	08009080 	.word	0x08009080
 8008bc4:	08009090 	.word	0x08009090
 8008bc8:	3ff00000 	.word	0x3ff00000
 8008bcc:	08009070 	.word	0x08009070
 8008bd0:	3defffff 	.word	0x3defffff

08008bd4 <with_errno>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	460d      	mov	r5, r1
 8008bda:	4616      	mov	r6, r2
 8008bdc:	f7fc fe8e 	bl	80058fc <__errno>
 8008be0:	4629      	mov	r1, r5
 8008be2:	6006      	str	r6, [r0, #0]
 8008be4:	4620      	mov	r0, r4
 8008be6:	bd70      	pop	{r4, r5, r6, pc}

08008be8 <xflow>:
 8008be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bea:	4614      	mov	r4, r2
 8008bec:	461d      	mov	r5, r3
 8008bee:	b108      	cbz	r0, 8008bf4 <xflow+0xc>
 8008bf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	e9cd 2300 	strd	r2, r3, [sp]
 8008bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 fd02 	bl	8000608 <__aeabi_dmul>
 8008c04:	2222      	movs	r2, #34	; 0x22
 8008c06:	b003      	add	sp, #12
 8008c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c0c:	f7ff bfe2 	b.w	8008bd4 <with_errno>

08008c10 <__math_uflow>:
 8008c10:	b508      	push	{r3, lr}
 8008c12:	2200      	movs	r2, #0
 8008c14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c18:	f7ff ffe6 	bl	8008be8 <xflow>
 8008c1c:	ec41 0b10 	vmov	d0, r0, r1
 8008c20:	bd08      	pop	{r3, pc}

08008c22 <__math_oflow>:
 8008c22:	b508      	push	{r3, lr}
 8008c24:	2200      	movs	r2, #0
 8008c26:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008c2a:	f7ff ffdd 	bl	8008be8 <xflow>
 8008c2e:	ec41 0b10 	vmov	d0, r0, r1
 8008c32:	bd08      	pop	{r3, pc}

08008c34 <finite>:
 8008c34:	b082      	sub	sp, #8
 8008c36:	ed8d 0b00 	vstr	d0, [sp]
 8008c3a:	9801      	ldr	r0, [sp, #4]
 8008c3c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008c40:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008c44:	0fc0      	lsrs	r0, r0, #31
 8008c46:	b002      	add	sp, #8
 8008c48:	4770      	bx	lr
	...

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr
